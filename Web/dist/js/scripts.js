var app=angular.module("app",["ui.router","satellizer"]),CONSTANTS=function(){var e={};return e.API_BASE_URL="http://discoverbandapi.int/public/api",e}();app.config(["$stateProvider","$urlRouterProvider","$authProvider",function(e,t,r){r.loginUrl=CONSTANTS.API_BASE_URL+"/login",r.signupUrl=CONSTANTS.API_BASE_URL+"/register",t.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/pages/home.html",controller:"homeController as home"}).state("solo",{url:"/solo",templateUrl:"app/pages/solo.html",controller:"soloController as solo"}).state("merged",{url:"/merged",templateUrl:"app/pages/merged.html",controller:"mergedController as merged"}).state("profile",{url:"/profile",templateUrl:"app/pages/profile.html",controller:"profileController as profile"})}]),app.controller("homeController",["instrumentService","filterService",function(e,t){function r(){n.filterData=o.filterData}var n=this,o=t;r()}]),app.controller("mergeController",function(){function e(){}e()}),app.controller("mergedController",function(){function e(){t.test="Merged"}var t=this;e()}),app.controller("profileController",["userService",function(e){function t(){n.getUser().then(function(e){r.username=e.data.username,r.email=e.data.email})}var r=this,n=e,o=document.getElementById("update-profile-spinner"),a={lines:13,length:28,width:12,radius:42,scale:.15,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"89%",left:"25.5%",shadow:!1,hwaccel:!1,position:"absolute"};r.update=function(){var e=new Spinner(a).spin(o);r.loading=!0;var t={username:r.username,email:r.email};n.updateUser(t).then(function(t){e.stop(),r.loading=!1},function(t){e.stop(),r.loading=!1})},t()}]),app.controller("soloController",["$scope","bandService","soloService","instrumentService","filterService",function(e,t,r,n,o){function a(){d.getTracks().then(function(e){s.soloTracks=e.data,s.filteredTracks=s.soloTracks,i()},function(e){console.log(e)})}function i(){s.filteredTracks=[],angular.forEach(s.soloTracks,function(e,t){goodSearch=!0,""!=!s.filterData.artist||e.artist.name.match(new RegExp(s.filterData.artist,"i"))||(goodSearch=!1),""!=!s.filterData.title||e.songname.match(new RegExp(s.filterData.title,"i"))||(goodSearch=!1),s.filterData[e.instrument_id]||(goodSearch=!1),goodSearch&&s.filteredTracks.push(e)})}function l(e,t,r){for(var n=0,o=e.length;n<o;n++)if(e[n][r]===t)return n;return-1}function c(){a(),s.instruments=p.instruments,s.filterData=f.filterData,s.bandTrackIdArray=[],angular.forEach(u.trackArray,function(e,t){s.bandTrackIdArray.push(e.id)})}var s=this,u=t,d=r,p=n,f=o;s.addToBand=function(e){u.trackArray.push(e),angular.forEach(u.trackArray,function(e,t){s.bandTrackIdArray.push(e.id)}),console.log("Track added to new band: "+e),console.log(u.trackArray)},s.removeFromBand=function(e){index=l(u.trackArray,e.id,"id"),index>-1&&(u.trackArray.splice(index,1),s.bandTrackArray=u.trackArray,intIndex=s.bandTrackIdArray.indexOf(e.id),intIndex>-1&&s.bandTrackIdArray.splice(intIndex,1)),console.log("Track removed from new band: "+e),console.log(u.trackArray)},e.$watch(function(){return s.filterData},function(){s.filterData&&i()},!0),s.track1=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),s.track2=new Audio("dist/audio/Behemoth - Conquer All - Guitar.mp3"),c()}]),app.filter("band",function(){return function(e,t){var r=!1;return angular.forEach(t,function(t,n){t==e&&(r=!0)}),r}}),app.service("bandService",function(){var e=this;e.testValue="This value is from a service!",e.trackArray=[],e.testFunction=function(){alert("Test function called from inside service!")}}),app.service("filterService",["instrumentService",function(e){function t(){r.createFilterData()}var r=this,n=e;r.createFilterData=function(){r.filterData={artist:"",title:""},angular.forEach(n.instruments,function(e,t){r.filterData[e.id]=!0})},t()}]),app.service("instrumentService",["$http",function(e){function t(t,r){return r?"":r={},e.get(t,r)}var r=this;r.getInstruments=function(){var e=CONSTANTS.API_BASE_URL+"/instruments";r.instruments=t(e)},r.instruments=[{name:"Lead-guitar",id:1},{name:"Drum",id:2},{name:"Bass",id:3},{name:"Keys",id:4}]}]),app.service("soloService",["$http",function(e){function t(t,r){return r?"":r={},e.get(t,r)}var r=this;r.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/tracks";return t(e)},r.getTrackById=function(e){var r=CONSTANTS.API_BASE_URL+"/tracks/"+e;return t(r)}}]),app.service("userService",["$http",function(e){var t=this;t.getUser=function(){return e.get(CONSTANTS.API_BASE_URL+"/user")},t.updateUser=function(t){return e.post(CONSTANTS.API_BASE_URL+"/user",t)}}]),app.directive("dcbLogin",["userService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-login/dcb-login.html",replace:!0,scope:{},controllerAs:"login",controller:["$auth","$rootScope",function(t,r){var n=this,o=e,a=document.getElementById("login-spinner"),i={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};n.login=function(){var e=new Spinner(i).spin(a);n.loading=!0;var l={email:n.email,password:n.password};t.login(l).then(function(t){e.stop(),n.loading=!1,$("#login_modal").modal(),$("#login_modal").modal("close"),o.getUser().then(function(e){r.username=e.data.username,r.email=e.data.email})},function(t){e.stop(),n.loading=!1,console.log(t)})}}]}}]),app.directive("dcbRegister",["userService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-register/dcb-register.html",replace:!0,scope:{},controllerAs:"register",controller:["$auth","$rootScope",function(t,r){var n=this,o=e,a=document.getElementById("register-spinner"),i={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};n.register=function(){var e=new Spinner(i).spin(a);n.loading=!0;var l={username:n.username,email:n.email,password:n.password};t.signup(l).then(function(a){t.login(l).then(function(t){e.stop(),n.loading=!1,$("#register_modal").modal(),$("#register_modal").modal("close"),o.getUser().then(function(e){r.username=e.data.username})},function(t){e.stop(),n.loading=!1,console.log(t)})})["catch"](function(t){e.stop(),n.loading=!1,console.log(t)})}}]}}]),app.directive("dcbHeader",function(){return{restrict:"E",templateUrl:"app/directives/dcb-header/dcb-header.html",replace:!0,scope:{},controllerAs:"head",controller:["userService","$auth","$rootScope",function(e,t,r){function n(){t.isAuthenticated()&&a.getUser().then(function(e){r.username=e.data.username}),o.value="This is a directive test value!"}var o=this,a=e;o.showLogin=function(){$("#login_modal").modal(),$("#login_modal").modal("open")},o.logout=function(){t.logout()},o.showRegister=function(){$("#register_modal").modal(),$("#register_modal").modal("open")},o.isAuthenticated=function(){return t.isAuthenticated()},n()}]}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
