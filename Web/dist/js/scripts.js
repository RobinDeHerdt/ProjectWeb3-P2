var app=angular.module("app",["ui.router","satellizer","ngCookies"]),CONSTANTS=function(){var e={};return e.API_BASE_URL="http://discoverbandapi.int/public/api",e}();app.config(["$stateProvider","$urlRouterProvider","$authProvider",function(e,r,t){t.loginUrl=CONSTANTS.API_BASE_URL+"/login",t.signupUrl=CONSTANTS.API_BASE_URL+"/register",r.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/pages/home.html",controller:"homeController as home"}).state("solo",{url:"/solo",templateUrl:"app/pages/solo.html",controller:"soloController as solo"}).state("merged",{url:"/merged",templateUrl:"app/pages/merged.html",controller:"mergedController as merged"}).state("band",{url:"/band",templateUrl:"app/pages/band.html",controller:"bandController as band"}).state("merge",{url:"/merge",templateUrl:"app/pages/merge.html",controller:"mergeController as merge"}).state("profile",{url:"/profile",templateUrl:"app/pages/profile.html",controller:"profileController as profile"})}]),app.controller("bandController",["bandService",function(e){function r(){t.gg=n.testValue}var t=this,n=e;r()}]),app.controller("homeController",["instrumentService","filterService",function(e,r){function t(){n.filterData=o.filterData}var n=this,o=r;t()}]),app.controller("mergeController",function(){function e(){}e()}),app.controller("mergedController",function(){function e(){r.test="Merged"}var r=this;e()}),app.controller("profileController",["userService",function(e){function r(){n.getUser().then(function(e){t.username=e.data.username,t.email=e.data.email})}var t=this,n=e,o=document.getElementById("update-profile-spinner"),a={lines:13,length:28,width:12,radius:42,scale:.15,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"89%",left:"25.5%",shadow:!1,hwaccel:!1,position:"absolute"};t.update=function(){var e=new Spinner(a).spin(o);t.loading=!0;var r={username:t.username,email:t.email};n.updateUser(r).then(function(r){e.stop(),t.loading=!1},function(r){e.stop(),t.loading=!1})},r()}]),app.controller("soloController",["$scope","bandService","soloService","instrumentService","filterService",function(e,r,t,n,o){function a(){d.getTracks().then(function(e){s.soloTracks=e.data,s.filteredTracks=s.soloTracks,i(),angular.forEach(s.soloTracks,function(e,r){newTrack=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),s.soloTrackAudio[e.id]=newTrack})},function(e){console.log(e)})}function i(){s.filteredTracks=[],angular.forEach(s.soloTracks,function(e,r){goodSearch=!0,""!=!s.filterData.artist||e.artist.name.match(new RegExp(s.filterData.artist,"i"))||(goodSearch=!1),""!=!s.filterData.title||e.songname.match(new RegExp(s.filterData.title,"i"))||(goodSearch=!1),s.filterData[e.instrument_id]||(goodSearch=!1),goodSearch&&s.filteredTracks.push(e)})}function c(e,r,t){for(var n=0,o=e.length;n<o;n++)if(e[n][t]===r)return n;return-1}function l(){s.soloTrackAudio=[],s.currentAudioTrackId="",a(),s.instruments=p.instruments,s.filterData=g.filterData,s.bandTrackIdArray=[],angular.forEach(u.trackArray,function(e,r){s.bandTrackIdArray.push(e.id)})}var s=this,u=r,d=t,p=n,g=o;s.addToBand=function(e){s.bandTrackIdArray=[],u.trackArray.push(e),u.trackArrayCount++,angular.forEach(u.trackArray,function(e,r){s.bandTrackIdArray.push(e.id)}),console.log("Track added to new band: "+e)},s.removeFromBand=function(e){index=c(u.trackArray,e.id,"id"),index>-1&&(u.trackArray.splice(index,1),u.trackArrayCount--,s.bandTrackArray=u.trackArray,intIndex=s.bandTrackIdArray.indexOf(e.id),intIndex>-1&&s.bandTrackIdArray.splice(intIndex,1)),console.log("Track removed from new band: "+e)},s.play=function(e){""!=s.currentAudioTrackId&&s.pause(s.currentAudioTrackId),s.currentAudioTrackId=e,s.soloTrackAudio[e].play()},s.pause=function(e){s.soloTrackAudio[e].pause(),s.currentAudioTrackId=""},e.$watch(function(){return s.filterData},function(){s.filterData&&i()},!0),s.track1=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),s.track2=new Audio("dist/audio/Behemoth - Conquer All - Guitar.mp3"),l()}]),app.filter("band",function(){return function(e,r){var t=!1;return angular.forEach(r,function(r,n){r==e&&(t=!0)}),t}}),app.service("authService",["$auth","$rootScope","$cookies","$state","userService",function(e,r,t,n,o){function a(e,n,o,a){var c=new Date;c=c.setTime(c.getTime()+1e3*e.expires_in),c=new Date(c);var l={token:e,userId:n,username:o,email:a};i.user=l,t.putObject("user",l,{expires:c}),r.isLoggedIn=!0,"1"==l.isAdmin?r.isAdmin=!0:r.isAdmin=!1}var i=this,c=o;i.isLoggedIn=null,i.login=function(r){e.login(r).then(function(e){token=e.data.token,id=0,username="",email="",c.getUser().then(function(e){id=e.data.id,username=e.data.username,email=e.data.email,a(token,id,username,email),i.isLoggedIn=!0},function(e){console.log(e),i.isLoggedIn=!1})},function(e){console.log(e),i.isLoggedIn=!1})},i.logout=function(){e.logout().then(function(e){r.isLoggedIn=!1,r.isAdmin=!1,i.user=null,i.isLoggedIn=null,t.remove("user"),n.go("home")},function(e){console.log(e)})},i.register=function(e){var r=CONSTANTS.API_BASE_URL+"/user";return $http.post(r,e)}}]),app.service("bandService",function(){var e=this;e.testValue="This value is from a service!",e.trackArray=[],e.trackArrayCount=0,e.testFunction=function(){alert("Test function called from inside service!")}}),app.service("filterService",["instrumentService",function(e){function r(){t.createFilterData()}var t=this,n=e;t.createFilterData=function(){t.filterData={artist:"",title:""},angular.forEach(n.instruments,function(e,r){t.filterData[e.id]=!0})},r()}]),app.service("instrumentService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getInstruments=function(){var e=CONSTANTS.API_BASE_URL+"/instruments";t.instruments=r(e)},t.instruments=[{name:"Lead-guitar",id:1},{name:"Drum",id:2},{name:"Bass",id:3},{name:"Keys",id:4}]}]),app.service("soloService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/tracks";return r(e)},t.getTrackById=function(e){var t=CONSTANTS.API_BASE_URL+"/tracks/"+e;return r(t)}}]),app.service("userService",["$http",function(e){var r=this;r.getUser=function(){return e.get(CONSTANTS.API_BASE_URL+"/user")},r.updateUser=function(r){return e.post(CONSTANTS.API_BASE_URL+"/user",r)}}]),app.directive("dcbBand",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-band/dcb-band.html",replace:!0,scope:{},controllerAs:"band",controller:function(){function e(){r.value="NewBand"}var r=this;e()}}}]),app.directive("dcbHeader",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-header/dcb-header.html",replace:!0,scope:{},controllerAs:"head",controller:["$scope","userService","authService","$auth","$rootScope",function(r,t,n,o,a){function i(){c.trackArray=u.trackArray,c.trackArrayCount=u.trackArrayCount,o.isAuthenticated()&&l.getUser().then(function(e){a.username=e.data.username})}var c=this,l=t,s=n,u=e;c.showLogin=function(){$("#login_modal").modal(),$("#login_modal").modal("open")},c.logout=function(){s.logout()},c.showRegister=function(){$("#register_modal").modal(),$("#register_modal").modal("open")},c.isAuthenticated=function(){return o.isAuthenticated()},i(),r.$watch(function(){return s.user},function(){c.user=s.user})}]}}]),app.directive("dcbLogin",function(){return{restrict:"E",templateUrl:"app/directives/dcb-login/dcb-login.html",replace:!0,scope:{},controllerAs:"login",controller:["$auth","$scope","$rootScope","userService","authService","$cookies",function(e,r,t,n,o,a){var i=this,c=o,l=document.getElementById("login-spinner"),s={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};i.login=function(){var e=new Spinner(s).spin(l);i.loading=!0;var t={email:i.email,password:i.password};c.login(t);var n=r.$watch(function(){return c.isLoggedIn},function(){c.isLoggedIn&&(i.loading=!1,$("#login_modal").modal(),$("#login_modal").modal("close"),e.stop(),n()),c.isLoggedIn===!1&&(e.stop(),i.loading=!1,n())},!0)}}]}}),app.directive("dcbRegister",["userService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-register/dcb-register.html",replace:!0,scope:{},controllerAs:"register",controller:["$auth","$scope","$rootScope","userService","authService",function(e,r,t,n,o){var a=this,i=o,c=document.getElementById("register-spinner"),l={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};a.register=function(){var t=new Spinner(l).spin(c);a.loading=!0;var n={username:a.username,email:a.email,password:a.password};e.signup(n).then(function(e){i.login(n);var o=r.$watch(function(){return i.isLoggedIn},function(){i.isLoggedIn&&(a.loading=!1,$("#register_modal").modal(),$("#register_modal").modal("close"),t.stop(),o()),i.isLoggedIn===!1&&(t.stop(),a.loading=!1,o())},!0)})["catch"](function(e){t.stop(),a.loading=!1,console.log(e)})}}]}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
