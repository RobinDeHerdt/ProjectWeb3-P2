var app=angular.module("app",["ui.router"]),CONSTANTS=function(){var e={};return e.API_BASE_URL="http://discoverbandapi.int/public/api",e}();app.config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/pages/home.html",controller:"homeController as home"}).state("solo",{url:"/solo",templateUrl:"app/pages/solo.html",controller:"soloController as solo"}).state("merged",{url:"/merged",templateUrl:"app/pages/merged.html",controller:"mergedController as merged"}).state("band",{url:"/band",templateUrl:"app/pages/band.html",controller:"bandController as band"}).state("merge",{url:"/merge",templateUrl:"app/pages/merge.html",controller:"mergeController as merge"})}]),app.controller("bandController",["bandService",function(e){function t(){r.gg=a.testValue}var r=this,a=e;t()}]),app.controller("homeController",["instrumentService","filterService",function(e,t){function r(){a.filterData=n.filterData}var a=this,n=t;r()}]),app.controller("mergeController",function(){function e(){}e()}),app.controller("mergedController",function(){function e(){t.test="Merged"}var t=this;e()}),app.controller("soloController",["$scope","bandService","soloService","instrumentService","filterService",function(e,t,r,a,n){function o(){u.getTracks().then(function(e){c.soloTracks=e.data,c.filteredTracks=c.soloTracks,i()},function(e){console.log(e)})}function i(){c.filteredTracks=[],angular.forEach(c.soloTracks,function(e,t){goodSearch=!0,""!=!c.filterData.artist||e.artist.name.match(new RegExp(c.filterData.artist,"i"))||(goodSearch=!1),""!=!c.filterData.title||e.songname.match(new RegExp(c.filterData.title,"i"))||(goodSearch=!1),c.filterData[e.instrument_id]||(goodSearch=!1),goodSearch&&c.filteredTracks.push(e)})}function l(){o(),c.instruments=p.instruments,c.filterData=d.filterData}var c=this,s=t,u=r,p=a,d=n;c.addToBand=function(e){s.trackArray.push(e)},e.$watch(function(){return c.filterData},function(){c.filterData&&i()},!0),c.track1=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),c.track2=new Audio("dist/audio/Behemoth - Conquer All - Guitar.mp3"),l()}]),app.service("bandService",function(){var e=this;e.testValue="This value is from a service!",e.trackArray=[],e.testFunction=function(){alert("Test function called from inside service!")}}),app.service("filterService",["instrumentService",function(e){function t(){r.createFilterData(),console.log(r.filterData)}var r=this,a=e;r.createFilterData=function(){r.filterData={artist:"",title:""},angular.forEach(a.instruments,function(e,t){r.filterData[e.id]=!0})},t()}]),app.service("instrumentService",["$http",function(e){function t(t,r){return r?"":r={},e.get(t,r)}var r=this;r.getInstruments=function(){var e=CONSTANTS.API_BASE_URL+"/instruments";r.instruments=t(e)},r.instruments=[{name:"Lead-guitar",id:1},{name:"Drum",id:2},{name:"Bass",id:3},{name:"Keys",id:4}]}]),app.service("soloService",["$http",function(e){function t(t,r){return r?"":r={},e.get(t,r)}var r=this;r.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/tracks";return t(e)},r.getTrackById=function(e){var r=CONSTANTS.API_BASE_URL+"/tracks/"+e;return t(r)}}]),app.directive("dcbBand",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-band/dcb-band.html",replace:!0,scope:{},controllerAs:"band",controller:function(){function e(){t.value="NewBand"}var t=this;e()}}}]),app.directive("dcbHeader",function(){return{restrict:"E",templateUrl:"app/directives/dcb-header/dcb-header.html",replace:!0,scope:{},controllerAs:"head",controller:function(){function e(){t.value="This is a directive test value!"}var t=this;e()}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
