var app=angular.module("app",["ui.router"]),CONSTANTS=function(){var r={};return r.API_BASE_URL="http://discoverbandapi.int/public/api",r}();app.config(["$stateProvider","$urlRouterProvider",function(r,e){e.otherwise("/"),r.state("home",{url:"/",templateUrl:"app/pages/home.html",controller:"homeController as home"}).state("solo",{url:"/solo",templateUrl:"app/pages/solo.html",controller:"soloController as solo"}).state("merged",{url:"/merged",templateUrl:"app/pages/merged.html",controller:"mergedController as merged"}).state("band",{url:"/band",templateUrl:"app/pages/band.html",controller:"bandController as band"}).state("merge",{url:"/merge",templateUrl:"app/pages/merge.html",controller:"mergeController as merge"})}]),app.controller("bandController",["bandService",function(r){function e(){t.gg=a.testValue}var t=this,a=r;e()}]),app.controller("homeController",["instrumentService","filterService",function(r,e){function t(){a.filterData=n.filterData}var a=this,n=e;t()}]),app.controller("mergeController",function(){function r(){}r()}),app.controller("mergedController",function(){function r(){e.test="Merged"}var e=this;r()}),app.controller("soloController",["$scope","bandService","soloService","instrumentService","filterService",function(r,e,t,a,n){function o(){d.getTracks().then(function(r){s.soloTracks=r.data,s.filteredTracks=s.soloTracks,i()},function(r){console.log(r)})}function i(){s.filteredTracks=[],angular.forEach(s.soloTracks,function(r,e){goodSearch=!0,""!=!s.filterData.artist||r.artist.name.match(new RegExp(s.filterData.artist,"i"))||(goodSearch=!1),""!=!s.filterData.title||r.songname.match(new RegExp(s.filterData.title,"i"))||(goodSearch=!1),s.filterData[r.instrument_id]||(goodSearch=!1),goodSearch&&s.filteredTracks.push(r)})}function c(r,e,t){for(var a=0,n=r.length;a<n;a++)if(r[a][t]===e)return a;return-1}function l(){o(),s.instruments=f.instruments,s.filterData=p.filterData,s.bandTrackIdArray=[],angular.forEach(u.trackArray,function(r,e){s.bandTrackIdArray.push(r.id)})}var s=this,u=e,d=t,f=a,p=n;s.addToBand=function(r){u.trackArray.push(r),angular.forEach(u.trackArray,function(r,e){s.bandTrackIdArray.push(r.id)}),console.log("Track added to new band: "+r),console.log(u.trackArray)},s.removeFromBand=function(r){index=c(u.trackArray,r.id,"id"),index>-1&&(u.trackArray.splice(index,1),s.bandTrackArray=u.trackArray,intIndex=s.bandTrackIdArray.indexOf(r.id),intIndex>-1&&s.bandTrackIdArray.splice(intIndex,1)),console.log("Track removed from new band: "+r),console.log(u.trackArray)},r.$watch(function(){return s.filterData},function(){s.filterData&&i()},!0),s.track1=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),s.track2=new Audio("dist/audio/Behemoth - Conquer All - Guitar.mp3"),l()}]),app.filter("band",function(){return function(r,e){var t=!1;return angular.forEach(e,function(e,a){e==r&&(t=!0)}),t}}),app.service("bandService",function(){var r=this;r.testValue="This value is from a service!",r.trackArray=[],r.testFunction=function(){alert("Test function called from inside service!")}}),app.service("filterService",["instrumentService",function(r){function e(){t.createFilterData()}var t=this,a=r;t.createFilterData=function(){t.filterData={artist:"",title:""},angular.forEach(a.instruments,function(r,e){t.filterData[r.id]=!0})},e()}]),app.service("instrumentService",["$http",function(r){function e(e,t){return t?"":t={},r.get(e,t)}var t=this;t.getInstruments=function(){var r=CONSTANTS.API_BASE_URL+"/instruments";t.instruments=e(r)},t.instruments=[{name:"Lead-guitar",id:1},{name:"Drum",id:2},{name:"Bass",id:3},{name:"Keys",id:4}]}]),app.service("soloService",["$http",function(r){function e(e,t){return t?"":t={},r.get(e,t)}var t=this;t.getTracks=function(){var r=CONSTANTS.API_BASE_URL+"/tracks";return e(r)},t.getTrackById=function(r){var t=CONSTANTS.API_BASE_URL+"/tracks/"+r;return e(t)}}]),app.directive("dcbHeader",function(){return{restrict:"E",templateUrl:"app/directives/dcb-header/dcb-header.html",replace:!0,scope:{},controllerAs:"head",controller:function(){function r(){e.value="This is a directive test value!"}var e=this;r()}}}),app.directive("dcbBand",["bandService",function(r){return{restrict:"E",templateUrl:"app/directives/dcb-band/dcb-band.html",replace:!0,scope:{},controllerAs:"band",controller:function(){function r(){e.value="NewBand"}var e=this;r()}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,