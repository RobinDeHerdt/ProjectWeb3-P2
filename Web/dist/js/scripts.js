var app=angular.module("app",["ui.router","satellizer","ngCookies","ngFileUpload"]),CONSTANTS=function(){var e={};return e.API_BASE_URL="http://discoverbandapi.int/public/api",e}();app.config(["$stateProvider","$urlRouterProvider","$authProvider",function(e,r,t){t.loginUrl=CONSTANTS.API_BASE_URL+"/login",t.signupUrl=CONSTANTS.API_BASE_URL+"/register",r.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/pages/home.html",controller:"homeController as home"}).state("solo",{url:"/solo",templateUrl:"app/pages/solo.html",controller:"soloController as solo"}).state("merged",{url:"/merged",templateUrl:"app/pages/merged.html",controller:"mergedController as merged"}).state("band",{url:"/band",templateUrl:"app/pages/band.html",controller:"bandController as band"}).state("merge",{url:"/merge",templateUrl:"app/pages/merge.html",controller:"mergeController as merge"}).state("profile",{url:"/profile",templateUrl:"app/pages/profile.html",controller:"profileController as profile"}).state("upload",{url:"/upload",templateUrl:"app/pages/upload.html",controller:"uploadController as upload"})}]),app.controller("bandController",["bandService",function(e){function r(){t.trackArray=n.getTrackArray}var t=this,n=e;r()}]),app.controller("homeController",["instrumentService","filterService",function(e,r){function t(){n.filterData=a.soloFilterData}var n=this,a=r;t()}]),app.controller("mergeController",["bandService",function(e){function r(){t.tracks=n.getTrackArray(),t.thereAreTracks=!1,t.loadedTracks=[],t.tracks.length>0&&(t.thereAreTracks=!0)}var t=this,n=e,a=[];t.load=function(){if(t.thereAreTracks)for(var e=t.tracks.length-1;e>=0;e--)document.getElementById(t.tracks[e].id).checked&&(a[e]=WaveSurfer.create({container:"#waveform"+e,waveColor:"green",progressColor:"purple"}),a[e].load("http://discoverbandapi.int/public/api/audio/"+t.tracks[e].file_url),t.loadedTracks.push(e))},t.playAll=function(){for(var e=t.loadedTracks.length-1;e>=0;e--){var r=t.loadedTracks[e];a[r].play()}},t.save=function(){},r()}]),app.controller("mergedController",["$scope","mergedService","filterService",function(e,r,t){function n(){r.getTracks().then(function(e){i.mergedTracks=e.data,i.filteredTracks=i.mergedTracks,a(),angular.forEach(i.mergedTracks,function(e,r){newTrack=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),i.mergedTrackAudio[e.id]=newTrack})},function(e){console.log(e)})}function a(){i.filteredTracks=[],angular.forEach(i.mergedTracks,function(e,r){goodSearch=!0,""!=!i.filterData.artist||e.artist.name.match(new RegExp(i.filterData.artist,"i"))||(goodSearch=!1),""!=!i.filterData.title||e.songname.match(new RegExp(i.filterData.title,"i"))||(goodSearch=!1),goodSearch&&i.filteredTracks.push(e)})}function o(){i.mergedTrackAudio=[],i.currentAudioTrackId="",n(),i.filterData=c.mergedFilterData}var i=this,c=t;i.play=function(e){""!=i.currentAudioTrackId&&i.pause(i.currentAudioTrackId),i.currentAudioTrackId=e,i.mergedTrackAudio[e].play()},i.pause=function(e){i.mergedTrackAudio[e].pause(),i.currentAudioTrackId=""},e.$watch(function(){return i.filterData},function(){i.filterData&&a()},!0),i.track1=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),i.track2=new Audio("dist/audio/Behemoth - Conquer All - Guitar.mp3"),o()}]),app.controller("profileController",["userService",function(e){function r(){n.getUser().then(function(e){t.username=e.data.username,t.email=e.data.email})}var t=this,n=e,a=document.getElementById("update-profile-spinner"),o={lines:13,length:28,width:12,radius:42,scale:.15,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"89%",left:"25.5%",shadow:!1,hwaccel:!1,position:"absolute"};t.update=function(){var e=new Spinner(o).spin(a);t.loading=!0;var r={username:t.username,email:t.email};n.updateUser(r).then(function(r){e.stop(),t.loading=!1},function(r){e.stop(),t.loading=!1})},r()}]),app.controller("soloController",["$scope","bandService","soloService","instrumentService","filterService",function(e,r,t,n,a){function o(){u.getTracks().then(function(e){l.soloTracks=e.data,l.filteredTracks=l.soloTracks,i(),angular.forEach(l.soloTracks,function(e,r){newTrack=new Audio("http://discoverbandapi.int/public/audio/"+e.file_url),l.soloTrackAudio[e.id]=newTrack})},function(e){console.log(e)})}function i(){l.filteredTracks=[],angular.forEach(l.soloTracks,function(e,r){goodSearch=!0,""!=!l.filterData.artist||e.artist.name.match(new RegExp(l.filterData.artist,"i"))||(goodSearch=!1),""!=!l.filterData.title||e.songname.match(new RegExp(l.filterData.title,"i"))||(goodSearch=!1),l.filterData[e.instrument_id]||(goodSearch=!1),goodSearch&&l.filteredTracks.push(e)})}function c(){l.soloTrackAudio=[],l.currentAudioTrackId="",o(),l.instruments=d.instruments,l.filterData=p.soloFilterData,l.trackArray=s.getTrackArray,l.bandTrackIdArray=s.getTrackIdArray,l.trackArrayCount=s.getTrackArrayCount}var l=this,s=r,u=t,d=n,p=a;l.addToBand=function(e){s.addToTrackArray(e),console.log(e)},l.removeFromBand=function(e){s.removeFromTrackArray(e),console.log("Track removed from new band: "+e)},l.play=function(e){""!=l.currentAudioTrackId&&l.pause(l.currentAudioTrackId),l.currentAudioTrackId=e,l.soloTrackAudio[e].play()},l.pause=function(e){l.soloTrackAudio[e].pause(),l.currentAudioTrackId=""},e.$watch(function(){return l.filterData},function(){l.filterData&&i()},!0),c()}]),app.controller("uploadController",["Upload","artistService","instrumentService","soloService",function(e,r,t,n){function a(){i.uploaded=!1,i.showform=!1,i.instruments=s.getInstruments().then(function(e){i.instruments=e.data,console.log(e.data)},function(e){console.log(e)}),i.artists=l.getArtists().then(function(e){console.log(e.data),i.artists=e.data},function(e){console.log(e)})}function o(e){for(var r=e+"=",t=decodeURIComponent(document.cookie),n=t.split(";"),a=0;a<n.length;a++){for(var o=n[a];" "==o.charAt(0);)o=o.substring(1);if(0==o.indexOf(r))return o.substring(r.length,o.length)}return""}var i=this,c=n,l=r,s=t,u=document.getElementById("upload-spinner"),d={lines:13,length:28,width:12,radius:42,scale:.3,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"40%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};i.uploadFile=function(r){var t=new Spinner(d).spin(u);i.loading=!0,i.uploaded=!1,e.upload({url:CONSTANTS.API_BASE_URL+"/upload",fileFormDataName:"song",sendFieldsAs:"form",data:{song:r}}).then(function(e){i.filename=e.data.name,i.tracklength=e.data.length,t.stop(),i.loading=!1,i.uploaded=!0,i.showform=!0,$("select").material_select()},function(e){i.loading=!1,t.stop(),console.log("Error")})},i.save=function(){var e=JSON.parse(o("user")).userId,r={name:i.songname,file_url:i.filename,track_length:i.tracklength,user_id:e,instrument_id:i.instrumentsdropdown,artist_id:i.artistsdropdown};c.insertTrack(r).then(function(e){console.log(e)},function(e){console.log(e)})},a()}]),app.filter("band",function(){return function(e,r){var t=!1;return angular.forEach(r,function(r,n){r==e&&(t=!0)}),t}}),app.service("artistService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getArtists=function(){var e=CONSTANTS.API_BASE_URL+"/artists";return r(e)}}]),app.service("authService",["$auth","$rootScope","$cookies","$state","userService",function(e,r,t,n,a){function o(e,n,a,o){var c=new Date;c=c.setTime(c.getTime()+1e3*e.expires_in),c=new Date(c);var l={token:e,userId:n,username:a,email:o};i.user=l,t.putObject("user",l,{expires:c}),r.isLoggedIn=!0,"1"==l.isAdmin?r.isAdmin=!0:r.isAdmin=!1}var i=this,c=a;i.isLoggedIn=null,i.login=function(r){e.login(r).then(function(e){token=e.data.token,id=0,username="",email="",c.getUser().then(function(e){id=e.data.id,username=e.data.username,email=e.data.email,o(token,id,username,email),i.isLoggedIn=!0},function(e){console.log(e),i.isLoggedIn=!1})},function(e){console.log(e),i.isLoggedIn=!1})},i.logout=function(){e.logout().then(function(e){r.isLoggedIn=!1,r.isAdmin=!1,i.user=null,i.isLoggedIn=null,t.remove("user"),n.go("home")},function(e){console.log(e)})},i.register=function(e){var r=CONSTANTS.API_BASE_URL+"/user";return $http.post(r,e)}}]),app.service("bandService",function(){function e(){return trackArrayCount++,trackArrayCount}function r(){return trackArrayCount--,trackArrayCount}function t(e){return trackIdArray.push(e),trackIdArray}function n(e){return index=trackIdArray.indexOf(e),index>-1&&trackIdArray.splice(index,1),trackIdArray}var a=this;trackArray=[],trackIdArray=[],trackArrayCount=0,a.getTrackArrayCount=function(){return trackArrayCount},a.getTrackIdArray=function(){return trackIdArray},a.addToTrackArray=function(r){return trackArray.push(r),e(),t(r.id),trackArray},a.removeFromTrackArray=function(e){return index=e.arrayObjectIndexOf(trackArray,e.id,"id"),index>-1&&trackArray.splice(index,1),r(),n(e.id),trackArray},a.getTrackArray=function(){return trackArray},a.testFunction=function(){alert("Test function called from inside service!")}}),app.service("filterService",["instrumentService",function(e){function r(){t.createSoloFilterData(),t.createMergedFilterData()}var t=this,n=e;t.createSoloFilterData=function(){t.soloFilterData={artist:"",title:""},angular.forEach(n.instruments,function(e,r){t.soloFilterData[e.id]=!0})},t.createMergedFilterData=function(){t.mergedFilterData={artist:"",title:""}},r()}]),app.service("instrumentService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getInstruments=function(){var e=CONSTANTS.API_BASE_URL+"/instruments";return r(e)},t.instruments=[{name:"Lead-guitar",id:1},{name:"Drum",id:2},{name:"Bass",id:3},{name:"Keys",id:4}]}]),app.service("mergedService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/mergedtracks";return r(e)},t.getTrackById=function(e){var t=CONSTANTS.API_BASE_URL+"/mergedtracks/"+e;return r(t)}}]),app.service("soloService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/tracks";return r(e)},t.getTrackById=function(e){var t=CONSTANTS.API_BASE_URL+"/tracks/"+e;return r(t)},t.insertTrack=function(r){return e.post(CONSTANTS.API_BASE_URL+"/tracks/create",r)}}]),app.service("userService",["$http",function(e){var r=this;r.getUser=function(){return e.get(CONSTANTS.API_BASE_URL+"/user")},r.updateUser=function(r){return e.post(CONSTANTS.API_BASE_URL+"/user",r)}}]),app.directive("dcbBand",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-band/dcb-band.html",replace:!0,scope:{},controllerAs:"band",controller:function(){function e(){r.value="NewBand"}var r=this;e()}}}]),app.directive("dcbHeader",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-header/dcb-header.html",replace:!0,scope:{},controllerAs:"head",controller:["$scope","userService","authService","$auth","$rootScope",function(r,t,n,a,o){function i(){c.trackArray=u.getTrackArray,c.trackArrayCount=u.getTrackArrayCount,a.isAuthenticated()&&l.getUser().then(function(e){o.username=e.data.username})}var c=this,l=t,s=n,u=e;c.showLogin=function(){$("#login_modal").modal(),$("#login_modal").modal("open")},c.logout=function(){s.logout()},c.showRegister=function(){$("#register_modal").modal(),$("#register_modal").modal("open")},c.isAuthenticated=function(){return a.isAuthenticated()},i(),r.$watch(function(){return s.user},function(){c.user=s.user})}]}}]),app.directive("dcbLogin",function(){return{restrict:"E",templateUrl:"app/directives/dcb-login/dcb-login.html",replace:!0,scope:{},controllerAs:"login",controller:["$auth","$scope","$rootScope","userService","authService","$cookies",function(e,r,t,n,a,o){var i=this,c=a,l=document.getElementById("login-spinner"),s={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};i.login=function(){var e=new Spinner(s).spin(l);i.loading=!0;var t={email:i.email,password:i.password};c.login(t);var n=r.$watch(function(){return c.isLoggedIn},function(){c.isLoggedIn&&(i.loading=!1,$("#login_modal").modal(),$("#login_modal").modal("close"),e.stop(),n()),c.isLoggedIn===!1&&(e.stop(),i.loading=!1,n())},!0)}}]}}),app.directive("dcbRegister",["userService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-register/dcb-register.html",replace:!0,scope:{},controllerAs:"register",controller:["$auth","$scope","$rootScope","userService","authService",function(e,r,t,n,a){var o=this,i=a,c=document.getElementById("register-spinner"),l={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};o.register=function(){var t=new Spinner(l).spin(c);o.loading=!0;var n={username:o.username,email:o.email,password:o.password};e.signup(n).then(function(e){i.login(n);var a=r.$watch(function(){return i.isLoggedIn},function(){i.isLoggedIn&&(o.loading=!1,$("#register_modal").modal(),$("#register_modal").modal("close"),t.stop(),a()),i.isLoggedIn===!1&&(t.stop(),o.loading=!1,a())},!0)})["catch"](function(e){t.stop(),o.loading=!1,console.log(e)})}}]}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbmZpZy5qcyIsInJvdXRlcy5qcyIsImJhbmRDb250cm9sbGVyLmpzIiwiaG9tZUNvbnRyb2xsZXIuanMiLCJtZXJnZUNvbnRyb2xsZXIuanMiLCJtZXJnZWRDb250cm9sbGVyLmpzIiwicHJvZmlsZUNvbnRyb2xsZXIuanMiLCJzb2xvQ29udHJvbGxlci5qcyIsInVwbG9hZENvbnRyb2xsZXIuanMiLCJiYW5kRmlsdGVyLmpzIiwiYXJ0aXN0U2VydmljZS5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiYmFuZFNlcnZpY2UuanMiLCJmaWx0ZXJTZXJ2aWNlLmpzIiwiaW5zdHJ1bWVudFNlcnZpY2UuanMiLCJtZXJnZWRTZXJ2aWNlLmpzIiwic29sb1NlcnZpY2UuanMiLCJ1c2VyU2VydmljZS5qcyIsImRjYi1iYW5kL2RjYi1iYW5kLmpzIiwiZGNiLWhlYWRlci9kY2ItaGVhZGVyLmpzIiwiZGNiLWxvZ2luL2RjYi1sb2dpbi5qcyIsImRjYi1yZWdpc3Rlci9kY2ItcmVnaXN0ZXIuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsIkNPTlNUQU5UUyIsIkFQSV9CQVNFX1VSTCIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGF1dGhQcm92aWRlciIsImxvZ2luVXJsIiwic2lnbnVwVXJsIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJiYW5kU2VydmljZSIsIl9pbml0Iiwidm0iLCJ0cmFja0FycmF5IiwiYmFuZFN2YyIsImdldFRyYWNrQXJyYXkiLCJ0aGlzIiwiaW5zdHJ1bWVudFNlcnZpY2UiLCJmaWx0ZXJTZXJ2aWNlIiwiZmlsdGVyRGF0YSIsImZsdFN2YyIsInNvbG9GaWx0ZXJEYXRhIiwidHJhY2tzIiwidGhlcmVBcmVUcmFja3MiLCJsb2FkZWRUcmFja3MiLCJsZW5ndGgiLCJ3YXZlc3VyZmVyIiwibG9hZCIsImkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJjaGVja2VkIiwiV2F2ZVN1cmZlciIsImNyZWF0ZSIsImNvbnRhaW5lciIsIndhdmVDb2xvciIsInByb2dyZXNzQ29sb3IiLCJmaWxlX3VybCIsInB1c2giLCJwbGF5QWxsIiwiaW5kZXgiLCJwbGF5Iiwic2F2ZSIsIiRzY29wZSIsIm1lcmdlZFNlcnZpY2UiLCJnZXRNZXJnZWRUcmFja3MiLCJnZXRUcmFja3MiLCJ0aGVuIiwiZGF0YSIsIm1lcmdlZFRyYWNrcyIsImZpbHRlcmVkVHJhY2tzIiwiZmlsdGVyIiwiZm9yRWFjaCIsInRyYWNrIiwia2V5IiwibmV3VHJhY2siLCJBdWRpbyIsIm1lcmdlZFRyYWNrQXVkaW8iLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJnb29kU2VhcmNoIiwiYXJ0aXN0IiwibmFtZSIsIm1hdGNoIiwiUmVnRXhwIiwidGl0bGUiLCJzb25nbmFtZSIsImN1cnJlbnRBdWRpb1RyYWNrSWQiLCJtZXJnZWRGaWx0ZXJEYXRhIiwidHJhY2tJZCIsInBhdXNlIiwiJHdhdGNoIiwidHJhY2sxIiwidHJhY2syIiwidXNlclNlcnZpY2UiLCJ1c2VyU3ZjIiwiZ2V0VXNlciIsInVzZXJuYW1lIiwiZW1haWwiLCJ0YXJnZXQiLCJvcHRzIiwibGluZXMiLCJ3aWR0aCIsInJhZGl1cyIsInNjYWxlIiwiY29ybmVycyIsImNvbG9yIiwib3BhY2l0eSIsInJvdGF0ZSIsImRpcmVjdGlvbiIsInNwZWVkIiwidHJhaWwiLCJmcHMiLCJ6SW5kZXgiLCJjbGFzc05hbWUiLCJ0b3AiLCJsZWZ0Iiwic2hhZG93IiwiaHdhY2NlbCIsInBvc2l0aW9uIiwidXBkYXRlIiwic3Bpbm5lciIsIlNwaW5uZXIiLCJzcGluIiwibG9hZGluZyIsInVzZXJpbmZvIiwidXBkYXRlVXNlciIsInN0b3AiLCJzb2xvU2VydmljZSIsImdldFNvbG9UcmFja3MiLCJzb2xvU3ZjIiwic29sb1RyYWNrcyIsInNvbG9UcmFja0F1ZGlvIiwiaW5zdHJ1bWVudF9pZCIsImluc3RydW1lbnRzIiwiaW5zdFN2YyIsImJhbmRUcmFja0lkQXJyYXkiLCJnZXRUcmFja0lkQXJyYXkiLCJ0cmFja0FycmF5Q291bnQiLCJnZXRUcmFja0FycmF5Q291bnQiLCJhZGRUb0JhbmQiLCJhZGRUb1RyYWNrQXJyYXkiLCJyZW1vdmVGcm9tQmFuZCIsInJlbW92ZUZyb21UcmFja0FycmF5IiwiVXBsb2FkIiwiYXJ0aXN0U2VydmljZSIsInVwbG9hZGVkIiwic2hvd2Zvcm0iLCJpbnN0cnVtZW50U3ZjIiwiZ2V0SW5zdHJ1bWVudHMiLCJhcnRpc3RzIiwiYXJ0aXN0U3ZjIiwiZ2V0QXJ0aXN0cyIsImdldENvb2tpZSIsImNuYW1lIiwiZGVjb2RlZENvb2tpZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImNvb2tpZSIsImNhIiwic3BsaXQiLCJjIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwiaW5kZXhPZiIsInVwbG9hZEZpbGUiLCJmaWxlIiwidXBsb2FkIiwiZmlsZUZvcm1EYXRhTmFtZSIsInNlbmRGaWVsZHNBcyIsInNvbmciLCJyZXNwIiwiZmlsZW5hbWUiLCJ0cmFja2xlbmd0aCIsIiQiLCJtYXRlcmlhbF9zZWxlY3QiLCJ1c2VyX2lkIiwiSlNPTiIsInBhcnNlIiwidXNlcklkIiwidHJhY2tfbGVuZ3RoIiwiaW5zdHJ1bWVudHNkcm9wZG93biIsImFydGlzdF9pZCIsImFydGlzdHNkcm9wZG93biIsImluc2VydFRyYWNrIiwibGlzdCIsInJldHVyblZhbHVlIiwic2VydmljZSIsIiRodHRwIiwiZ2V0RGF0YSIsIm9wdGlvbnMiLCJnZXQiLCJzdmMiLCIkYXV0aCIsIiRyb290U2NvcGUiLCIkY29va2llcyIsIiRzdGF0ZSIsImxvZ2luIiwidG9rZW4iLCJleHBpcmF0aW9uVGltZSIsIkRhdGUiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInVzZXJEYXRhIiwidXNlciIsInB1dE9iamVjdCIsImV4cGlyZXMiLCJpc0xvZ2dlZEluIiwiaXNBZG1pbiIsImNyZWRlbnRpYWxzIiwibG9nb3V0IiwicmVtb3ZlIiwiZ28iLCJyZWdpc3RlciIsInBvc3QiLCJpbmNyZW1lbnRUcmFja0FycmF5Q291bnQiLCJkZWNyZW1lbnRUcmFja0FycmF5Q291bnQiLCJhZGRUb1RyYWNrSWRBcnJheSIsInRyYWNrSWRBcnJheSIsInJlbW92ZUZyb21UcmFja0lkQXJyYXkiLCJzcGxpY2UiLCJhcnJheU9iamVjdEluZGV4T2YiLCJ0ZXN0RnVuY3Rpb24iLCJhbGVydCIsImNyZWF0ZVNvbG9GaWx0ZXJEYXRhIiwiY3JlYXRlTWVyZ2VkRmlsdGVyRGF0YSIsInZhbHVlIiwiZ2V0VHJhY2tCeUlkIiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwic2NvcGUiLCJjb250cm9sbGVyQXMiLCJhdXRoU2VydmljZSIsImlzQXV0aGVudGljYXRlZCIsImF1dGhTdmMiLCJzaG93TG9naW4iLCJtb2RhbCIsInNob3dSZWdpc3RlciIsInBhc3N3b3JkIiwidW5yZWdpc3RlciIsInNpZ251cCIsInJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSxLQUFNQyxRQUFRQyxPQUFPLE9BQ3ZCLFlBQ0EsYUFDQSxZQUNBLGlCQ0pFQyxVQUFhLFdBRWhCLEdBQUlELEtBSUosT0FGQUEsR0FBT0UsYUFBZSx3Q0FFZkYsSUNOUkYsS0FBSUssUUFBQSxpQkFBQSxxQkFBQSxnQkFBTyxTQUFTQyxFQUFnQkMsRUFBb0JDLEdBQ3REQSxFQUFjQyxTQUFjTixVQUFVQyxhQUFlLFNBQ3JESSxFQUFjRSxVQUFjUCxVQUFVQyxhQUFlLFlBQ3JERyxFQUFtQkksVUFBVSxLQUU3QkwsRUFDR00sTUFBTSxRQUNMQyxJQUFLLElBQ0xDLFlBQWEsc0JBQ2JDLFdBQVksMkJBRWRILE1BQU0sUUFDSkMsSUFBSyxRQUNMQyxZQUFhLHNCQUNiQyxXQUFZLDJCQUViSCxNQUFNLFVBQ0xDLElBQUssVUFDTEMsWUFBYSx3QkFDYkMsV0FBWSwrQkFFYkgsTUFBTSxRQUNMQyxJQUFLLFFBQ0xDLFlBQWEsc0JBQ2JDLFdBQVksMkJBRWJILE1BQU0sU0FDTEMs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SUFDRDFHLFNBQVVuRSxFQUFHbUUsU0FDYkMsTUFBT3BFLEVBQUdvRSxNQUNWNEksU0FBVWhOLEVBQUdnTixTQUdoQjlDLEdBQU1nRCxPQUFPckMsR0FBTXpJLEtBQUssU0FBUytLLEdBRWhDUCxFQUFRdEMsTUFBTU8sRUFHZCxJQUFJb0MsR0FBYWpMLEVBQU82QixPQUN2QixXQUFjLE1BQU8rSSxHQUFRNUIsWUFDN0IsV0FFSTRCLEVBQVE1QixhQUVWaEwsRUFBRzhGLFNBQVUsRUFDUGlELEVBQUUsbUJBQW1CK0QsUUFDM0IvRCxFQUFFLG1CQUFtQitELE1BQU0sU0FDckJuSCxFQUFRTSxPQUNSZ0gsS0FFSkwsRUFBUTVCLGNBQWUsSUFFekJyRixFQUFRTSxPQUNGakcsRUFBRzhGLFNBQVUsRUFDYm1ILE9BRUwsS0F2QkwvQyxTQXlCTyxTQUFTaUQsR0FFYnhILEVBQVFNLE9BQ1JqRyxFQUFHOEYsU0FBVSxFQUNaOUMsUUFBUUMsSUFBSWtLIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoXCJhcHBcIiwgW1xyXG5cdFx0XCJ1aS5yb3V0ZXJcIixcclxuXHRcdFwic2F0ZWxsaXplclwiLFxyXG5cdFx0XCJuZ0Nvb2tpZXNcIixcclxuXHRcdFwibmdGaWxlVXBsb2FkXCJcclxuXHRdKTsiLCJ2YXIgQ09OU1RBTlRTID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcclxuXHR2YXIgbW9kdWxlID0ge307XHJcblxyXG5cdG1vZHVsZS5BUElfQkFTRV9VUkwgPSBcImh0dHA6Ly9kaXNjb3ZlcmJhbmRhcGkuaW50L3B1YmxpYy9hcGlcIjtcclxuXHJcblx0cmV0dXJuIG1vZHVsZTtcclxufSgpKTsiLCJhcHAuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRhdXRoUHJvdmlkZXIpIHtcclxuICAkYXV0aFByb3ZpZGVyLmxvZ2luVXJsICAgID0gQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArICcvbG9naW4nO1xyXG4gICRhdXRoUHJvdmlkZXIuc2lnbnVwVXJsICAgPSBDT05TVEFOVFMuQVBJX0JBU0VfVVJMICsgJy9yZWdpc3Rlcic7XHJcbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAuc3RhdGUoJ2hvbWUnLCB7XHJcbiAgICAgIHVybDogXCIvXCIsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcImFwcC9wYWdlcy9ob21lLmh0bWxcIixcclxuICAgICAgY29udHJvbGxlcjogXCJob21lQ29udHJvbGxlciBhcyBob21lXCJcclxuICAgIH0pXHJcbiAgXHQuc3RhdGUoJ3NvbG8nLCB7XHJcbiAgICAgIHVybDogXCIvc29sb1wiLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogXCJhcHAvcGFnZXMvc29sby5odG1sXCIsXHJcbiAgICAgIGNvbnRyb2xsZXI6IFwic29sb0NvbnRyb2xsZXIgYXMgc29sb1wiXHJcbiAgICB9KVxyXG4gICAgLnN0YXRlKCdtZXJnZWQnLCB7XHJcbiAgICAgIHVybDogXCIvbWVyZ2VkXCIsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcImFwcC9wYWdlcy9tZXJnZWQuaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcIm1lcmdlZENvbnRyb2xsZXIgYXMgbWVyZ2VkXCJcclxuICAgIH0pXHJcbiAgICAuc3RhdGUoJ2JhbmQnLCB7XHJcbiAgICAgIHVybDogXCIvYmFuZFwiLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogXCJhcHAvcGFnZXMvYmFuZC5odG1sXCIsXHJcbiAgICAgIGNvbnRyb2xsZXI6IFwiYmFuZENvbnRyb2xsZXIgYXMgYmFuZFwiXHJcbiAgICB9KVxyXG4gICAgLnN0YXRlKCdtZXJnZScsIHtcclxuICAgICAgdXJsOiBcIi9tZXJnZVwiLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogXCJhcHAvcGFnZXMvbWVyZ2UuaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcIm1lcmdlQ29udHJvbGxlciBhcyBtZXJnZVwiXHJcbiAgICB9KVxyXG4gICAgLnN0YXRlKCdwcm9maWxlJywge1xyXG4gICAgICB1cmw6IFwiL3Byb2ZpbGVcIixcclxuICAgICAgdGVtcGxhdGVVcmw6IFwiYXBwL3BhZ2VzL3Byb2ZpbGUuaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcInByb2ZpbGVDb250cm9sbGVyIGFzIHByb2ZpbGVcIlxyXG4gICAgfSlcclxuICAgIC5zdGF0ZSgndXBsb2FkJywge1xyXG4gICAgICB1cmw6IFwiL3VwbG9hZFwiLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogXCJhcHAvcGFnZXMvdXBsb2FkLmh0bWxcIixcclxuICAgICAgY29udHJvbGxlcjogXCJ1cGxvYWRDb250cm9sbGVyIGFzIHVwbG9hZFwiXHJcbiAgICB9KVxyXG59KTsiLCJhcHAuY29udHJvbGxlcihcImJhbmRDb250cm9sbGVyXCIsIGZ1bmN0aW9uKGJhbmRTZXJ2aWNlKSB7XHJcblx0XHJcblx0dmFyIHZtID0gdGhpcztcclxuXHR2YXIgYmFuZFN2YyA9IGJhbmRTZXJ2aWNlO1xyXG5cclxuXHRmdW5jdGlvbiBfaW5pdCgpIHtcclxuXHRcdHZtLnRyYWNrQXJyYXkgPSBiYW5kU3ZjLmdldFRyYWNrQXJyYXk7XHJcblx0fVxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcImhvbWVDb250cm9sbGVyXCIsIGZ1bmN0aW9uKGluc3RydW1lbnRTZXJ2aWNlLCBmaWx0ZXJTZXJ2aWNlKSB7XHJcblx0XHJcblx0dmFyIHZtID0gdGhpcztcclxuXHR2YXIgaW5zdFN2YyA9IGluc3RydW1lbnRTZXJ2aWNlO1xyXG5cdHZhciBmbHRTdmMgPSBmaWx0ZXJTZXJ2aWNlO1xyXG5cclxuXHRmdW5jdGlvbiBfaW5pdCgpIHtcclxuXHRcdC8vaW5zdFN2Yy5nZXRJbnN0cnVtZW50cygpO1xyXG5cclxuXHRcdHZtLmZpbHRlckRhdGEgPSBmbHRTdmMuc29sb0ZpbHRlckRhdGE7XHJcblx0fVxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcIm1lcmdlQ29udHJvbGxlclwiLCBmdW5jdGlvbihiYW5kU2VydmljZSkge1xyXG5cdHZhciB2bSA9IHRoaXM7XHJcblx0dmFyIGJhbmRTdmMgPSBiYW5kU2VydmljZTtcclxuXHR2YXIgd2F2ZXN1cmZlciA9IFtdO1xyXG5cclxuXHRmdW5jdGlvbiBfaW5pdCgpIHtcclxuXHRcdHZtLnRyYWNrcyBcdFx0XHQ9IGJhbmRTdmMuZ2V0VHJhY2tBcnJheSgpO1xyXG5cdFx0dm0udGhlcmVBcmVUcmFja3MgXHQ9IGZhbHNlO1xyXG5cdFx0dm0ubG9hZGVkVHJhY2tzIFx0PSBbXTtcclxuXHJcblx0XHRpZih2bS50cmFja3MubGVuZ3RoID4gMClcclxuXHRcdHtcclxuXHRcdFx0dm0udGhlcmVBcmVUcmFja3MgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dm0ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYodm0udGhlcmVBcmVUcmFja3MpXHJcblx0XHR7XHJcblx0XHRcdGZvciAodmFyIGkgPSB2bS50cmFja3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuXHRcdFx0XHRpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh2bS50cmFja3NbaV0uaWQpLmNoZWNrZWQpIFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHdhdmVzdXJmZXJbaV0gPSBXYXZlU3VyZmVyLmNyZWF0ZSh7XHJcblx0XHRcdCAgICBcdFx0Y29udGFpbmVyOiAnI3dhdmVmb3JtJytpLFxyXG5cdFx0XHQgICAgXHRcdHdhdmVDb2xvcjogJ2dyZWVuJyxcclxuXHRcdFx0ICAgIFx0XHRwcm9ncmVzc0NvbG9yOiAncHVycGxlJ1xyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0d2F2ZXN1cmZlcltpXS5sb2FkKCdodHRwOi8vZGlzY292ZXJiYW5kYXBpLmludC9wdWJsaWMvYXBpL2F1ZGlvLycgKyB2bS50cmFja3NbaV0uZmlsZV91cmwpO1xyXG5cdFx0XHRcdFx0dm0ubG9hZGVkVHJhY2tzLnB1c2goaSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBTcGVsZW4gbm9nIG5pZXQgaGVsZW1hYWwgZ2VsaWprIGFmIGRvb3IgZGUgbGFhZHRpamRcclxuXHR2bS5wbGF5QWxsID0gZnVuY3Rpb24oKSB7XHJcblx0XHRmb3IgKHZhciBpID0gdm0ubG9hZGVkVHJhY2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcblx0XHRcdHZhciBpbmRleCA9IHZtLmxvYWRlZFRyYWNrc1tpXTtcclxuICAgIFx0XHR3YXZlc3VyZmVyW2luZGV4XS5wbGF5KCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR2bS5zYXZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcclxuXHR9XHJcblxyXG5cdF9pbml0KCk7XHJcbn0pOyIsImFwcC5jb250cm9sbGVyKFwibWVyZ2VkQ29udHJvbGxlclwiLCBmdW5jdGlvbigkc2NvcGUsIG1lcmdlZFNlcnZpY2UsIGZpbHRlclNlcnZpY2UpIHtcclxuXHRcclxuXHR2YXIgdm0gIFx0XHQ9IHRoaXM7XHJcblx0dmFyIG1nZFN2YyBcdFx0PSBtZXJnZWRTZXJ2aWNlO1xyXG5cdHZhciBmbHRTdmMgXHRcdD0gZmlsdGVyU2VydmljZTtcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIHBsYXlBdWRpb0ZpbGUodHJhY2spXHJcblx0e1xyXG5cdFx0dHJhY2sucGxheSgpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0TWVyZ2VkVHJhY2tzKCkge1xyXG5cdFx0bWVyZ2VkU2VydmljZS5nZXRUcmFja3MoKVxyXG5cdFx0XHQudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0dm0ubWVyZ2VkVHJhY2tzID0gZGF0YS5kYXRhO1xyXG5cdFx0XHRcdHZtLmZpbHRlcmVkVHJhY2tzID0gdm0ubWVyZ2VkVHJhY2tzO1xyXG5cdFx0XHRcdGZpbHRlcigpO1xyXG5cclxuXHRcdFx0XHRhbmd1bGFyLmZvckVhY2godm0ubWVyZ2VkVHJhY2tzLCBmdW5jdGlvbih0cmFjaywga2V5KSB7XHJcblx0XHRcdFx0XHRcdC8vbmV3VHJhY2sgPSBuZXcgQXVkaW8odHJhY2suZmlsZV91cmwpO1xyXG5cdFx0XHRcdFx0XHRuZXdUcmFjayA9IG5ldyBBdWRpbyhcImRpc3QvYXVkaW8vQmVoZW1vdGggLSBDb25xdWVyIEFsbCAtIERydW0ubXAzXCIpO1xyXG5cdFx0XHRcdFx0XHR2bS5tZXJnZWRUcmFja0F1ZGlvW3RyYWNrLmlkXSA9IG5ld1RyYWNrO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBmaWx0ZXIoKSB7XHJcblx0XHRcclxuXHRcdHZtLmZpbHRlcmVkVHJhY2tzID0gW107XHJcblxyXG5cdFx0YW5ndWxhci5mb3JFYWNoKHZtLm1lcmdlZFRyYWNrcywgZnVuY3Rpb24odHJhY2ssIGtleSkge1xyXG5cclxuXHRcdFx0Z29vZFNlYXJjaCA9IHRydWU7XHJcblxyXG5cdFx0XHRpZighdm0uZmlsdGVyRGF0YS5hcnRpc3QgPT0gXCJcIiAmJiAhdHJhY2suYXJ0aXN0Lm5hbWUubWF0Y2gobmV3IFJlZ0V4cCh2bS5maWx0ZXJEYXRhLmFydGlzdCwgXCJpXCIpKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGdvb2RTZWFyY2ggPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoIXZtLmZpbHRlckRhdGEudGl0bGUgPT0gXCJcIiAmJiAhdHJhY2suc29uZ25hbWUubWF0Y2gobmV3IFJlZ0V4cCh2bS5maWx0ZXJEYXRhLnRpdGxlLCBcImlcIikpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Z29vZFNlYXJjaCA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0aWYoZ29vZFNlYXJjaClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZtLmZpbHRlcmVkVHJhY2tzLnB1c2godHJhY2spO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHR2bS5tZXJnZWRUcmFja0F1ZGlvID0gW107XHJcblx0XHR2bS5jdXJyZW50QXVkaW9UcmFja0lkID0gXCJcIjtcclxuXHJcblx0XHRnZXRNZXJnZWRUcmFja3MoKTtcclxuXHRcdHZtLmZpbHRlckRhdGEgPSBmbHRTdmMubWVyZ2VkRmlsdGVyRGF0YTtcclxuXHR9XHJcblxyXG5cdC8vVm0gZnVuY3Rpb25zXHJcblx0dm0ucGxheSA9IGZ1bmN0aW9uKHRyYWNrSWQpIHtcclxuXHJcblx0XHRpZih2bS5jdXJyZW50QXVkaW9UcmFja0lkICE9IFwiXCIpIHtcclxuXHRcdFx0dm0ucGF1c2Uodm0uY3VycmVudEF1ZGlvVHJhY2tJZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dm0uY3VycmVudEF1ZGlvVHJhY2tJZCA9IHRyYWNrSWQ7XHJcblx0XHR2bS5tZXJnZWRUcmFja0F1ZGlvW3RyYWNrSWRdLnBsYXkoKTtcclxuXHR9XHJcblxyXG5cdHZtLnBhdXNlID0gZnVuY3Rpb24odHJhY2tJZCkge1xyXG5cdFx0dm0ubWVyZ2VkVHJhY2tBdWRpb1t0cmFja0lkXS5wYXVzZSgpO1xyXG5cdFx0dm0uY3VycmVudEF1ZGlvVHJhY2tJZCA9IFwiXCI7XHJcblx0fVxyXG5cclxuXHQvL1dhdGNoZXNcclxuXHQkc2NvcGUuJHdhdGNoKFxyXG5cdFx0ZnVuY3Rpb24gKCkgeyByZXR1cm4gdm0uZmlsdGVyRGF0YSB9LCBcclxuXHRcdGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGlmKHZtLmZpbHRlckRhdGEpIFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmlsdGVyKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sIHRydWUpO1xyXG5cclxuXHJcblxyXG5cdHZtLnRyYWNrMSA9IG5ldyBBdWRpbyhcImRpc3QvYXVkaW8vQmVoZW1vdGggLSBDb25xdWVyIEFsbCAtIERydW0ubXAzXCIpO1xyXG5cdHZtLnRyYWNrMiA9IG5ldyBBdWRpbyhcImRpc3QvYXVkaW8vQmVoZW1vdGggLSBDb25xdWVyIEFsbCAtIEd1aXRhci5tcDNcIik7XHJcblxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcInByb2ZpbGVDb250cm9sbGVyXCIsIGZ1bmN0aW9uKHVzZXJTZXJ2aWNlKSB7XHJcblx0XHJcblx0dmFyIHZtIFx0XHQ9IHRoaXM7XHJcblx0dmFyIHVzZXJTdmMgPSB1c2VyU2VydmljZTtcclxuXHR2YXIgdGFyZ2V0IFx0PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBkYXRlLXByb2ZpbGUtc3Bpbm5lcicpO1xyXG5cclxuXHR2YXIgb3B0cyA9IHtcclxuXHRcdFx0bGluZXM6IDEzIC8vIFRoZSBudW1iZXIgb2YgbGluZXMgdG8gZHJhd1xyXG5cdFx0LCBsZW5ndGg6IDI4IC8vIFRoZSBsZW5ndGggb2YgZWFjaCBsaW5lXHJcblx0XHQsIHdpZHRoOiAxMiAvLyBUaGUgbGluZSB0aGlja25lc3NcclxuXHRcdCwgcmFkaXVzOiA0MiAvLyBUaGUgcmFkaXVzIG9mIHRoZSBpbm5lciBjaXJjbGVcclxuXHRcdCwgc2NhbGU6IDAuMTUgLy8gU2NhbGVzIG92ZXJhbGwgc2l6ZSBvZiB0aGUgc3Bpbm5lclxyXG5cdFx0LCBjb3JuZXJzOiAxIC8vIENvcm5lciByb3VuZG5lc3MgKDAuLjEpXHJcblx0XHQsIGNvbG9yOiAnIzAwMCcgLy8gI3JnYiBvciAjcnJnZ2JiIG9yIGFycmF5IG9mIGNvbG9yc1xyXG5cdFx0LCBvcGFjaXR5OiAwLjI1IC8vIE9wYWNpdHkgb2YgdGhlIGxpbmVzXHJcblx0XHQsIHJvdGF0ZTogMCAvLyBUaGUgcm90YXRpb24gb2Zmc2V0XHJcblx0XHQsIGRpcmVjdGlvbjogMSAvLyAxOiBjbG9ja3dpc2UsIC0xOiBjb3VudGVyY2xvY2t3aXNlXHJcblx0XHQsIHNwZWVkOiAxIC8vIFJvdW5kcyBwZXIgc2Vjb25kXHJcblx0XHQsIHRyYWlsOiA2MCAvLyBBZnRlcmdsb3cgcGVyY2VudGFnZVxyXG5cdFx0LCBmcHM6IDIwIC8vIEZyYW1lcyBwZXIgc2Vjb25kIHdoZW4gdXNpbmcgc2V0VGltZW91dCgpIGFzIGEgZmFsbGJhY2sgZm9yIENTU1xyXG5cdFx0LCB6SW5kZXg6IDJlOSAvLyBUaGUgei1pbmRleCAoZGVmYXVsdHMgdG8gMjAwMDAwMDAwMClcclxuXHRcdCwgY2xhc3NOYW1lOiAnc3Bpbm5lcicgLy8gVGhlIENTUyBjbGFzcyB0byBhc3NpZ24gdG8gdGhlIHNwaW5uZXJcclxuXHRcdCwgdG9wOiAnODklJyAvLyBUb3AgcG9zaXRpb24gcmVsYXRpdmUgdG8gcGFyZW50XHJcblx0XHQsIGxlZnQ6ICcyNS41JScgLy8gTGVmdCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuXHRcdCwgc2hhZG93OiBmYWxzZSAvLyBXaGV0aGVyIHRvIHJlbmRlciBhIHNoYWRvd1xyXG5cdFx0LCBod2FjY2VsOiBmYWxzZSAvLyBXaGV0aGVyIHRvIHVzZSBoYXJkd2FyZSBhY2NlbGVyYXRpb25cclxuXHRcdCwgcG9zaXRpb246ICdhYnNvbHV0ZScgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHR1c2VyU3ZjLmdldFVzZXIoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRcdHZtLnVzZXJuYW1lID0gZGF0YS5kYXRhLnVzZXJuYW1lO1xyXG5cdFx0XHR2bS5lbWFpbCBcdD0gZGF0YS5kYXRhLmVtYWlsO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHR2bS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzcGlubmVyID0gbmV3IFNwaW5uZXIob3B0cykuc3Bpbih0YXJnZXQpO1xyXG5cdCAgICB2bS5sb2FkaW5nIFx0PSB0cnVlO1xyXG5cclxuXHRcdHZhciB1c2VyaW5mbyA9IHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6IHZtLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICBlbWFpbDogdm0uZW1haWxcclxuICAgICAgICB9XHJcblxyXG5cdFx0dXNlclN2Yy51cGRhdGVVc2VyKHVzZXJpbmZvKVxyXG5cdFx0XHQudGhlbihmdW5jdGlvbihkYXRhKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3Bpbm5lci5zdG9wKCk7XHJcblx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNwaW5uZXIuc3RvcCgpO1xyXG5cdFx0XHRcdHZtLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcInNvbG9Db250cm9sbGVyXCIsIGZ1bmN0aW9uKCRzY29wZSwgYmFuZFNlcnZpY2UsIHNvbG9TZXJ2aWNlLCBpbnN0cnVtZW50U2VydmljZSwgZmlsdGVyU2VydmljZSkge1xyXG5cdFxyXG5cdHZhciB2bSA9IHRoaXM7XHJcblx0dmFyIGJhbmRTdmMgPSBiYW5kU2VydmljZTtcclxuXHR2YXIgc29sb1N2YyA9IHNvbG9TZXJ2aWNlO1xyXG5cdHZhciBpbnN0U3ZjID0gaW5zdHJ1bWVudFNlcnZpY2U7XHJcblx0dmFyIGZsdFN2YyA9IGZpbHRlclNlcnZpY2U7XHJcblxyXG5cdC8vUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHRmdW5jdGlvbiBwbGF5QXVkaW9GaWxlKHRyYWNrKVxyXG5cdHtcclxuXHRcdHRyYWNrLnBsYXkoKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldFNvbG9UcmFja3MoKVxyXG5cdHtcclxuXHRcdHNvbG9TdmMuZ2V0VHJhY2tzKClcclxuXHRcdFx0LnRoZW4oZnVuY3Rpb24oZGF0YSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZtLnNvbG9UcmFja3MgPSBkYXRhLmRhdGE7XHJcblx0XHRcdFx0dm0uZmlsdGVyZWRUcmFja3MgPSB2bS5zb2xvVHJhY2tzO1xyXG5cdFx0XHRcdGZpbHRlcigpO1xyXG5cclxuXHRcdFx0XHRhbmd1bGFyLmZvckVhY2godm0uc29sb1RyYWNrcywgZnVuY3Rpb24odHJhY2ssIGtleSkge1xyXG5cdFx0XHRcdFx0XHQvL25ld1RyYWNrID0gbmV3IEF1ZGlvKHRyYWNrLmZpbGVfdXJsKTtcclxuXHRcdFx0XHRcdFx0bmV3VHJhY2sgPSBuZXcgQXVkaW8oJ2h0dHA6Ly9kaXNjb3ZlcmJhbmRhcGkuaW50L3B1YmxpYy9hdWRpby8nICsgdHJhY2suZmlsZV91cmwpO1xyXG5cdFx0XHRcdFx0XHR2bS5zb2xvVHJhY2tBdWRpb1t0cmFjay5pZF0gPSBuZXdUcmFjaztcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdH0pO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZmlsdGVyKClcclxuXHR7XHJcblx0XHR2bS5maWx0ZXJlZFRyYWNrcyA9IFtdO1xyXG5cclxuXHRcdGFuZ3VsYXIuZm9yRWFjaCh2bS5zb2xvVHJhY2tzLCBmdW5jdGlvbih0cmFjaywga2V5KVxyXG5cdFx0e1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKHRyYWNrKTtcclxuXHRcdFx0Z29vZFNlYXJjaCA9IHRydWU7XHJcblxyXG5cdFx0XHRpZighdm0uZmlsdGVyRGF0YS5hcnRpc3QgPT0gXCJcIiAmJiAhdHJhY2suYXJ0aXN0Lm5hbWUubWF0Y2gobmV3IFJlZ0V4cCh2bS5maWx0ZXJEYXRhLmFydGlzdCwgXCJpXCIpKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGdvb2RTZWFyY2ggPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoIXZtLmZpbHRlckRhdGEudGl0bGUgPT0gXCJcIiAmJiAhdHJhY2suc29uZ25hbWUubWF0Y2gobmV3IFJlZ0V4cCh2bS5maWx0ZXJEYXRhLnRpdGxlLCBcImlcIikpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Z29vZFNlYXJjaCA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZighdm0uZmlsdGVyRGF0YVt0cmFjay5pbnN0cnVtZW50X2lkXSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGdvb2RTZWFyY2ggPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGlmKGdvb2RTZWFyY2gpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2bS5maWx0ZXJlZFRyYWNrcy5wdXNoKHRyYWNrKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvL2NvbnNvbGUubG9nKHZtLmZpbHRlcmVkVHJhY2tzKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LypmdW5jdGlvbiBhcnJheU9iamVjdEluZGV4T2YobXlBcnJheSwgc2VhcmNoVGVybSwgcHJvcGVydHkpIHtcclxuICAgIFx0XHJcbiAgICBcdGZvcih2YXIgaSA9IDAsIGxlbiA9IG15QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBcdGlmIChteUFycmF5W2ldW3Byb3BlcnR5XSA9PT0gc2VhcmNoVGVybSkgcmV0dXJuIGk7XHJcbiAgICBcdH1cclxuXHJcbiAgICBcdHJldHVybiAtMTtcclxuXHR9Ki9cclxuXHJcblx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHR2bS5zb2xvVHJhY2tBdWRpbyA9IFtdO1xyXG5cdFx0dm0uY3VycmVudEF1ZGlvVHJhY2tJZCA9IFwiXCI7XHJcblxyXG5cdFx0Z2V0U29sb1RyYWNrcygpO1xyXG5cdFx0dm0uaW5zdHJ1bWVudHMgPSBpbnN0U3ZjLmluc3RydW1lbnRzO1xyXG5cdFx0dm0uZmlsdGVyRGF0YSA9IGZsdFN2Yy5zb2xvRmlsdGVyRGF0YTtcclxuXHRcdHZtLnRyYWNrQXJyYXkgPSBiYW5kU3ZjLmdldFRyYWNrQXJyYXk7XHJcblx0XHR2bS5iYW5kVHJhY2tJZEFycmF5ID0gYmFuZFN2Yy5nZXRUcmFja0lkQXJyYXk7XHJcblx0XHR2bS50cmFja0FycmF5Q291bnQgPSBiYW5kU3ZjLmdldFRyYWNrQXJyYXlDb3VudDtcclxuXHJcblx0XHQvKmFuZ3VsYXIuZm9yRWFjaChiYW5kU3ZjLnRyYWNrQXJyYXksIGZ1bmN0aW9uKHRyYWNrLCBrZXkpIHtcclxuXHRcdFx0dm0uYmFuZFRyYWNrSWRBcnJheS5wdXNoKHRyYWNrLmlkKTtcclxuXHRcdH0pOyovXHJcblxyXG5cdFx0Ly92bS50cmFjazEucGxheSgpO1xyXG5cdFx0Ly9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cGxheUF1ZGlvRmlsZSh2bS50cmFjazIpfSwgNDAwKTtcclxuXHR9XHJcblxyXG5cdC8vVm0gZnVuY3Rpb25zXHJcblx0dm0uYWRkVG9CYW5kID0gZnVuY3Rpb24odHJhY2spIHtcclxuXHJcblx0XHRiYW5kU3ZjLmFkZFRvVHJhY2tBcnJheSh0cmFjayk7XHJcblx0XHQvKnZtLmJhbmRUcmFja0lkQXJyYXkgPSBbXTtcclxuXHJcblx0XHRiYW5kU3ZjLnRyYWNrQXJyYXkucHVzaCh0cmFjayk7XHJcblx0XHRiYW5kU3ZjLnRyYWNrQXJyYXlDb3VudCArKztcclxuXHRcdGFuZ3VsYXIuZm9yRWFjaChiYW5kU3ZjLnRyYWNrQXJyYXksIGZ1bmN0aW9uKHRyYWNrLCBrZXkpIHtcclxuXHRcdFx0dm0uYmFuZFRyYWNrSWRBcnJheS5wdXNoKHRyYWNrLmlkKTtcclxuXHRcdH0pOyovXHJcblxyXG5cdFx0Y29uc29sZS5sb2codHJhY2spO1xyXG5cdFx0Ly9jb25zb2xlLmxvZyhiYW5kU3ZjLnRyYWNrQXJyYXkpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZyh2bS5iYW5kVHJhY2tJZEFycmF5KTtcclxuXHRcdC8vY29uc29sZS5sb2codm0udHJhY2tBcnJheUNvdW50KCkpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZyh2bS5iYW5kVHJhY2tJZEFycmF5KCkpO1xyXG5cdH1cclxuXHJcblx0dm0ucmVtb3ZlRnJvbUJhbmQgPSBmdW5jdGlvbih0cmFjaykge1xyXG5cdFx0XHJcblx0XHRiYW5kU3ZjLnJlbW92ZUZyb21UcmFja0FycmF5KHRyYWNrKTtcclxuXHRcdC8qaW5kZXggPSBhcnJheU9iamVjdEluZGV4T2YoYmFuZFN2Yy50cmFja0FycmF5LCB0cmFjay5pZCwgXCJpZFwiKTtcclxuXHRcdGlmIChpbmRleCA+IC0xKSB7XHJcblx0XHRcdGJhbmRTdmMudHJhY2tBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0XHRiYW5kU3ZjLnRyYWNrQXJyYXlDb3VudCAtLTtcclxuXHRcdFx0dm0uYmFuZFRyYWNrQXJyYXkgPSBiYW5kU3ZjLnRyYWNrQXJyYXk7XHJcblxyXG5cdFx0XHRpbnRJbmRleCA9IHZtLmJhbmRUcmFja0lkQXJyYXkuaW5kZXhPZih0cmFjay5pZCk7XHJcblx0XHRcdGlmIChpbnRJbmRleCA+IC0xKSB7XHJcblx0XHRcdFx0dm0uYmFuZFRyYWNrSWRBcnJheS5zcGxpY2UoaW50SW5kZXgsIDEpO1xyXG5cdFx0XHR9XHJcblx0XHR9Ki9cclxuXHJcblx0XHRjb25zb2xlLmxvZyhcIlRyYWNrIHJlbW92ZWQgZnJvbSBuZXcgYmFuZDogXCIgKyB0cmFjayk7XHJcblx0XHQvL2NvbnNvbGUubG9nKGJhbmRTdmMudHJhY2tBcnJheSk7XHJcblx0fVxyXG5cclxuXHR2bS5wbGF5ID0gZnVuY3Rpb24odHJhY2tJZCkge1xyXG5cclxuXHRcdGlmKHZtLmN1cnJlbnRBdWRpb1RyYWNrSWQgIT0gXCJcIikge1xyXG5cdFx0XHR2bS5wYXVzZSh2bS5jdXJyZW50QXVkaW9UcmFja0lkKTtcclxuXHRcdH1cclxuXHJcblx0XHR2bS5jdXJyZW50QXVkaW9UcmFja0lkID0gdHJhY2tJZDtcclxuXHRcdHZtLnNvbG9UcmFja0F1ZGlvW3RyYWNrSWRdLnBsYXkoKTtcclxuXHR9XHJcblxyXG5cdHZtLnBhdXNlID0gZnVuY3Rpb24odHJhY2tJZCkge1xyXG5cdFx0dm0uc29sb1RyYWNrQXVkaW9bdHJhY2tJZF0ucGF1c2UoKTtcclxuXHRcdHZtLmN1cnJlbnRBdWRpb1RyYWNrSWQgPSBcIlwiO1xyXG5cdH1cclxuXHJcblx0Ly9XYXRjaGVzXHJcblx0JHNjb3BlLiR3YXRjaChcclxuXHRcdGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZtLmZpbHRlckRhdGEgfSwgXHJcblx0XHRmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRpZih2bS5maWx0ZXJEYXRhKSBcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZpbHRlcigpO1xyXG5cdFx0XHR9XHJcblx0XHR9LCB0cnVlKTtcclxuXHJcblxyXG5cclxuXHQvL3ZtLnRyYWNrMSA9IG5ldyBBdWRpbygnaHR0cDovL2Rpc2NvdmVyYmFuZGFwaS5pbnQvcHVibGljL2F1ZGlvL2RydW0ud2F2Jyk7XHJcblx0Ly92bS50cmFjazIgPSBuZXcgQXVkaW8oJ2h0dHA6Ly9kaXNjb3ZlcmJhbmRhcGkuaW50L3B1YmxpYy9hdWRpby9ndWl0YXIud2F2Jyk7XHJcblxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcInVwbG9hZENvbnRyb2xsZXJcIiwgZnVuY3Rpb24oVXBsb2FkLCBhcnRpc3RTZXJ2aWNlLCBpbnN0cnVtZW50U2VydmljZSwgc29sb1NlcnZpY2UpIHtcclxuICBcclxuICB2YXIgdm0gICAgICAgICAgICA9IHRoaXM7XHJcbiAgdmFyIHNvbG9TdmMgICAgICAgPSBzb2xvU2VydmljZTtcclxuICB2YXIgYXJ0aXN0U3ZjICAgICA9IGFydGlzdFNlcnZpY2U7XHJcbiAgdmFyIGluc3RydW1lbnRTdmMgPSBpbnN0cnVtZW50U2VydmljZTtcclxuICB2YXIgdGFyZ2V0ICAgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cGxvYWQtc3Bpbm5lcicpO1xyXG4gIFxyXG4gIHZhciBvcHRzID0ge1xyXG4gICAgICBsaW5lczogMTMgLy8gVGhlIG51bWJlciBvZiBsaW5lcyB0byBkcmF3XHJcbiAgICAsIGxlbmd0aDogMjggLy8gVGhlIGxlbmd0aCBvZiBlYWNoIGxpbmVcclxuICAgICwgd2lkdGg6IDEyIC8vIFRoZSBsaW5lIHRoaWNrbmVzc1xyXG4gICAgLCByYWRpdXM6IDQyIC8vIFRoZSByYWRpdXMgb2YgdGhlIGlubmVyIGNpcmNsZVxyXG4gICAgLCBzY2FsZTogMC4zMCAvLyBTY2FsZXMgb3ZlcmFsbCBzaXplIG9mIHRoZSBzcGlubmVyXHJcbiAgICAsIGNvcm5lcnM6IDEgLy8gQ29ybmVyIHJvdW5kbmVzcyAoMC4uMSlcclxuICAgICwgY29sb3I6ICcjMDAwJyAvLyAjcmdiIG9yICNycmdnYmIgb3IgYXJyYXkgb2YgY29sb3JzXHJcbiAgICAsIG9wYWNpdHk6IDAuMjUgLy8gT3BhY2l0eSBvZiB0aGUgbGluZXNcclxuICAgICwgcm90YXRlOiAwIC8vIFRoZSByb3RhdGlvbiBvZmZzZXRcclxuICAgICwgZGlyZWN0aW9uOiAxIC8vIDE6IGNsb2Nrd2lzZSwgLTE6IGNvdW50ZXJjbG9ja3dpc2VcclxuICAgICwgc3BlZWQ6IDEgLy8gUm91bmRzIHBlciBzZWNvbmRcclxuICAgICwgdHJhaWw6IDYwIC8vIEFmdGVyZ2xvdyBwZXJjZW50YWdlXHJcbiAgICAsIGZwczogMjAgLy8gRnJhbWVzIHBlciBzZWNvbmQgd2hlbiB1c2luZyBzZXRUaW1lb3V0KCkgYXMgYSBmYWxsYmFjayBmb3IgQ1NTXHJcbiAgICAsIHpJbmRleDogMmU5IC8vIFRoZSB6LWluZGV4IChkZWZhdWx0cyB0byAyMDAwMDAwMDAwKVxyXG4gICAgLCBjbGFzc05hbWU6ICdzcGlubmVyJyAvLyBUaGUgQ1NTIGNsYXNzIHRvIGFzc2lnbiB0byB0aGUgc3Bpbm5lclxyXG4gICAgLCB0b3A6ICc0MCUnIC8vIFRvcCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuICAgICwgbGVmdDogJzUwJScgLy8gTGVmdCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuICAgICwgc2hhZG93OiBmYWxzZSAvLyBXaGV0aGVyIHRvIHJlbmRlciBhIHNoYWRvd1xyXG4gICAgLCBod2FjY2VsOiBmYWxzZSAvLyBXaGV0aGVyIHRvIHVzZSBoYXJkd2FyZSBhY2NlbGVyYXRpb25cclxuICAgICwgcG9zaXRpb246ICdhYnNvbHV0ZScgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2luaXQoKSB7XHJcbiAgICAgIHZtLnVwbG9hZGVkICAgICAgID0gZmFsc2U7XHJcbiAgICAgIHZtLnNob3dmb3JtICAgICAgID0gZmFsc2U7XHJcblxyXG4gICAgICB2bS5pbnN0cnVtZW50cyAgICA9IGluc3RydW1lbnRTdmMuZ2V0SW5zdHJ1bWVudHMoKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihkYXRhKVxyXG4gICAgICB7XHJcbiAgICAgICAgdm0uaW5zdHJ1bWVudHMgID0gZGF0YS5kYXRhO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZGF0YSk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKVxyXG4gICAgICB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHZtLmFydGlzdHMgICAgICAgID0gYXJ0aXN0U3ZjLmdldEFydGlzdHMoKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihkYXRhKVxyXG4gICAgICB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhKTtcclxuICAgICAgICB2bS5hcnRpc3RzICAgICAgPSBkYXRhLmRhdGE7XHJcbiAgICAgIFxyXG4gICAgICB9LCBmdW5jdGlvbihlcnJvcilcclxuICAgICAge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICB2bS51cGxvYWRGaWxlID0gZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICB2YXIgc3Bpbm5lciA9IG5ldyBTcGlubmVyKG9wdHMpLnNwaW4odGFyZ2V0KTtcclxuICAgICAgICB2bS5sb2FkaW5nICA9IHRydWU7XHJcbiAgICAgICAgdm0udXBsb2FkZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL3VwbG9hZFwiLFxyXG4gICAgICAgICAgICBmaWxlRm9ybURhdGFOYW1lOiAnc29uZycsXHJcbiAgICAgICAgICAgIHNlbmRGaWVsZHNBczogJ2Zvcm0nLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgc29uZzogZmlsZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcCkge1xyXG4gICAgICAgICAgICB2bS5maWxlbmFtZSAgICAgPSByZXNwLmRhdGEubmFtZTtcclxuICAgICAgICAgICAgdm0udHJhY2tsZW5ndGggID0gcmVzcC5kYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgc3Bpbm5lci5zdG9wKCk7XHJcbiAgICAgICAgICAgIHZtLmxvYWRpbmcgICAgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS51cGxvYWRlZCAgICAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBmb3JtXHJcbiAgICAgICAgICAgIHZtLnNob3dmb3JtICAgICA9IHRydWU7XHJcbiAgICAgICAgICAgICQoJ3NlbGVjdCcpLm1hdGVyaWFsX3NlbGVjdCgpO1xyXG4gICAgICAgIH0sIFxyXG4gICAgICAgIGZ1bmN0aW9uIChyZXNwKSB7XHJcbiAgICAgICAgICAgIHZtLmxvYWRpbmcgID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNwaW5uZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3InKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uc2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHVzZXJfaWQgPSBKU09OLnBhcnNlKGdldENvb2tpZSgndXNlcicpKS51c2VySWQ7XHJcbiAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB2bS5zb25nbmFtZSxcclxuICAgICAgICAgICAgZmlsZV91cmw6IHZtLmZpbGVuYW1lLFxyXG4gICAgICAgICAgICB0cmFja19sZW5ndGg6IHZtLnRyYWNrbGVuZ3RoLFxyXG4gICAgICAgICAgICB1c2VyX2lkOiB1c2VyX2lkLFxyXG4gICAgICAgICAgICBpbnN0cnVtZW50X2lkOiB2bS5pbnN0cnVtZW50c2Ryb3Bkb3duLFxyXG4gICAgICAgICAgICBhcnRpc3RfaWQgOiB2bS5hcnRpc3RzZHJvcGRvd25cclxuICAgICAgICB9XHJcblxyXG4gICAgICBzb2xvU3ZjLmluc2VydFRyYWNrKGRhdGEpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q29va2llKGNuYW1lKSB7XHJcbiAgICAgICAgICB2YXIgbmFtZSA9IGNuYW1lICsgXCI9XCI7XHJcbiAgICAgICAgICB2YXIgZGVjb2RlZENvb2tpZSA9IGRlY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWUpO1xyXG4gICAgICAgICAgdmFyIGNhID0gZGVjb2RlZENvb2tpZS5zcGxpdCgnOycpO1xyXG4gICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8Y2EubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICB2YXIgYyA9IGNhW2ldO1xyXG4gICAgICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PSAnICcpIHtcclxuICAgICAgICAgICAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoYy5pbmRleE9mKG5hbWUpID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgIH1cclxuICBfaW5pdCgpO1xyXG59KTsiLCJhcHAuZmlsdGVyKFwiYmFuZFwiLCBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24odHJhY2tJZCwgbGlzdCkge1xyXG5cdFx0dmFyIHJldHVyblZhbHVlID0gZmFsc2U7XHJcblx0XHRcclxuXHRcdGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbihpZCwgaW5kZXgpIHtcclxuXHRcdFx0aWYoaWQgPT0gdHJhY2tJZCkge1xyXG5cdFx0XHRcdHJldHVyblZhbHVlID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcmV0dXJuVmFsdWU7XHJcblx0fVxyXG59KTsiLCJhcHAuc2VydmljZShcImFydGlzdFNlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuXHRcclxuXHQvL0dsb2JhbHNcclxuXHR2YXIgc3ZjIFx0XHRcdD0gdGhpcztcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGdldERhdGEgKHVybCwgb3B0aW9ucykge1xyXG5cclxuXHRcdCFvcHRpb25zID8gb3B0aW9ucyA9IHt9IDogXCJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCwgb3B0aW9ucylcclxuXHR9XHJcblxyXG5cdC8vU3ZjIGZ1bmN0aW9uc1xyXG5cdHN2Yy5nZXRBcnRpc3RzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB1cmwgPSBDT05TVEFOVFMuQVBJX0JBU0VfVVJMICsgXCIvYXJ0aXN0c1wiO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gZ2V0RGF0YSh1cmwpO1xyXG5cdH1cclxufSkiLCJhcHAuc2VydmljZShcImF1dGhTZXJ2aWNlXCIsIGZ1bmN0aW9uICgkYXV0aCwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRzdGF0ZSwgdXNlclNlcnZpY2UpIHtcclxuXHRcclxuXHR2YXIgc3ZjIFx0XHQ9IHRoaXM7XHJcblx0dmFyIHVzZXJTdmMgXHQ9IHVzZXJTZXJ2aWNlO1xyXG5cclxuXHRzdmMuaXNMb2dnZWRJbiBcdD0gbnVsbDtcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGxvZ2luICh0b2tlbiwgaWQsIHVzZXJuYW1lLCBlbWFpbCkge1xyXG5cclxuXHRcdHZhciBleHBpcmF0aW9uVGltZSA9IG5ldyBEYXRlKCk7XHJcblx0XHRleHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lLnNldFRpbWUoZXhwaXJhdGlvblRpbWUuZ2V0VGltZSgpICsgKHRva2VuW1wiZXhwaXJlc19pblwiXSAqIDEwMDApKTtcclxuXHRcdGV4cGlyYXRpb25UaW1lID0gbmV3IERhdGUoZXhwaXJhdGlvblRpbWUpO1xyXG5cclxuXHRcdHZhciB1c2VyRGF0YSA9IHtcclxuXHJcblx0XHRcdHRva2VuOiB0b2tlbixcclxuXHRcdFx0dXNlcklkOiBpZCxcclxuXHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLFxyXG5cdFx0XHRlbWFpbDogZW1haWwsXHJcblx0XHRcdC8vaXNBZG1pbjogZGF0YS5kYXRhLmlzQWRtaW5cclxuXHRcdH1cclxuXHJcblx0XHQvL2NvbnNvbGUubG9nKHVzZXJEYXRhLnRva2VuKTtcclxuXHJcblx0XHRzdmMudXNlciA9IHVzZXJEYXRhO1xyXG5cclxuXHRcdCRjb29raWVzLnB1dE9iamVjdChcInVzZXJcIiwgdXNlckRhdGEsIHsgZXhwaXJlczogZXhwaXJhdGlvblRpbWUgfSk7XHJcblx0XHQkcm9vdFNjb3BlLmlzTG9nZ2VkSW4gPSB0cnVlO1xyXG5cdFx0XHJcblx0XHQvL0NoZWNrIGlmIHJldHVybmVkIHVzZXIgaXMgQWRtaW5cclxuXHRcdHVzZXJEYXRhLmlzQWRtaW4gPT0gXCIxXCIgPyAkcm9vdFNjb3BlLmlzQWRtaW4gPSB0cnVlIDogJHJvb3RTY29wZS5pc0FkbWluID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvL1N2YyBmdW5jdGlvbnNcclxuXHRzdmMubG9naW4gPSBmdW5jdGlvbiAoY3JlZGVudGlhbHMpIHtcclxuXHJcblx0XHQkYXV0aC5sb2dpbihjcmVkZW50aWFscykudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgXHQvLyBBdXRoZW50aWNhdGlvbiBzdWNjZXNzXHJcbiAgICAgICAgXHR0b2tlbiBcdFx0PSBkYXRhLmRhdGEudG9rZW47XHJcbiAgICAgICAgXHRpZCBcdFx0XHQ9IDA7XHJcbiAgICAgICAgXHR1c2VybmFtZSBcdD0gXCJcIjtcclxuICAgICAgICBcdGVtYWlsIFx0XHQ9IFwiXCI7XHJcblxyXG5cdFx0XHR1c2VyU3ZjLmdldFVzZXIoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRcdFx0aWQgXHRcdFx0PSBkYXRhLmRhdGEuaWQ7XHJcblx0XHRcdFx0dXNlcm5hbWUgXHQ9IGRhdGEuZGF0YS51c2VybmFtZTtcclxuXHRcdFx0XHRlbWFpbCBcdFx0PSBkYXRhLmRhdGEuZW1haWw7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0bG9naW4odG9rZW4sIGlkLCB1c2VybmFtZSwgZW1haWwpO1xyXG5cdFx0XHRcdHN2Yy5pc0xvZ2dlZEluID0gdHJ1ZTtcclxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdFx0c3ZjLmlzTG9nZ2VkSW4gPSBmYWxzZTtcclxuXHRcdFx0fSk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgZnVuY3Rpb24oZXJyb3Ipe1xyXG4gICAgICAgIFx0Ly8gQXV0aGVudGljYXRpb24gZmFpbGVkXHJcbiAgICAgICAgXHRjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgXHRzdmMuaXNMb2dnZWRJbiA9IGZhbHNlOyBcclxuICAgICAgICB9KTtcclxuXHR9XHJcblxyXG5cdHN2Yy5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0JGF1dGgubG9nb3V0KClcclxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcblx0XHRcdFx0JHJvb3RTY29wZS5pc0xvZ2dlZEluID0gZmFsc2U7XHJcblx0XHRcdFx0JHJvb3RTY29wZS5pc0FkbWluID0gZmFsc2U7XHJcblx0XHRcdFx0c3ZjLnVzZXIgPSBudWxsO1xyXG5cdFx0XHRcdHN2Yy5pc0xvZ2dlZEluID0gbnVsbDtcclxuXHJcblx0XHRcdFx0JGNvb2tpZXMucmVtb3ZlKFwidXNlclwiKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQkc3RhdGUuZ28oXCJob21lXCIpO1xyXG5cdFx0XHR9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0XHR9KVxyXG5cdH1cclxuXHJcblx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuXHJcblx0XHR2YXIgdXJsID0gQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL3VzZXJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAucG9zdCh1cmwsIHVzZXIpO1xyXG5cdH1cclxufSk7IiwiYXBwLnNlcnZpY2UoXCJiYW5kU2VydmljZVwiLCBmdW5jdGlvbigpIHtcclxuXHRcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0dHJhY2tBcnJheSA9IFtdO1xyXG5cdHRyYWNrSWRBcnJheSA9IFtdO1xyXG5cdHRyYWNrQXJyYXlDb3VudCA9IDA7XHJcblxyXG5cdC8vUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHRmdW5jdGlvbiBhcnJheU9iamVjdEluZGV4T2YobXlBcnJheSwgc2VhcmNoVGVybSwgcHJvcGVydHkpIHtcclxuICAgIFx0XHJcbiAgICBcdGZvcih2YXIgaSA9IDAsIGxlbiA9IG15QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBcdGlmIChteUFycmF5W2ldW3Byb3BlcnR5XSA9PT0gc2VhcmNoVGVybSkgcmV0dXJuIGk7XHJcbiAgICBcdH1cclxuXHJcbiAgICBcdHJldHVybiAtMTtcclxuXHR9XHJcblx0Ly9UcmFja0FycmF5Q291bnRcclxuXHRmdW5jdGlvbiBpbmNyZW1lbnRUcmFja0FycmF5Q291bnQoKSB7XHJcblx0XHR0cmFja0FycmF5Q291bnQgKys7XHJcblx0XHRyZXR1cm4gdHJhY2tBcnJheUNvdW50O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZGVjcmVtZW50VHJhY2tBcnJheUNvdW50KCkge1xyXG5cdFx0dHJhY2tBcnJheUNvdW50IC0tO1xyXG5cdFx0cmV0dXJuIHRyYWNrQXJyYXlDb3VudDtcclxuXHR9XHJcblxyXG5cdC8vVHJhY2tJZEFycmF5XHJcblx0ZnVuY3Rpb24gYWRkVG9UcmFja0lkQXJyYXkodHJhY2tJZCkge1xyXG5cdFx0dHJhY2tJZEFycmF5LnB1c2godHJhY2tJZCk7XHJcblx0XHRyZXR1cm4gdHJhY2tJZEFycmF5O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmVtb3ZlRnJvbVRyYWNrSWRBcnJheSh0cmFja0lkKSB7XHJcblx0XHRpbmRleCA9IHRyYWNrSWRBcnJheS5pbmRleE9mKHRyYWNrSWQpO1xyXG5cdFx0aWYoaW5kZXggPiAtMSkge1xyXG5cdFx0XHR0cmFja0lkQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJhY2tJZEFycmF5O1xyXG5cdH1cclxuXHJcblx0Ly9TdmMgZnVuY3Rpb25zXHJcblx0c3ZjLmdldFRyYWNrQXJyYXlDb3VudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRyYWNrQXJyYXlDb3VudDtcclxuXHR9XHJcblxyXG5cdHN2Yy5nZXRUcmFja0lkQXJyYXkgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0cmFja0lkQXJyYXk7XHJcblx0fVxyXG5cclxuXHJcblx0c3ZjLmFkZFRvVHJhY2tBcnJheSA9IGZ1bmN0aW9uKHRyYWNrKSB7XHJcblx0XHR0cmFja0FycmF5LnB1c2godHJhY2spO1xyXG5cdFx0aW5jcmVtZW50VHJhY2tBcnJheUNvdW50KCk7XHJcblx0XHRhZGRUb1RyYWNrSWRBcnJheSh0cmFjay5pZCk7XHJcblx0XHRyZXR1cm4gdHJhY2tBcnJheTtcclxuXHR9XHJcblxyXG5cdHN2Yy5yZW1vdmVGcm9tVHJhY2tBcnJheSA9IGZ1bmN0aW9uKHRyYWNrKSB7XHJcblx0XHRpbmRleCA9IHRyYWNrLmFycmF5T2JqZWN0SW5kZXhPZih0cmFja0FycmF5LCB0cmFjay5pZCwgXCJpZFwiKTtcclxuXHRcdGlmKGluZGV4ID4gLTEpIHtcclxuXHRcdFx0dHJhY2tBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRkZWNyZW1lbnRUcmFja0FycmF5Q291bnQoKTtcclxuXHRcdHJlbW92ZUZyb21UcmFja0lkQXJyYXkodHJhY2suaWQpO1xyXG5cdFx0cmV0dXJuIHRyYWNrQXJyYXk7XHJcblx0fVxyXG5cclxuXHRzdmMuZ2V0VHJhY2tBcnJheSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRyYWNrQXJyYXk7XHJcblx0fVxyXG5cclxuXHRcclxuXHJcblxyXG5cclxuXHJcblx0c3ZjLnRlc3RGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0YWxlcnQoXCJUZXN0IGZ1bmN0aW9uIGNhbGxlZCBmcm9tIGluc2lkZSBzZXJ2aWNlIVwiKTtcclxuXHR9XHJcbn0pIiwiYXBwLnNlcnZpY2UoXCJmaWx0ZXJTZXJ2aWNlXCIsIGZ1bmN0aW9uKGluc3RydW1lbnRTZXJ2aWNlKSB7XHJcblx0XHJcblx0dmFyIHN2YyA9IHRoaXM7XHJcblx0dmFyIGluc3RTdmMgPSBpbnN0cnVtZW50U2VydmljZTtcclxuXHJcblxyXG5cdHN2Yy5jcmVhdGVTb2xvRmlsdGVyRGF0YSA9IGZ1bmN0aW9uKClcclxuXHR7XHJcblx0XHRzdmMuc29sb0ZpbHRlckRhdGEgPSB7XHRcImFydGlzdFwiOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XCJ0aXRsZVwiOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0fTtcclxuXHJcblx0XHRhbmd1bGFyLmZvckVhY2goaW5zdFN2Yy5pbnN0cnVtZW50cywgZnVuY3Rpb24odmFsdWUsIGtleSlcclxuXHRcdHtcclxuXHRcdFx0c3ZjLnNvbG9GaWx0ZXJEYXRhW3ZhbHVlLmlkXSA9IHRydWU7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHN2Yy5jcmVhdGVNZXJnZWRGaWx0ZXJEYXRhID0gZnVuY3Rpb24oKVxyXG5cdHtcclxuXHRcdHN2Yy5tZXJnZWRGaWx0ZXJEYXRhID0ge1x0XCJhcnRpc3RcIjogXCJcIixcclxuXHRcdFx0XHRcdFx0XHRcdFx0XCJ0aXRsZVwiOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHRzdmMuY3JlYXRlU29sb0ZpbHRlckRhdGEoKTtcclxuXHRcdHN2Yy5jcmVhdGVNZXJnZWRGaWx0ZXJEYXRhKCk7XHJcblx0fVxyXG5cclxuXHRfaW5pdCgpO1xyXG59KSIsImFwcC5zZXJ2aWNlKFwiaW5zdHJ1bWVudFNlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuXHRcclxuXHQvL0dsb2JhbHNcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGdldERhdGEgKHVybCwgb3B0aW9ucykge1xyXG5cclxuXHRcdCFvcHRpb25zID8gb3B0aW9ucyA9IHt9IDogXCJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCwgb3B0aW9ucylcclxuXHR9XHJcblxyXG5cdC8vU3ZjIGZ1bmN0aW9uc1xyXG5cdHN2Yy5nZXRJbnN0cnVtZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgdXJsID0gQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL2luc3RydW1lbnRzXCI7XHJcblx0XHRcclxuXHRcdHJldHVybiBnZXREYXRhKHVybCk7XHJcblx0fVxyXG5cclxuXHRzdmMuaW5zdHJ1bWVudHMgPSBbe1xyXG5cdFx0XHRcdFx0XHRcdFwibmFtZVwiOlwiTGVhZC1ndWl0YXJcIixcclxuXHRcdFx0XHRcdFx0XHRcImlkXCI6MVxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6XCJEcnVtXCIsXHJcblx0XHRcdFx0XHRcdFx0XCJpZFwiOjJcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFwibmFtZVwiOlwiQmFzc1wiLFxyXG5cdFx0XHRcdFx0XHRcdFwiaWRcIjozXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcIm5hbWVcIjpcIktleXNcIixcclxuXHRcdFx0XHRcdFx0XHRcImlkXCI6NFxyXG5cdFx0XHRcdFx0XHR9XTtcclxufSkiLCJhcHAuc2VydmljZShcIm1lcmdlZFNlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuXHRcclxuXHQvL0dsb2JhbHNcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGdldERhdGEgKHVybCwgb3B0aW9ucykge1xyXG5cclxuXHRcdCFvcHRpb25zID8gb3B0aW9ucyA9IHt9IDogXCJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCwgb3B0aW9ucylcclxuXHR9XHJcblxyXG5cdC8vU3ZjIGZ1bmN0aW9uc1xyXG5cdHN2Yy5nZXRUcmFja3MgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIHVybCA9IENPTlNUQU5UUy5BUElfQkFTRV9VUkwgKyBcIi9tZXJnZWR0cmFja3NcIjtcclxuXHRcdFxyXG5cdFx0cmV0dXJuIGdldERhdGEodXJsKTtcclxuXHR9XHJcblxyXG5cdHN2Yy5nZXRUcmFja0J5SWQgPSBmdW5jdGlvbiAoaWQpIHtcclxuXHJcblx0XHR2YXIgdXJsID0gQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL21lcmdlZHRyYWNrcy9cIiArIGlkO1xyXG5cclxuXHRcdHJldHVybiBnZXREYXRhKHVybCk7XHJcblx0fVxyXG59KSIsImFwcC5zZXJ2aWNlKFwic29sb1NlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuXHRcclxuXHQvL0dsb2JhbHNcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGdldERhdGEgKHVybCwgb3B0aW9ucykge1xyXG5cclxuXHRcdCFvcHRpb25zID8gb3B0aW9ucyA9IHt9IDogXCJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCwgb3B0aW9ucylcclxuXHR9XHJcblxyXG5cdC8vU3ZjIGZ1bmN0aW9uc1xyXG5cdHN2Yy5nZXRUcmFja3MgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIHVybCA9IENPTlNUQU5UUy5BUElfQkFTRV9VUkwgKyBcIi90cmFja3NcIjtcclxuXHRcdFxyXG5cdFx0cmV0dXJuIGdldERhdGEodXJsKTtcclxuXHR9XHJcblxyXG5cdHN2Yy5nZXRUcmFja0J5SWQgPSBmdW5jdGlvbiAoaWQpIHtcclxuXHJcblx0XHR2YXIgdXJsID0gQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL3RyYWNrcy9cIiArIGlkO1xyXG5cclxuXHRcdHJldHVybiBnZXREYXRhKHVybCk7XHJcblx0fVxyXG5cclxuXHRzdmMuaW5zZXJ0VHJhY2sgPSBmdW5jdGlvbihkYXRhKVxyXG5cdHtcclxuXHRcdHJldHVybiAkaHR0cC5wb3N0KENPTlNUQU5UUy5BUElfQkFTRV9VUkwgKyBcIi90cmFja3MvY3JlYXRlXCIsIGRhdGEpO1xyXG5cdH1cclxufSkiLCJhcHAuc2VydmljZShcInVzZXJTZXJ2aWNlXCIsIGZ1bmN0aW9uKCRodHRwKSB7XHRcclxuXHRcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpXHJcblx0e1xyXG5cdFx0cmV0dXJuICRodHRwLmdldChDT05TVEFOVFMuQVBJX0JBU0VfVVJMICsgXCIvdXNlclwiKTtcclxuXHR9XHJcblxyXG5cdHN2Yy51cGRhdGVVc2VyID0gZnVuY3Rpb24oZGF0YSlcclxuXHR7XHJcblx0XHRyZXR1cm4gJGh0dHAucG9zdChDT05TVEFOVFMuQVBJX0JBU0VfVVJMICsgXCIvdXNlclwiLCBkYXRhKTtcclxuXHR9XHJcbn0pIiwiYXBwLmRpcmVjdGl2ZShcImRjYkJhbmRcIiwgZnVuY3Rpb24oYmFuZFNlcnZpY2UpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0cmVzdHJpY3Q6IFwiRVwiLFxyXG5cdFx0dGVtcGxhdGVVcmw6IFwiYXBwL2RpcmVjdGl2ZXMvZGNiLWJhbmQvZGNiLWJhbmQuaHRtbFwiLFxyXG5cdFx0cmVwbGFjZTogdHJ1ZSxcclxuXHRcdHNjb3BlOiB7fSxcclxuXHRcdGNvbnRyb2xsZXJBczogXCJiYW5kXCIsXHJcblx0XHRjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHZtID0gdGhpcztcclxuXHRcdFx0dmFyIGJhbmRTdmMgPSBiYW5kU2VydmljZTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIF9pbml0KCkge1xyXG5cdFx0XHRcdHZtLnZhbHVlID0gXCJOZXdCYW5kXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdF9pbml0KCk7XHJcblx0XHR9XHJcblx0fVxyXG59KSIsImFwcC5kaXJlY3RpdmUoXCJkY2JIZWFkZXJcIiwgZnVuY3Rpb24oYmFuZFNlcnZpY2UpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0cmVzdHJpY3Q6IFwiRVwiLFxyXG5cdFx0dGVtcGxhdGVVcmw6IFwiYXBwL2RpcmVjdGl2ZXMvZGNiLWhlYWRlci9kY2ItaGVhZGVyLmh0bWxcIixcclxuXHRcdHJlcGxhY2U6IHRydWUsXHJcblx0XHRzY29wZToge30sXHJcblx0XHRjb250cm9sbGVyQXM6IFwiaGVhZFwiLFxyXG5cdFx0Y29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCB1c2VyU2VydmljZSwgYXV0aFNlcnZpY2UsICRhdXRoLCAkcm9vdFNjb3BlKSB7XHJcblx0XHRcdFxyXG5cdFx0XHR2YXIgdm0gXHRcdFx0PSB0aGlzO1xyXG5cdFx0XHR2YXIgdXNlclN2YyBcdD0gdXNlclNlcnZpY2U7XHJcblx0XHRcdHZhciBhdXRoU3ZjIFx0PSBhdXRoU2VydmljZTtcclxuXHRcdFx0dmFyIGJhbmRTdmMgXHQ9IGJhbmRTZXJ2aWNlO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHRcdFx0dm0udHJhY2tBcnJheSA9IGJhbmRTdmMuZ2V0VHJhY2tBcnJheTtcclxuXHRcdFx0XHR2bS50cmFja0FycmF5Q291bnQgPSBiYW5kU3ZjLmdldFRyYWNrQXJyYXlDb3VudDtcclxuXHJcblx0XHRcdFx0aWYoJGF1dGguaXNBdXRoZW50aWNhdGVkKCkpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dXNlclN2Yy5nZXRVc2VyKCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0XHRcdFx0XHQkcm9vdFNjb3BlLnVzZXJuYW1lID0gZGF0YS5kYXRhLnVzZXJuYW1lO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2bS5zaG93TG9naW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0JCgnI2xvZ2luX21vZGFsJykubW9kYWwoKTtcclxuXHRcdFx0XHQkKCcjbG9naW5fbW9kYWwnKS5tb2RhbCgnb3BlbicpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2bS5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0YXV0aFN2Yy5sb2dvdXQoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dm0uc2hvd1JlZ2lzdGVyID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdCQoJyNyZWdpc3Rlcl9tb2RhbCcpLm1vZGFsKCk7XHJcblx0XHRcdFx0JCgnI3JlZ2lzdGVyX21vZGFsJykubW9kYWwoJ29wZW4nKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dm0uaXNBdXRoZW50aWNhdGVkID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICRhdXRoLmlzQXV0aGVudGljYXRlZCgpO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0X2luaXQoKTtcclxuXHJcblx0XHRcdC8vV2F0Y2hlc1xyXG5cdFx0XHQkc2NvcGUuJHdhdGNoKFxyXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhTdmMudXNlciB9LCBcclxuXHRcdFx0XHRmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRcdFx0dm0udXNlciA9IGF1dGhTdmMudXNlcjtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2codm0udXNlcik7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSIsImFwcC5kaXJlY3RpdmUoXCJkY2JMb2dpblwiLCBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0cmVzdHJpY3Q6IFwiRVwiLFxyXG5cdFx0dGVtcGxhdGVVcmw6IFwiYXBwL2RpcmVjdGl2ZXMvZGNiLWxvZ2luL2RjYi1sb2dpbi5odG1sXCIsXHJcblx0XHRyZXBsYWNlOiB0cnVlLFxyXG5cdFx0c2NvcGU6IHt9LFxyXG5cdFx0Y29udHJvbGxlckFzOiBcImxvZ2luXCIsXHJcblx0XHRjb250cm9sbGVyOiBmdW5jdGlvbigkYXV0aCwgJHNjb3BlLCAkcm9vdFNjb3BlLCB1c2VyU2VydmljZSwgYXV0aFNlcnZpY2UsICRjb29raWVzKSB7XHJcblx0XHRcdHZhciB2bSBcdFx0XHQ9IHRoaXM7XHJcblx0XHRcdHZhciB1c2VyU3ZjIFx0PSB1c2VyU2VydmljZTtcclxuXHRcdFx0dmFyIGF1dGhTdmMgXHQ9IGF1dGhTZXJ2aWNlO1xyXG5cdFx0XHR2YXIgdGFyZ2V0IFx0XHQ9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2dpbi1zcGlubmVyJyk7XHJcblxyXG5cdFx0XHR2YXIgb3B0cyA9IHtcclxuXHQgIFx0XHRcdGxpbmVzOiAxMyAvLyBUaGUgbnVtYmVyIG9mIGxpbmVzIHRvIGRyYXdcclxuXHRcdFx0XHQsIGxlbmd0aDogMjggLy8gVGhlIGxlbmd0aCBvZiBlYWNoIGxpbmVcclxuXHRcdFx0XHQsIHdpZHRoOiAxNCAvLyBUaGUgbGluZSB0aGlja25lc3NcclxuXHRcdFx0XHQsIHJhZGl1czogNDIgLy8gVGhlIHJhZGl1cyBvZiB0aGUgaW5uZXIgY2lyY2xlXHJcblx0XHRcdFx0LCBzY2FsZTogMC40IC8vIFNjYWxlcyBvdmVyYWxsIHNpemUgb2YgdGhlIHNwaW5uZXJcclxuXHRcdFx0XHQsIGNvcm5lcnM6IDEgLy8gQ29ybmVyIHJvdW5kbmVzcyAoMC4uMSlcclxuXHRcdFx0XHQsIGNvbG9yOiAnIzAwMCcgLy8gI3JnYiBvciAjcnJnZ2JiIG9yIGFycmF5IG9mIGNvbG9yc1xyXG5cdFx0XHRcdCwgb3BhY2l0eTogMC4yNSAvLyBPcGFjaXR5IG9mIHRoZSBsaW5lc1xyXG5cdFx0XHRcdCwgcm90YXRlOiAwIC8vIFRoZSByb3RhdGlvbiBvZmZzZXRcclxuXHRcdFx0XHQsIGRpcmVjdGlvbjogMSAvLyAxOiBjbG9ja3dpc2UsIC0xOiBjb3VudGVyY2xvY2t3aXNlXHJcblx0XHRcdFx0LCBzcGVlZDogMSAvLyBSb3VuZHMgcGVyIHNlY29uZFxyXG5cdFx0XHRcdCwgdHJhaWw6IDYwIC8vIEFmdGVyZ2xvdyBwZXJjZW50YWdlXHJcblx0XHRcdFx0LCBmcHM6IDIwIC8vIEZyYW1lcyBwZXIgc2Vjb25kIHdoZW4gdXNpbmcgc2V0VGltZW91dCgpIGFzIGEgZmFsbGJhY2sgZm9yIENTU1xyXG5cdFx0XHRcdCwgekluZGV4OiAyZTkgLy8gVGhlIHotaW5kZXggKGRlZmF1bHRzIHRvIDIwMDAwMDAwMDApXHJcblx0XHRcdFx0LCBjbGFzc05hbWU6ICdzcGlubmVyJyAvLyBUaGUgQ1NTIGNsYXNzIHRvIGFzc2lnbiB0byB0aGUgc3Bpbm5lclxyXG5cdFx0XHRcdCwgdG9wOiAnNjAlJyAvLyBUb3AgcG9zaXRpb24gcmVsYXRpdmUgdG8gcGFyZW50XHJcblx0XHRcdFx0LCBsZWZ0OiAnNTAlJyAvLyBMZWZ0IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHBhcmVudFxyXG5cdFx0XHRcdCwgc2hhZG93OiBmYWxzZSAvLyBXaGV0aGVyIHRvIHJlbmRlciBhIHNoYWRvd1xyXG5cdFx0XHRcdCwgaHdhY2NlbDogZmFsc2UgLy8gV2hldGhlciB0byB1c2UgaGFyZHdhcmUgYWNjZWxlcmF0aW9uXHJcblx0XHRcdFx0LCBwb3NpdGlvbjogJ2Fic29sdXRlJyAvLyBFbGVtZW50IHBvc2l0aW9uaW5nXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHRcdFx0ZnVuY3Rpb24gbG9naW4gKHRva2VuLCBpZCwgdXNlcm5hbWUsIGVtYWlsKSB7XHJcblxyXG5cdFx0XHRcdHZhciBleHBpcmF0aW9uVGltZSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0ZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZS5zZXRUaW1lKGV4cGlyYXRpb25UaW1lLmdldFRpbWUoKSArICh0b2tlbltcImV4cGlyZXNfaW5cIl0gKiAxMDAwKSk7XHJcblx0XHRcdFx0ZXhwaXJhdGlvblRpbWUgPSBuZXcgRGF0ZShleHBpcmF0aW9uVGltZSk7XHJcblxyXG5cdFx0XHRcdHZhciB1c2VyRGF0YSA9IHtcclxuXHJcblx0XHRcdFx0XHR0b2tlbjogdG9rZW4sXHJcblx0XHRcdFx0XHR1c2VySWQ6IGlkLFxyXG5cdFx0XHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLFxyXG5cdFx0XHRcdFx0ZW1haWw6IGVtYWlsLFxyXG5cdFx0XHRcdFx0Ly9pc0FkbWluOiBkYXRhLmRhdGEuaXNBZG1pblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y29uc29sZS5sb2codXNlckRhdGEudG9rZW4pO1xyXG5cclxuXHRcdFx0XHRhdXRoU3ZjLnVzZXIgPSB1c2VyRGF0YTtcclxuXHJcblx0XHRcdFx0JGNvb2tpZXMucHV0T2JqZWN0KFwidXNlclwiLCB1c2VyRGF0YSwgeyBleHBpcmVzOiBleHBpcmF0aW9uVGltZSB9KTtcclxuXHRcdFx0XHQkcm9vdFNjb3BlLmlzTG9nZ2VkSW4gPSB0cnVlO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8vQ2hlY2sgaWYgcmV0dXJuZWQgdXNlciBpcyBBZG1pblxyXG5cdFx0XHRcdHVzZXJEYXRhLmlzQWRtaW4gPT0gXCIxXCIgPyAkcm9vdFNjb3BlLmlzQWRtaW4gPSB0cnVlIDogJHJvb3RTY29wZS5pc0FkbWluID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHQvL1ZtIGZ1bmN0aW9uc1xyXG5cdCAgICAgICAgdm0ubG9naW4gPSBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgIFx0dmFyIHNwaW5uZXIgPSBuZXcgU3Bpbm5lcihvcHRzKS5zcGluKHRhcmdldCk7XHJcblx0ICAgICAgICBcdHZtLmxvYWRpbmcgXHQ9IHRydWU7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBjcmVkZW50aWFscyA9IHtcclxuXHQgICAgICAgICAgICAgICAgZW1haWw6IHZtLmVtYWlsLFxyXG5cdCAgICAgICAgICAgICAgICBwYXNzd29yZDogdm0ucGFzc3dvcmRcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgXHJcblx0ICAgICAgICAgICAgYXV0aFN2Yy5sb2dpbihjcmVkZW50aWFscyk7XHJcblxyXG5cdCAgICAgICAgICAgIC8vV2F0Y2hlc1xyXG5cdFx0XHRcdHZhciB1bnJlZ2lzdGVyID0gJHNjb3BlLiR3YXRjaChcclxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhTdmMuaXNMb2dnZWRJbiB9LCBcclxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmKGF1dGhTdmMuaXNMb2dnZWRJbikgXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHR2bS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdFx0ICAgICAgICBcdCQoJyNsb2dpbl9tb2RhbCcpLm1vZGFsKCk7XHJcblx0XHRcdFx0XHRcdFx0JCgnI2xvZ2luX21vZGFsJykubW9kYWwoJ2Nsb3NlJyk7XHJcblx0XHRcdFx0ICAgICAgICBcdHNwaW5uZXIuc3RvcCgpO1xyXG5cdFx0XHRcdCAgICAgICAgXHR1bnJlZ2lzdGVyKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYoYXV0aFN2Yy5pc0xvZ2dlZEluID09PSBmYWxzZSlcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHNwaW5uZXIuc3RvcCgpO1xyXG4gICAgICAgIFx0XHRcdFx0XHR2bS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgXHRcdFx0XHRcdHVucmVnaXN0ZXIoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSwgdHJ1ZSk7XHJcblx0ICAgICAgICB9XHJcblx0XHR9XHJcblx0fVxyXG59KSIsImFwcC5kaXJlY3RpdmUoXCJkY2JSZWdpc3RlclwiLCBmdW5jdGlvbih1c2VyU2VydmljZSkge1xyXG5cdHJldHVybiB7XHJcblx0XHRyZXN0cmljdDogXCJFXCIsXHJcblx0XHR0ZW1wbGF0ZVVybDogXCJhcHAvZGlyZWN0aXZlcy9kY2ItcmVnaXN0ZXIvZGNiLXJlZ2lzdGVyLmh0bWxcIixcclxuXHRcdHJlcGxhY2U6IHRydWUsXHJcblx0XHRzY29wZToge30sXHJcblx0XHRjb250cm9sbGVyQXM6IFwicmVnaXN0ZXJcIixcclxuXHRcdGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRhdXRoLCAkc2NvcGUsICRyb290U2NvcGUsIHVzZXJTZXJ2aWNlLCBhdXRoU2VydmljZSkge1xyXG5cdFx0XHR2YXIgdm0gXHRcdFx0PSB0aGlzO1xyXG5cdFx0XHR2YXIgdXNlclN2YyBcdD0gdXNlclNlcnZpY2U7XHJcblx0XHRcdHZhciBhdXRoU3ZjIFx0PSBhdXRoU2VydmljZTtcclxuXHRcdFx0dmFyIHRhcmdldCBcdFx0PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVnaXN0ZXItc3Bpbm5lcicpO1xyXG5cclxuXHRcdFx0dmFyIG9wdHMgPSB7XHJcblx0ICBcdFx0XHRsaW5lczogMTMgLy8gVGhlIG51bWJlciBvZiBsaW5lcyB0byBkcmF3XHJcblx0XHRcdFx0LCBsZW5ndGg6IDI4IC8vIFRoZSBsZW5ndGggb2YgZWFjaCBsaW5lXHJcblx0XHRcdFx0LCB3aWR0aDogMTQgLy8gVGhlIGxpbmUgdGhpY2tuZXNzXHJcblx0XHRcdFx0LCByYWRpdXM6IDQyIC8vIFRoZSByYWRpdXMgb2YgdGhlIGlubmVyIGNpcmNsZVxyXG5cdFx0XHRcdCwgc2NhbGU6IDAuNCAvLyBTY2FsZXMgb3ZlcmFsbCBzaXplIG9mIHRoZSBzcGlubmVyXHJcblx0XHRcdFx0LCBjb3JuZXJzOiAxIC8vIENvcm5lciByb3VuZG5lc3MgKDAuLjEpXHJcblx0XHRcdFx0LCBjb2xvcjogJyMwMDAnIC8vICNyZ2Igb3IgI3JyZ2diYiBvciBhcnJheSBvZiBjb2xvcnNcclxuXHRcdFx0XHQsIG9wYWNpdHk6IDAuMjUgLy8gT3BhY2l0eSBvZiB0aGUgbGluZXNcclxuXHRcdFx0XHQsIHJvdGF0ZTogMCAvLyBUaGUgcm90YXRpb24gb2Zmc2V0XHJcblx0XHRcdFx0LCBkaXJlY3Rpb246IDEgLy8gMTogY2xvY2t3aXNlLCAtMTogY291bnRlcmNsb2Nrd2lzZVxyXG5cdFx0XHRcdCwgc3BlZWQ6IDEgLy8gUm91bmRzIHBlciBzZWNvbmRcclxuXHRcdFx0XHQsIHRyYWlsOiA2MCAvLyBBZnRlcmdsb3cgcGVyY2VudGFnZVxyXG5cdFx0XHRcdCwgZnBzOiAyMCAvLyBGcmFtZXMgcGVyIHNlY29uZCB3aGVuIHVzaW5nIHNldFRpbWVvdXQoKSBhcyBhIGZhbGxiYWNrIGZvciBDU1NcclxuXHRcdFx0XHQsIHpJbmRleDogMmU5IC8vIFRoZSB6LWluZGV4IChkZWZhdWx0cyB0byAyMDAwMDAwMDAwKVxyXG5cdFx0XHRcdCwgY2xhc3NOYW1lOiAnc3Bpbm5lcicgLy8gVGhlIENTUyBjbGFzcyB0byBhc3NpZ24gdG8gdGhlIHNwaW5uZXJcclxuXHRcdFx0XHQsIHRvcDogJzYwJScgLy8gVG9wIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHBhcmVudFxyXG5cdFx0XHRcdCwgbGVmdDogJzUwJScgLy8gTGVmdCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuXHRcdFx0XHQsIHNoYWRvdzogZmFsc2UgLy8gV2hldGhlciB0byByZW5kZXIgYSBzaGFkb3dcclxuXHRcdFx0XHQsIGh3YWNjZWw6IGZhbHNlIC8vIFdoZXRoZXIgdG8gdXNlIGhhcmR3YXJlIGFjY2VsZXJhdGlvblxyXG5cdFx0XHRcdCwgcG9zaXRpb246ICdhYnNvbHV0ZScgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0XHJcblx0XHRcdHZtLnJlZ2lzdGVyID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHNwaW5uZXIgPSBuZXcgU3Bpbm5lcihvcHRzKS5zcGluKHRhcmdldCk7XHJcblx0ICAgICAgICBcdHZtLmxvYWRpbmcgXHQ9IHRydWU7XHJcblxyXG5cdFx0XHRcdHZhciB1c2VyID0ge1xyXG5cdFx0XHRcdCAgXHR1c2VybmFtZTogdm0udXNlcm5hbWUsXHJcblx0XHRcdFx0ICBcdGVtYWlsOiB2bS5lbWFpbCxcclxuXHRcdFx0XHQgIFx0cGFzc3dvcmQ6IHZtLnBhc3N3b3JkXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0JGF1dGguc2lnbnVwKHVzZXIpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdC8vIFJlZ2lzdHJhdGlvbiBzdWNjZXNzXHJcblx0XHRcdFx0XHRhdXRoU3ZjLmxvZ2luKHVzZXIpO1xyXG5cclxuXHRcdCAgICAgICAgICAgIC8vV2F0Y2hlc1xyXG5cdFx0XHRcdFx0dmFyIHVucmVnaXN0ZXIgPSAkc2NvcGUuJHdhdGNoKFxyXG5cdFx0XHRcdFx0XHRmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoU3ZjLmlzTG9nZ2VkSW4gfSwgXHJcblx0XHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYoYXV0aFN2Yy5pc0xvZ2dlZEluKSBcclxuXHRcdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0XHR2bS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdFx0XHQgICAgICAgIFx0JCgnI3JlZ2lzdGVyX21vZGFsJykubW9kYWwoKTtcclxuXHRcdFx0XHRcdFx0XHRcdCQoJyNyZWdpc3Rlcl9tb2RhbCcpLm1vZGFsKCdjbG9zZScpO1xyXG5cdFx0XHRcdFx0ICAgICAgICBcdHNwaW5uZXIuc3RvcCgpO1xyXG5cdFx0XHRcdFx0ICAgICAgICBcdHVucmVnaXN0ZXIoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0aWYoYXV0aFN2Yy5pc0xvZ2dlZEluID09PSBmYWxzZSlcclxuXHRcdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0XHRzcGlubmVyLnN0b3AoKTtcclxuXHQgICAgICAgIFx0XHRcdFx0XHR2bS5sb2FkaW5nID0gZmFsc2U7XHJcblx0ICAgICAgICBcdFx0XHRcdFx0dW5yZWdpc3RlcigpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSwgdHJ1ZSk7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdC8vIFJlZ2lzdHJhdGlvbiBmYWlsZWRcclxuXHRcdFx0XHQgIFx0c3Bpbm5lci5zdG9wKCk7XHJcblx0XHRcdFx0ICBcdHZtLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHQgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSJdfQ==
