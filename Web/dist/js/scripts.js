var app=angular.module("app",["ui.router","satellizer","ngCookies","ngFileUpload"]),CONSTANTS=function(){var e={};return e.API_BASE_URL="http://discoverbandapi.int/public/api",e}();app.config(["$stateProvider","$urlRouterProvider","$authProvider",function(e,r,t){t.loginUrl=CONSTANTS.API_BASE_URL+"/login",t.signupUrl=CONSTANTS.API_BASE_URL+"/register",r.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/pages/home.html",controller:"homeController as home"}).state("solo",{url:"/solo",templateUrl:"app/pages/solo.html",controller:"soloController as solo"}).state("merged",{url:"/merged",templateUrl:"app/pages/merged.html",controller:"mergedController as merged"}).state("band",{url:"/band",templateUrl:"app/pages/band.html",controller:"bandController as band"}).state("merge",{url:"/merge",templateUrl:"app/pages/merge.html",controller:"mergeController as merge"}).state("profile",{url:"/profile",templateUrl:"app/pages/profile.html",controller:"profileController as profile"}).state("upload",{url:"/upload",templateUrl:"app/pages/upload.html",controller:"uploadController as upload"})}]),app.controller("bandController",["bandService",function(e){function r(){t.trackArray=n.getTrackArray}var t=this,n=e;r()}]),app.controller("homeController",["instrumentService","filterService",function(e,r){function t(){n.filterData=a.soloFilterData}var n=this,a=r;t()}]),app.controller("mergeController",["bandService","mergedService",function(e,r){function t(){n.tracks=a.getTrackArray(),n.showTracks=!1,n.thereAreTracks=!1,n.loadedTracks=[],n.savedTime=[],n.tracks.length>0&&(n.thereAreTracks=!0)}var n=this,a=e,o=r,i=[];n.load=function(){if(n.thereAreTracks){for(var e=n.tracks.length-1;e>=0;e--){var r=n.tracks[e].id;document.getElementById(r).checked&&(i[r]=WaveSurfer.create({container:"#waveform"+r,waveColor:"green",progressColor:"purple"}),i[r].load("http://discoverbandapi.int/public/api/audio/"+n.tracks[e].file_url),n.loadedTracks.push({track_id:r,trim_amount:0}))}n.showTracks=!0}},n.playPause=function(e){i[e].isPlaying()||(n.savedTime[e]=i[e].getCurrentTime(),console.log(n.savedTime)),i[e].playPause(),i[e].zoom(50)},n.trim=function(e){for(var r=i[e].getCurrentTime(),t=n.loadedTracks.length-1;t>=0;t--)n.loadedTracks[t].track_id===e&&(n.loadedTracks[t].trim_amount=r)},n.playPauseAll=function(){for(var e=n.loadedTracks.length-1;e>=0;e--){var r=n.loadedTracks[e].track_id;i[r].isPlaying()||(n.savedTime[r]=i[r].getCurrentTime(),console.log(n.savedTime)),i[r].playPause(),i[r].zoom(50)}},n.toPrevious=function(){for(var e=n.loadedTracks.length-1;e>=0;e--){var r=n.loadedTracks[e].track_id,t=n.savedTime[r],a=i[r].getDuration(),o=t/a;i[r].seekTo(o)}},n.save=function(){o.mergeTracks(n.loadedTracks).then(function(e){console.log(e)},function(e){console.log(e)})},t()}]),app.controller("mergedController",["$scope","mergedService","filterService",function(e,r,t){function n(){r.getTracks().then(function(e){i.mergedTracks=e.data,i.filteredTracks=i.mergedTracks,a(),angular.forEach(i.mergedTracks,function(e,r){newTrack=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),i.mergedTrackAudio[e.id]=newTrack})},function(e){console.log(e)})}function a(){i.filteredTracks=[],angular.forEach(i.mergedTracks,function(e,r){goodSearch=!0,""!=!i.filterData.artist||e.artist.name.match(new RegExp(i.filterData.artist,"i"))||(goodSearch=!1),""!=!i.filterData.title||e.songname.match(new RegExp(i.filterData.title,"i"))||(goodSearch=!1),goodSearch&&i.filteredTracks.push(e)})}function o(){i.mergedTrackAudio=[],i.currentAudioTrackId="",n(),i.filterData=c.mergedFilterData}var i=this,c=t;i.play=function(e){""!=i.currentAudioTrackId&&i.pause(i.currentAudioTrackId),i.currentAudioTrackId=e,i.mergedTrackAudio[e].play()},i.pause=function(e){i.mergedTrackAudio[e].pause(),i.currentAudioTrackId=""},e.$watch(function(){return i.filterData},function(){i.filterData&&a()},!0),i.track1=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),i.track2=new Audio("dist/audio/Behemoth - Conquer All - Guitar.mp3"),o()}]),app.controller("profileController",["userService",function(e){function r(){n.getUser().then(function(e){t.username=e.data.username,t.email=e.data.email})}var t=this,n=e,a=document.getElementById("update-profile-spinner"),o={lines:13,length:28,width:12,radius:42,scale:.15,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"89%",left:"25.5%",shadow:!1,hwaccel:!1,position:"absolute"};t.update=function(){var e=new Spinner(o).spin(a);t.loading=!0;var r={username:t.username,email:t.email};n.updateUser(r).then(function(r){e.stop(),t.loading=!1},function(r){e.stop(),t.loading=!1})},r()}]),app.controller("soloController",["$scope","bandService","soloService","instrumentService","filterService",function(e,r,t,n,a){function o(){u.getTracks().then(function(e){s.soloTracks=e.data,s.filteredTracks=s.soloTracks,i(),angular.forEach(s.soloTracks,function(e,r){newTrack=new Audio("http://discoverbandapi.int/public/audio/"+e.file_url),s.soloTrackAudio[e.id]=newTrack})},function(e){console.log(e)})}function i(){s.filteredTracks=[],angular.forEach(s.soloTracks,function(e,r){goodSearch=!0,""!=!s.filterData.artist||e.artist.name.match(new RegExp(s.filterData.artist,"i"))||(goodSearch=!1),""!=!s.filterData.title||e.songname.match(new RegExp(s.filterData.title,"i"))||(goodSearch=!1),s.filterData[e.instrument_id]||(goodSearch=!1),goodSearch&&s.filteredTracks.push(e)})}function c(){s.soloTrackAudio=[],s.currentAudioTrackId="",o(),s.instruments=d.instruments,s.filterData=p.soloFilterData,s.trackArray=l.getTrackArray,s.bandTrackIdArray=l.getTrackIdArray,s.trackArrayCount=l.getTrackArrayCount}var s=this,l=r,u=t,d=n,p=a;s.addToBand=function(e){l.addToTrackArray(e),console.log(e)},s.removeFromBand=function(e){l.removeFromTrackArray(e),console.log("Track removed from new band: "+e)},s.play=function(e){""!=s.currentAudioTrackId&&s.pause(s.currentAudioTrackId),s.currentAudioTrackId=e,s.soloTrackAudio[e].play()},s.pause=function(e){s.soloTrackAudio[e].pause(),s.currentAudioTrackId=""},e.$watch(function(){return s.filterData},function(){s.filterData&&i()},!0),c()}]),app.controller("uploadController",["Upload","artistService","instrumentService","soloService",function(e,r,t,n){function a(){i.uploaded=!1,i.showform=!1,i.instruments=l.getInstruments().then(function(e){i.instruments=e.data,console.log(e.data)},function(e){console.log(e)}),i.artists=s.getArtists().then(function(e){console.log(e.data),i.artists=e.data},function(e){console.log(e)})}function o(e){for(var r=e+"=",t=decodeURIComponent(document.cookie),n=t.split(";"),a=0;a<n.length;a++){for(var o=n[a];" "==o.charAt(0);)o=o.substring(1);if(0==o.indexOf(r))return o.substring(r.length,o.length)}return""}var i=this,c=n,s=r,l=t,u=document.getElementById("upload-spinner"),d={lines:13,length:28,width:12,radius:42,scale:.3,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"40%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};i.uploadFile=function(r){var t=new Spinner(d).spin(u);i.loading=!0,i.uploaded=!1,e.upload({url:CONSTANTS.API_BASE_URL+"/upload",fileFormDataName:"song",sendFieldsAs:"form",data:{song:r}}).then(function(e){i.filename=e.data.name,i.tracklength=e.data.length,t.stop(),i.loading=!1,i.uploaded=!0,i.showform=!0,$("select").material_select()},function(e){i.loading=!1,t.stop(),console.log("Error")})},i.save=function(){var e=JSON.parse(o("user")).userId,r={name:i.songname,file_url:i.filename,track_length:i.tracklength,user_id:e,instrument_id:i.instrumentsdropdown,artist_id:i.artistsdropdown};c.insertTrack(r).then(function(e){console.log(e)},function(e){console.log(e)})},a()}]),app.filter("band",function(){return function(e,r){var t=!1;return angular.forEach(r,function(r,n){r==e&&(t=!0)}),t}}),app.service("artistService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getArtists=function(){var e=CONSTANTS.API_BASE_URL+"/artists";return r(e)}}]),app.service("authService",["$auth","$rootScope","$cookies","$state","userService",function(e,r,t,n,a){function o(e,n,a,o){var c=new Date;c=c.setTime(c.getTime()+1e3*e.expires_in),c=new Date(c);var s={token:e,userId:n,username:a,email:o};i.user=s,t.putObject("user",s,{expires:c}),r.isLoggedIn=!0,"1"==s.isAdmin?r.isAdmin=!0:r.isAdmin=!1}var i=this,c=a;i.isLoggedIn=null,i.login=function(r){e.login(r).then(function(e){token=e.data.token,id=0,username="",email="",c.getUser().then(function(e){id=e.data.id,username=e.data.username,email=e.data.email,o(token,id,username,email),i.isLoggedIn=!0},function(e){console.log(e),i.isLoggedIn=!1})},function(e){console.log(e),i.isLoggedIn=!1})},i.logout=function(){e.logout().then(function(e){r.isLoggedIn=!1,r.isAdmin=!1,i.user=null,i.isLoggedIn=null,t.remove("user"),n.go("home")},function(e){console.log(e)})},i.register=function(e){var r=CONSTANTS.API_BASE_URL+"/user";return $http.post(r,e)}}]),app.service("bandService",function(){function e(){return trackArrayCount++,trackArrayCount}function r(){return trackArrayCount--,trackArrayCount}function t(e){return trackIdArray.push(e),trackIdArray}function n(e){return index=trackIdArray.indexOf(e),index>-1&&trackIdArray.splice(index,1),trackIdArray}var a=this;trackArray=[],trackIdArray=[],trackArrayCount=0,a.getTrackArrayCount=function(){return trackArrayCount},a.getTrackIdArray=function(){return trackIdArray},a.addToTrackArray=function(r){return trackArray.push(r),e(),t(r.id),trackArray},a.removeFromTrackArray=function(e){return index=e.arrayObjectIndexOf(trackArray,e.id,"id"),index>-1&&trackArray.splice(index,1),r(),n(e.id),trackArray},a.getTrackArray=function(){return trackArray},a.testFunction=function(){alert("Test function called from inside service!")}}),app.service("filterService",["instrumentService",function(e){function r(){t.createSoloFilterData(),t.createMergedFilterData()}var t=this,n=e;t.createSoloFilterData=function(){t.soloFilterData={artist:"",title:""},angular.forEach(n.instruments,function(e,r){t.soloFilterData[e.id]=!0})},t.createMergedFilterData=function(){t.mergedFilterData={artist:"",title:""}},r()}]),app.service("instrumentService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getInstruments=function(){var e=CONSTANTS.API_BASE_URL+"/instruments";return r(e)},t.instruments=[{name:"Lead-guitar",id:1},{name:"Drum",id:2},{name:"Bass",id:3},{name:"Keys",id:4}]}]),app.service("mergedService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/mergedtracks";return r(e)},t.getTrackById=function(e){var t=CONSTANTS.API_BASE_URL+"/mergedtracks/"+e;return r(t)},t.mergeTracks=function(r){return e.post(CONSTANTS.API_BASE_URL+"/mergedtracks/create",r)}}]),app.service("soloService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/tracks";return r(e)},t.getTrackById=function(e){var t=CONSTANTS.API_BASE_URL+"/tracks/"+e;return r(t)},t.insertTrack=function(r){return e.post(CONSTANTS.API_BASE_URL+"/tracks/create",r)}}]),app.service("userService",["$http",function(e){var r=this;r.getUser=function(){return e.get(CONSTANTS.API_BASE_URL+"/user")},r.updateUser=function(r){return e.post(CONSTANTS.API_BASE_URL+"/user",r)}}]),app.directive("dcbBand",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-band/dcb-band.html",replace:!0,scope:{},controllerAs:"band",controller:function(){function e(){r.value="NewBand"}var r=this;e()}}}]),app.directive("dcbHeader",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-header/dcb-header.html",replace:!0,scope:{},controllerAs:"head",controller:["$scope","userService","authService","$auth","$rootScope",function(r,t,n,a,o){function i(){c.trackArray=u.getTrackArray,c.trackArrayCount=u.getTrackArrayCount,a.isAuthenticated()&&s.getUser().then(function(e){o.username=e.data.username})}var c=this,s=t,l=n,u=e;c.showLogin=function(){$("#login_modal").modal(),$("#login_modal").modal("open")},c.logout=function(){l.logout()},c.showRegister=function(){$("#register_modal").modal(),$("#register_modal").modal("open")},c.isAuthenticated=function(){return a.isAuthenticated()},i(),r.$watch(function(){return l.user},function(){c.user=l.user})}]}}]),app.directive("dcbLogin",function(){return{restrict:"E",templateUrl:"app/directives/dcb-login/dcb-login.html",replace:!0,scope:{},controllerAs:"login",controller:["$auth","$scope","$rootScope","userService","authService","$cookies",function(e,r,t,n,a,o){var i=this,c=a,s=document.getElementById("login-spinner"),l={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};i.login=function(){var e=new Spinner(l).spin(s);i.loading=!0;var t={email:i.email,password:i.password};c.login(t);var n=r.$watch(function(){return c.isLoggedIn},function(){console.log("isLoggedIn: "+c.isLoggedIn),c.isLoggedIn&&(i.loading=!1,$("#login_modal").modal(),$("#login_modal").modal("close"),e.stop(),n()),c.isLoggedIn===!1&&(e.stop(),i.loading=!1,n())},!0)}}]}}),app.directive("dcbRegister",["userService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-register/dcb-register.html",replace:!0,scope:{},controllerAs:"register",controller:["$auth","$scope","$rootScope","userService","authService",function(e,r,t,n,a){var o=this,i=a,c=document.getElementById("register-spinner"),s={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};o.register=function(){var t=new Spinner(s).spin(c);o.loading=!0;var n={username:o.username,email:o.email,password:o.password};e.signup(n).then(function(e){i.login(n);var a=r.$watch(function(){return i.isLoggedIn},function(){i.isLoggedIn&&(o.loading=!1,$("#register_modal").modal(),$("#register_modal").modal("close"),t.stop(),a()),i.isLoggedIn===!1&&(t.stop(),o.loading=!1,a())},!0)})["catch"](function(e){t.stop(),o.loading=!1,console.log(e)})}}]}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbmZpZy5qcyIsInJvdXRlcy5qcyIsImJhbmRDb250cm9sbGVyLmpzIiwiaG9tZUNvbnRyb2xsZXIuanMiLCJtZXJnZUNvbnRyb2xsZXIuanMiLCJtZXJnZWRDb250cm9sbGVyLmpzIiwicHJvZmlsZUNvbnRyb2xsZXIuanMiLCJzb2xvQ29udHJvbGxlci5qcyIsInVwbG9hZENvbnRyb2xsZXIuanMiLCJiYW5kRmlsdGVyLmpzIiwiYXJ0aXN0U2VydmljZS5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiYmFuZFNlcnZpY2UuanMiLCJmaWx0ZXJTZXJ2aWNlLmpzIiwiaW5zdHJ1bWVudFNlcnZpY2UuanMiLCJtZXJnZWRTZXJ2aWNlLmpzIiwic29sb1NlcnZpY2UuanMiLCJ1c2VyU2VydmljZS5qcyIsImRjYi1iYW5kL2RjYi1iYW5kLmpzIiwiZGNiLWhlYWRlci9kY2ItaGVhZGVyLmpzIiwiZGNiLWxvZ2luL2RjYi1sb2dpbi5qcyIsImRjYi1yZWdpc3Rlci9kY2ItcmVnaXN0ZXIuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsIkNPTlNUQU5UUyIsIkFQSV9CQVNFX1VSTCIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGF1dGhQcm92aWRlciIsImxvZ2luVXJsIiwic2lnbnVwVXJsIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJiYW5kU2VydmljZSIsIl9pbml0Iiwidm0iLCJ0cmFja0FycmF5IiwiYmFuZFN2YyIsImdldFRyYWNrQXJyYXkiLCJ0aGlzIiwiaW5zdHJ1bWVudFNlcnZpY2UiLCJmaWx0ZXJTZXJ2aWNlIiwiZmlsdGVyRGF0YSIsImZsdFN2YyIsInNvbG9GaWx0ZXJEYXRhIiwibWVyZ2VkU2VydmljZSIsInRyYWNrcyIsInNob3dUcmFja3MiLCJ0aGVyZUFyZVRyYWNrcyIsImxvYWRlZFRyYWNrcyIsInNhdmVkVGltZSIsImxlbmd0aCIsIm1lcmdlZFN2YyIsIndhdmVzdXJmZXIiLCJsb2FkIiwiaSIsInRyYWNrX2lkIiwiaWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2hlY2tlZCIsIldhdmVTdXJmZXIiLCJjcmVhdGUiLCJjb250YWluZXIiLCJ3YXZlQ29sb3IiLCJwcm9ncmVzc0NvbG9yIiwiZmlsZV91cmwiLCJwdXNoIiwidHJpbV9hbW91bnQiLCJwbGF5UGF1c2UiLCJpc1BsYXlpbmciLCJnZXRDdXJyZW50VGltZSIsImNvbnNvbGUiLCJsb2ciLCJ6b29tIiwidHJpbSIsInRpbWVUb1RyaW0iLCJwbGF5UGF1c2VBbGwiLCJ0b1ByZXZpb3VzIiwicHJldmlvdXNUaW1lIiwidG90YWxUaW1lIiwiZ2V0RHVyYXRpb24iLCJwcm9ncmVzcyIsInNlZWtUbyIsInNhdmUiLCJtZXJnZVRyYWNrcyIsInRoZW4iLCJkYXRhIiwiZXJyb3IiLCIkc2NvcGUiLCJnZXRNZXJnZWRUcmFja3MiLCJnZXRUcmFja3MiLCJtZXJnZWRUcmFja3MiLCJmaWx0ZXJlZFRyYWNrcyIsImZpbHRlciIsImZvckVhY2giLCJ0cmFjayIsImtleSIsIm5ld1RyYWNrIiwiQXVkaW8iLCJtZXJnZWRUcmFja0F1ZGlvIiwiZ29vZFNlYXJjaCIsImFydGlzdCIsIm5hbWUiLCJtYXRjaCIsIlJlZ0V4cCIsInRpdGxlIiwic29uZ25hbWUiLCJjdXJyZW50QXVkaW9UcmFja0lkIiwibWVyZ2VkRmlsdGVyRGF0YSIsInBsYXkiLCJ0cmFja0lkIiwicGF1c2UiLCIkd2F0Y2giLCJ0cmFjazEiLCJ0cmFjazIiLCJ1c2VyU2VydmljZSIsInVzZXJTdmMiLCJnZXRVc2VyIiwidXNlcm5hbWUiLCJlbWFpbCIsInRhcmdldCIsIm9wdHMiLCJsaW5lcyIsIndpZHRoIiwicmFkaXVzIiwic2NhbGUiLCJjb3JuZXJzIiwiY29sb3IiLCJvcGFjaXR5Iiwicm90YXRlIiwiZGlyZWN0aW9uIiwic3BlZWQiLCJ0cmFpbCIsImZwcyIsInpJbmRleCIsImNsYXNzTmFtZSIsInRvcCIsImxlZnQiLCJzaGFkb3ciLCJod2FjY2VsIiwicG9zaXRpb24iLCJ1cGRhdGUiLCJzcGlubmVyIiwiU3Bpbm5lciIsInNwaW4iLCJsb2FkaW5nIiwidXNlcmluZm8iLCJ1cGRhdGVVc2VyIiwic3RvcCIsInNvbG9TZXJ2aWNlIiwiZ2V0U29sb1RyYWNrcyIsInNvbG9TdmMiLCJzb2xvVHJhY2tzIiwic29sb1RyYWNrQXVkaW8iLCJpbnN0cnVtZW50X2lkIiwiaW5zdHJ1bWVudHMiLCJpbnN0U3ZjIiwiYmFuZFRyYWNrSWRBcnJheSIsImdldFRyYWNrSWRBcnJheSIsInRyYWNrQXJyYXlDb3VudCIsImdldFRyYWNrQXJyYXlDb3VudCIsImFkZFRvQmFuZCIsImFkZFRvVHJhY2tBcnJheSIsInJlbW92ZUZyb21CYW5kIiwicmVtb3ZlRnJvbVRyYWNrQXJyYXkiLCJVcGxvYWQiLCJhcnRpc3RTZXJ2aWNlIiwidXBsb2FkZWQiLCJzaG93Zm9ybSIsImluc3RydW1lbnRTdmMiLCJnZXRJbnN0cnVtZW50cyIsImFydGlzdHMiLCJhcnRpc3RTdmMiLCJnZXRBcnRpc3RzIiwiZ2V0Q29va2llIiwiY25hbWUiLCJkZWNvZGVkQ29va2llIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY29va2llIiwiY2EiLCJzcGxpdCIsImMiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJpbmRleE9mIiwidXBsb2FkRmlsZSIsImZpbGUiLCJ1cGxvYWQiLCJmaWxlRm9ybURhdGFOYW1lIiwic2VuZEZpZWxkc0FzIiwic29uZyIsInJlc3AiLCJmaWxlbmFtZSIsInRyYWNrbGVuZ3RoIiwiJCIsIm1hdGVyaWFsX3NlbGVjdCIsInVzZXJfaWQiLCJKU09OIiwicGFyc2UiLCJ1c2VySWQiLCJ0cmFja19sZW5ndGgiLCJpbnN0cnVtZW50c2Ryb3Bkb3duIiwiYXJ0aXN0X2lkIiwiYXJ0aXN0c2Ryb3Bkb3duIiwiaW5zZXJ0VHJhY2siLCJsaXN0IiwicmV0dXJuVmFsdWUiLCJpbmRleCIsInNlcnZpY2UiLCIkaHR0cCIsImdldERhdGEiLCJvcHRpb25zIiwiZ2V0Iiwic3ZjIiwiJGF1dGgiLCIkcm9vdFNjb3BlIiwiJGNvb2tpZXMiLCIkc3RhdGUiLCJsb2dpbiIsInRva2VuIiwiZXhwaXJhdGlvblRpbWUiLCJEYXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJ1c2VyRGF0YSIsInVzZXIiLCJwdXRPYmplY3QiLCJleHBpcmVzIiwiaXNMb2dnZWRJbiIsImlzQWRtaW4iLCJjcmVkZW50aWFscyIsImxvZ291dCIsInJlbW92ZSIsImdvIiwicmVnaXN0ZXIiLCJwb3N0IiwiaW5jcmVtZW50VHJhY2tBcnJheUNvdW50IiwiZGVjcmVtZW50VHJhY2tBcnJheUNvdW50IiwiYWRkVG9UcmFja0lkQXJyYXkiLCJ0cmFja0lkQXJyYXkiLCJyZW1vdmVGcm9tVHJhY2tJZEFycmF5Iiwic3BsaWNlIiwiYXJyYXlPYmplY3RJbmRleE9mIiwidGVzdEZ1bmN0aW9uIiwiYWxlcnQiLCJjcmVhdGVTb2xvRmlsdGVyRGF0YSIsImNyZWF0ZU1lcmdlZEZpbHRlckRhdGEiLCJ2YWx1ZSIsImdldFRyYWNrQnlJZCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwicmVwbGFjZSIsInNjb3BlIiwiY29udHJvbGxlckFzIiwiYXV0aFNlcnZpY2UiLCJpc0F1dGhlbnRpY2F0ZWQiLCJhdXRoU3ZjIiwic2hvd0xvZ2luIiwibW9kYWwiLCJzaG93UmVnaXN0ZXIiLCJwYXNzd29yZCIsInVucmVnaXN0ZXIiLCJzaWdudXAiLCJyZXNwb25zZSJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsS0FBTUMsUUFBUUMsT0FBTyxPQUN2QixZQUNBLGFBQ0EsWUFDQSxpQkNKRUMsVUFBYSxXQUVoQixHQUFJRCxLQUlKLE9BRkFBLEdBQU9FLGFBQWUsd0NBRWZGLElDTlJGLEtBQUlLLFFBQUEsaUJBQUEscUJBQUEsZ0JBQU8sU0FBU0MsRUFBZ0JDLEVBQW9CQyxHQUN0REEsRUFBY0MsU0FBY04sVUFBVUMsYUFBZSxTQUNyREksRUFBY0UsVUFBY1AsVUFBVUMsYUFBZSxZQUNy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L0QsU0FBU0MsZUFBZSxvQkFFbkMrRCxHQUNEQyxNQUFPLEdBQ1B4RSxPQUFRLEdBQ1J5RSxNQUFPLEdBQ1BDLE9BQVEsR0FDUkMsTUFBTyxHQUNQQyxRQUFTLEVBQ1RDLE1BQU8sT0FDUEMsUUFBUyxJQUNUQyxPQUFRLEVBQ1JDLFVBQVcsRUFDWEMsTUFBTyxFQUNQQyxNQUFPLEdBQ1BDLElBQUssR0FDTEMsT0FBUSxJQUNSQyxVQUFXLFVBQ1hDLElBQUssTUFDTEMsS0FBTSxNQUNOQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsU0FBVSxXQUtiMUcsR0FBR3dNLFNBQVcsV0FDYixHQUFJNUYsR0FBVSxHQUFJQyxTQUFRdEIsR0FBTXVCLEtBQUt4QixFQUMvQnRGLEdBQUcrRyxTQUFXLENBRXBCLElBQUlnRixJQUNEM0csU0FBVXBGLEVBQUdvRixTQUNiQyxNQUFPckYsRUFBR3FGLE1BQ1Y2SSxTQUFVbE8sRUFBR2tPLFNBR2hCOUMsR0FBTWdELE9BQU9yQyxHQUFNNUksS0FBSyxTQUFTa0wsR0FFaENQLEVBQVF0QyxNQUFNTyxFQUdkLElBQUlvQyxHQUFhN0ssRUFBT3dCLE9BQ3ZCLFdBQWMsTUFBT2dKLEdBQVE1QixZQUM3QixXQUVJNEIsRUFBUTVCLGFBRVZsTSxFQUFHK0csU0FBVSxFQUNQaUQsRUFBRSxtQkFBbUJnRSxRQUMzQmhFLEVBQUUsbUJBQW1CZ0UsTUFBTSxTQUNyQnBILEVBQVFNLE9BQ1JpSCxLQUVKTCxFQUFRNUIsY0FBZSxJQUV6QnRGLEVBQVFNLE9BQ0ZsSCxFQUFHK0csU0FBVSxFQUNib0gsT0FFTCxLQXZCTC9DLFNBeUJPLFNBQVNpRCxHQUViekgsRUFBUU0sT0FDUmxILEVBQUcrRyxTQUFVLEVBQ1oxRSxRQUFRQyxJQUFJK0wiLCJmaWxlIjoic2NyaXB0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZShcImFwcFwiLCBbXHJcblx0XHRcInVpLnJvdXRlclwiLFxyXG5cdFx0XCJzYXRlbGxpemVyXCIsXHJcblx0XHRcIm5nQ29va2llc1wiLFxyXG5cdFx0XCJuZ0ZpbGVVcGxvYWRcIlxyXG5cdF0pOyIsInZhciBDT05TVEFOVFMgPSAoZnVuY3Rpb24gKCkge1xyXG5cdFxyXG5cdHZhciBtb2R1bGUgPSB7fTtcclxuXHJcblx0bW9kdWxlLkFQSV9CQVNFX1VSTCA9IFwiaHR0cDovL2Rpc2NvdmVyYmFuZGFwaS5pbnQvcHVibGljL2FwaVwiO1xyXG5cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59KCkpOyIsImFwcC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGF1dGhQcm92aWRlcikge1xyXG4gICRhdXRoUHJvdmlkZXIubG9naW5VcmwgICAgPSBDT05TVEFOVFMuQVBJX0JBU0VfVVJMICsgJy9sb2dpbic7XHJcbiAgJGF1dGhQcm92aWRlci5zaWdudXBVcmwgICA9IENPTlNUQU5UUy5BUElfQkFTRV9VUkwgKyAnL3JlZ2lzdGVyJztcclxuICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXJcclxuICAgIC5zdGF0ZSgnaG9tZScsIHtcclxuICAgICAgdXJsOiBcIi9cIixcclxuICAgICAgdGVtcGxhdGVVcmw6IFwiYXBwL3BhZ2VzL2hvbWUuaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcImhvbWVDb250cm9sbGVyIGFzIGhvbWVcIlxyXG4gICAgfSlcclxuICBcdC5zdGF0ZSgnc29sbycsIHtcclxuICAgICAgdXJsOiBcIi9zb2xvXCIsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcImFwcC9wYWdlcy9zb2xvLmh0bWxcIixcclxuICAgICAgY29udHJvbGxlcjogXCJzb2xvQ29udHJvbGxlciBhcyBzb2xvXCJcclxuICAgIH0pXHJcbiAgICAuc3RhdGUoJ21lcmdlZCcsIHtcclxuICAgICAgdXJsOiBcIi9tZXJnZWRcIixcclxuICAgICAgdGVtcGxhdGVVcmw6IFwiYXBwL3BhZ2VzL21lcmdlZC5odG1sXCIsXHJcbiAgICAgIGNvbnRyb2xsZXI6IFwibWVyZ2VkQ29udHJvbGxlciBhcyBtZXJnZWRcIlxyXG4gICAgfSlcclxuICAgIC5zdGF0ZSgnYmFuZCcsIHtcclxuICAgICAgdXJsOiBcIi9iYW5kXCIsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcImFwcC9wYWdlcy9iYW5kLmh0bWxcIixcclxuICAgICAgY29udHJvbGxlcjogXCJiYW5kQ29udHJvbGxlciBhcyBiYW5kXCJcclxuICAgIH0pXHJcbiAgICAuc3RhdGUoJ21lcmdlJywge1xyXG4gICAgICB1cmw6IFwiL21lcmdlXCIsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcImFwcC9wYWdlcy9tZXJnZS5odG1sXCIsXHJcbiAgICAgIGNvbnRyb2xsZXI6IFwibWVyZ2VDb250cm9sbGVyIGFzIG1lcmdlXCJcclxuICAgIH0pXHJcbiAgICAuc3RhdGUoJ3Byb2ZpbGUnLCB7XHJcbiAgICAgIHVybDogXCIvcHJvZmlsZVwiLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogXCJhcHAvcGFnZXMvcHJvZmlsZS5odG1sXCIsXHJcbiAgICAgIGNvbnRyb2xsZXI6IFwicHJvZmlsZUNvbnRyb2xsZXIgYXMgcHJvZmlsZVwiXHJcbiAgICB9KVxyXG4gICAgLnN0YXRlKCd1cGxvYWQnLCB7XHJcbiAgICAgIHVybDogXCIvdXBsb2FkXCIsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcImFwcC9wYWdlcy91cGxvYWQuaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcInVwbG9hZENvbnRyb2xsZXIgYXMgdXBsb2FkXCJcclxuICAgIH0pXHJcbn0pOyIsImFwcC5jb250cm9sbGVyKFwiYmFuZENvbnRyb2xsZXJcIiwgZnVuY3Rpb24oYmFuZFNlcnZpY2UpIHtcclxuXHRcclxuXHR2YXIgdm0gXHRcdD0gdGhpcztcclxuXHR2YXIgYmFuZFN2YyA9IGJhbmRTZXJ2aWNlO1xyXG5cclxuXHRmdW5jdGlvbiBfaW5pdCgpIHtcclxuXHRcdHZtLnRyYWNrQXJyYXkgPSBiYW5kU3ZjLmdldFRyYWNrQXJyYXk7XHJcblx0fVxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcImhvbWVDb250cm9sbGVyXCIsIGZ1bmN0aW9uKGluc3RydW1lbnRTZXJ2aWNlLCBmaWx0ZXJTZXJ2aWNlKSB7XHJcblx0XHJcblx0dmFyIHZtID0gdGhpcztcclxuXHR2YXIgaW5zdFN2YyA9IGluc3RydW1lbnRTZXJ2aWNlO1xyXG5cdHZhciBmbHRTdmMgPSBmaWx0ZXJTZXJ2aWNlO1xyXG5cclxuXHRmdW5jdGlvbiBfaW5pdCgpIHtcclxuXHRcdC8vaW5zdFN2Yy5nZXRJbnN0cnVtZW50cygpO1xyXG5cclxuXHRcdHZtLmZpbHRlckRhdGEgPSBmbHRTdmMuc29sb0ZpbHRlckRhdGE7XHJcblx0fVxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcIm1lcmdlQ29udHJvbGxlclwiLCBmdW5jdGlvbihiYW5kU2VydmljZSwgbWVyZ2VkU2VydmljZSkge1xyXG5cdHZhciB2bSBcdFx0XHQ9IHRoaXM7XHJcblx0dmFyIGJhbmRTdmMgXHQ9IGJhbmRTZXJ2aWNlO1xyXG5cdHZhciBtZXJnZWRTdmMgXHQ9IG1lcmdlZFNlcnZpY2U7XHJcblx0dmFyIHdhdmVzdXJmZXIgXHQ9IFtdO1xyXG5cclxuXHRmdW5jdGlvbiBfaW5pdCgpIHtcclxuXHRcdHZtLnRyYWNrcyBcdFx0XHQ9IGJhbmRTdmMuZ2V0VHJhY2tBcnJheSgpO1xyXG5cdFx0dm0uc2hvd1RyYWNrcyBcdFx0PSBmYWxzZTtcclxuXHRcdHZtLnRoZXJlQXJlVHJhY2tzXHQ9IGZhbHNlO1xyXG5cdFx0dm0ubG9hZGVkVHJhY2tzIFx0PSBbXTtcclxuXHRcdHZtLnNhdmVkVGltZSBcdFx0PSBbXTtcclxuXHJcblx0XHRpZih2bS50cmFja3MubGVuZ3RoID4gMClcclxuXHRcdHtcclxuXHRcdFx0dm0udGhlcmVBcmVUcmFja3NcdD0gdHJ1ZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHZtLmxvYWQgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmKHZtLnRoZXJlQXJlVHJhY2tzKVxyXG5cdFx0e1xyXG5cdFx0XHRmb3IgKHZhciBpID0gdm0udHJhY2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcblx0XHRcdFx0dmFyIHRyYWNrX2lkID0gdm0udHJhY2tzW2ldLmlkO1xyXG5cclxuXHRcdFx0XHRpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0cmFja19pZCkuY2hlY2tlZCkgXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0d2F2ZXN1cmZlclt0cmFja19pZF0gPSBXYXZlU3VyZmVyLmNyZWF0ZSh7XHJcblx0XHRcdCAgICBcdFx0Y29udGFpbmVyOiAnI3dhdmVmb3JtJyt0cmFja19pZCxcclxuXHRcdFx0ICAgIFx0XHR3YXZlQ29sb3I6ICdncmVlbicsXHJcblx0XHRcdCAgICBcdFx0cHJvZ3Jlc3NDb2xvcjogJ3B1cnBsZSdcclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdHdhdmVzdXJmZXJbdHJhY2tfaWRdLmxvYWQoJ2h0dHA6Ly9kaXNjb3ZlcmJhbmRhcGkuaW50L3B1YmxpYy9hcGkvYXVkaW8vJyArIHZtLnRyYWNrc1tpXS5maWxlX3VybCk7XHJcblxyXG5cdFx0XHRcdFx0dm0ubG9hZGVkVHJhY2tzLnB1c2goe1xyXG5cdFx0ICAgICAgICAgICAgXHR0cmFja19pZDogdHJhY2tfaWQsXHJcblx0XHQgICAgICAgICAgICBcdHRyaW1fYW1vdW50OiAwXHJcblx0XHQgICAgICAgIFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHZtLnNob3dUcmFja3MgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dm0ucGxheVBhdXNlID0gZnVuY3Rpb24oaWQpIHtcclxuXHRcdGlmKCF3YXZlc3VyZmVyW2lkXS5pc1BsYXlpbmcoKSlcclxuXHRcdHtcclxuXHRcdFx0dm0uc2F2ZWRUaW1lW2lkXSA9IHdhdmVzdXJmZXJbaWRdLmdldEN1cnJlbnRUaW1lKCk7XHJcblx0XHRcdGNvbnNvbGUubG9nKHZtLnNhdmVkVGltZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0d2F2ZXN1cmZlcltpZF0ucGxheVBhdXNlKCk7XHJcblx0XHR3YXZlc3VyZmVyW2lkXS56b29tKDUwKTtcclxuXHR9XHJcblxyXG5cdHZtLnRyaW0gPSBmdW5jdGlvbihpZCkge1xyXG5cdFx0dmFyIHRpbWVUb1RyaW0gPSB3YXZlc3VyZmVyW2lkXS5nZXRDdXJyZW50VGltZSgpO1xyXG5cdFx0Zm9yICh2YXIgaSA9IHZtLmxvYWRlZFRyYWNrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG5cdFx0XHRpZih2bS5sb2FkZWRUcmFja3NbaV0udHJhY2tfaWQgPT09IGlkKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dm0ubG9hZGVkVHJhY2tzW2ldLnRyaW1fYW1vdW50ID0gdGltZVRvVHJpbTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cdHZtLnBsYXlQYXVzZUFsbCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0Zm9yICh2YXIgaSA9IHZtLmxvYWRlZFRyYWNrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG5cdFx0XHR2YXIgaWQgPSB2bS5sb2FkZWRUcmFja3NbaV0udHJhY2tfaWQ7XHJcblx0XHRcdGlmKCF3YXZlc3VyZmVyW2lkXS5pc1BsYXlpbmcoKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZtLnNhdmVkVGltZVtpZF0gPSB3YXZlc3VyZmVyW2lkXS5nZXRDdXJyZW50VGltZSgpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHZtLnNhdmVkVGltZSk7XHJcblx0XHRcdH1cclxuXHJcbiAgICBcdFx0d2F2ZXN1cmZlcltpZF0ucGxheVBhdXNlKCk7XHJcbiAgICBcdFx0d2F2ZXN1cmZlcltpZF0uem9vbSg1MCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR2bS50b1ByZXZpb3VzID0gZnVuY3Rpb24oKSB7XHJcblx0XHRmb3IgKHZhciBpID0gdm0ubG9hZGVkVHJhY2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcblx0XHRcdHZhciBpZCA9IHZtLmxvYWRlZFRyYWNrc1tpXS50cmFja19pZDtcclxuXHRcdFx0dmFyIHByZXZpb3VzVGltZSBcdD0gdm0uc2F2ZWRUaW1lW2lkXTtcclxuXHRcdFx0dmFyIHRvdGFsVGltZVx0XHQ9IHdhdmVzdXJmZXJbaWRdLmdldER1cmF0aW9uKCk7XHJcblx0XHRcdHZhciBwcm9ncmVzcyA9IHByZXZpb3VzVGltZSAvIHRvdGFsVGltZTtcclxuXHRcdFx0d2F2ZXN1cmZlcltpZF0uc2Vla1RvKHByb2dyZXNzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdFxyXG5cdHZtLnNhdmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdG1lcmdlZFN2Yy5tZXJnZVRyYWNrcyh2bS5sb2FkZWRUcmFja3MpXHJcblx0XHQudGhlbihmdW5jdGlvbihkYXRhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuXHR9XHJcblxyXG5cdF9pbml0KCk7XHJcbn0pOyIsImFwcC5jb250cm9sbGVyKFwibWVyZ2VkQ29udHJvbGxlclwiLCBmdW5jdGlvbigkc2NvcGUsIG1lcmdlZFNlcnZpY2UsIGZpbHRlclNlcnZpY2UpIHtcclxuXHRcclxuXHR2YXIgdm0gIFx0XHQ9IHRoaXM7XHJcblx0dmFyIG1nZFN2YyBcdFx0PSBtZXJnZWRTZXJ2aWNlO1xyXG5cdHZhciBmbHRTdmMgXHRcdD0gZmlsdGVyU2VydmljZTtcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIHBsYXlBdWRpb0ZpbGUodHJhY2spXHJcblx0e1xyXG5cdFx0dHJhY2sucGxheSgpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0TWVyZ2VkVHJhY2tzKCkge1xyXG5cdFx0bWVyZ2VkU2VydmljZS5nZXRUcmFja3MoKVxyXG5cdFx0XHQudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0dm0ubWVyZ2VkVHJhY2tzID0gZGF0YS5kYXRhO1xyXG5cdFx0XHRcdHZtLmZpbHRlcmVkVHJhY2tzID0gdm0ubWVyZ2VkVHJhY2tzO1xyXG5cdFx0XHRcdGZpbHRlcigpO1xyXG5cclxuXHRcdFx0XHRhbmd1bGFyLmZvckVhY2godm0ubWVyZ2VkVHJhY2tzLCBmdW5jdGlvbih0cmFjaywga2V5KSB7XHJcblx0XHRcdFx0XHRcdC8vbmV3VHJhY2sgPSBuZXcgQXVkaW8odHJhY2suZmlsZV91cmwpO1xyXG5cdFx0XHRcdFx0XHRuZXdUcmFjayA9IG5ldyBBdWRpbyhcImRpc3QvYXVkaW8vQmVoZW1vdGggLSBDb25xdWVyIEFsbCAtIERydW0ubXAzXCIpO1xyXG5cdFx0XHRcdFx0XHR2bS5tZXJnZWRUcmFja0F1ZGlvW3RyYWNrLmlkXSA9IG5ld1RyYWNrO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBmaWx0ZXIoKSB7XHJcblx0XHRcclxuXHRcdHZtLmZpbHRlcmVkVHJhY2tzID0gW107XHJcblxyXG5cdFx0YW5ndWxhci5mb3JFYWNoKHZtLm1lcmdlZFRyYWNrcywgZnVuY3Rpb24odHJhY2ssIGtleSkge1xyXG5cclxuXHRcdFx0Z29vZFNlYXJjaCA9IHRydWU7XHJcblxyXG5cdFx0XHRpZighdm0uZmlsdGVyRGF0YS5hcnRpc3QgPT0gXCJcIiAmJiAhdHJhY2suYXJ0aXN0Lm5hbWUubWF0Y2gobmV3IFJlZ0V4cCh2bS5maWx0ZXJEYXRhLmFydGlzdCwgXCJpXCIpKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGdvb2RTZWFyY2ggPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoIXZtLmZpbHRlckRhdGEudGl0bGUgPT0gXCJcIiAmJiAhdHJhY2suc29uZ25hbWUubWF0Y2gobmV3IFJlZ0V4cCh2bS5maWx0ZXJEYXRhLnRpdGxlLCBcImlcIikpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Z29vZFNlYXJjaCA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0aWYoZ29vZFNlYXJjaClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZtLmZpbHRlcmVkVHJhY2tzLnB1c2godHJhY2spO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHR2bS5tZXJnZWRUcmFja0F1ZGlvID0gW107XHJcblx0XHR2bS5jdXJyZW50QXVkaW9UcmFja0lkID0gXCJcIjtcclxuXHJcblx0XHRnZXRNZXJnZWRUcmFja3MoKTtcclxuXHRcdHZtLmZpbHRlckRhdGEgPSBmbHRTdmMubWVyZ2VkRmlsdGVyRGF0YTtcclxuXHR9XHJcblxyXG5cdC8vVm0gZnVuY3Rpb25zXHJcblx0dm0ucGxheSA9IGZ1bmN0aW9uKHRyYWNrSWQpIHtcclxuXHJcblx0XHRpZih2bS5jdXJyZW50QXVkaW9UcmFja0lkICE9IFwiXCIpIHtcclxuXHRcdFx0dm0ucGF1c2Uodm0uY3VycmVudEF1ZGlvVHJhY2tJZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dm0uY3VycmVudEF1ZGlvVHJhY2tJZCA9IHRyYWNrSWQ7XHJcblx0XHR2bS5tZXJnZWRUcmFja0F1ZGlvW3RyYWNrSWRdLnBsYXkoKTtcclxuXHR9XHJcblxyXG5cdHZtLnBhdXNlID0gZnVuY3Rpb24odHJhY2tJZCkge1xyXG5cdFx0dm0ubWVyZ2VkVHJhY2tBdWRpb1t0cmFja0lkXS5wYXVzZSgpO1xyXG5cdFx0dm0uY3VycmVudEF1ZGlvVHJhY2tJZCA9IFwiXCI7XHJcblx0fVxyXG5cclxuXHQvL1dhdGNoZXNcclxuXHQkc2NvcGUuJHdhdGNoKFxyXG5cdFx0ZnVuY3Rpb24gKCkgeyByZXR1cm4gdm0uZmlsdGVyRGF0YSB9LCBcclxuXHRcdGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGlmKHZtLmZpbHRlckRhdGEpIFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmlsdGVyKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sIHRydWUpO1xyXG5cclxuXHJcblxyXG5cdHZtLnRyYWNrMSA9IG5ldyBBdWRpbyhcImRpc3QvYXVkaW8vQmVoZW1vdGggLSBDb25xdWVyIEFsbCAtIERydW0ubXAzXCIpO1xyXG5cdHZtLnRyYWNrMiA9IG5ldyBBdWRpbyhcImRpc3QvYXVkaW8vQmVoZW1vdGggLSBDb25xdWVyIEFsbCAtIEd1aXRhci5tcDNcIik7XHJcblxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcInByb2ZpbGVDb250cm9sbGVyXCIsIGZ1bmN0aW9uKHVzZXJTZXJ2aWNlKSB7XHJcblx0XHJcblx0dmFyIHZtIFx0XHQ9IHRoaXM7XHJcblx0dmFyIHVzZXJTdmMgPSB1c2VyU2VydmljZTtcclxuXHR2YXIgdGFyZ2V0IFx0PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBkYXRlLXByb2ZpbGUtc3Bpbm5lcicpO1xyXG5cclxuXHR2YXIgb3B0cyA9IHtcclxuXHRcdFx0bGluZXM6IDEzIC8vIFRoZSBudW1iZXIgb2YgbGluZXMgdG8gZHJhd1xyXG5cdFx0LCBsZW5ndGg6IDI4IC8vIFRoZSBsZW5ndGggb2YgZWFjaCBsaW5lXHJcblx0XHQsIHdpZHRoOiAxMiAvLyBUaGUgbGluZSB0aGlja25lc3NcclxuXHRcdCwgcmFkaXVzOiA0MiAvLyBUaGUgcmFkaXVzIG9mIHRoZSBpbm5lciBjaXJjbGVcclxuXHRcdCwgc2NhbGU6IDAuMTUgLy8gU2NhbGVzIG92ZXJhbGwgc2l6ZSBvZiB0aGUgc3Bpbm5lclxyXG5cdFx0LCBjb3JuZXJzOiAxIC8vIENvcm5lciByb3VuZG5lc3MgKDAuLjEpXHJcblx0XHQsIGNvbG9yOiAnIzAwMCcgLy8gI3JnYiBvciAjcnJnZ2JiIG9yIGFycmF5IG9mIGNvbG9yc1xyXG5cdFx0LCBvcGFjaXR5OiAwLjI1IC8vIE9wYWNpdHkgb2YgdGhlIGxpbmVzXHJcblx0XHQsIHJvdGF0ZTogMCAvLyBUaGUgcm90YXRpb24gb2Zmc2V0XHJcblx0XHQsIGRpcmVjdGlvbjogMSAvLyAxOiBjbG9ja3dpc2UsIC0xOiBjb3VudGVyY2xvY2t3aXNlXHJcblx0XHQsIHNwZWVkOiAxIC8vIFJvdW5kcyBwZXIgc2Vjb25kXHJcblx0XHQsIHRyYWlsOiA2MCAvLyBBZnRlcmdsb3cgcGVyY2VudGFnZVxyXG5cdFx0LCBmcHM6IDIwIC8vIEZyYW1lcyBwZXIgc2Vjb25kIHdoZW4gdXNpbmcgc2V0VGltZW91dCgpIGFzIGEgZmFsbGJhY2sgZm9yIENTU1xyXG5cdFx0LCB6SW5kZXg6IDJlOSAvLyBUaGUgei1pbmRleCAoZGVmYXVsdHMgdG8gMjAwMDAwMDAwMClcclxuXHRcdCwgY2xhc3NOYW1lOiAnc3Bpbm5lcicgLy8gVGhlIENTUyBjbGFzcyB0byBhc3NpZ24gdG8gdGhlIHNwaW5uZXJcclxuXHRcdCwgdG9wOiAnODklJyAvLyBUb3AgcG9zaXRpb24gcmVsYXRpdmUgdG8gcGFyZW50XHJcblx0XHQsIGxlZnQ6ICcyNS41JScgLy8gTGVmdCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuXHRcdCwgc2hhZG93OiBmYWxzZSAvLyBXaGV0aGVyIHRvIHJlbmRlciBhIHNoYWRvd1xyXG5cdFx0LCBod2FjY2VsOiBmYWxzZSAvLyBXaGV0aGVyIHRvIHVzZSBoYXJkd2FyZSBhY2NlbGVyYXRpb25cclxuXHRcdCwgcG9zaXRpb246ICdhYnNvbHV0ZScgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHR1c2VyU3ZjLmdldFVzZXIoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRcdHZtLnVzZXJuYW1lID0gZGF0YS5kYXRhLnVzZXJuYW1lO1xyXG5cdFx0XHR2bS5lbWFpbCBcdD0gZGF0YS5kYXRhLmVtYWlsO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHR2bS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzcGlubmVyID0gbmV3IFNwaW5uZXIob3B0cykuc3Bpbih0YXJnZXQpO1xyXG5cdCAgICB2bS5sb2FkaW5nIFx0PSB0cnVlO1xyXG5cclxuXHRcdHZhciB1c2VyaW5mbyA9IHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6IHZtLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICBlbWFpbDogdm0uZW1haWxcclxuICAgICAgICB9XHJcblxyXG5cdFx0dXNlclN2Yy51cGRhdGVVc2VyKHVzZXJpbmZvKVxyXG5cdFx0XHQudGhlbihmdW5jdGlvbihkYXRhKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3Bpbm5lci5zdG9wKCk7XHJcblx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNwaW5uZXIuc3RvcCgpO1xyXG5cdFx0XHRcdHZtLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcInNvbG9Db250cm9sbGVyXCIsIGZ1bmN0aW9uKCRzY29wZSwgYmFuZFNlcnZpY2UsIHNvbG9TZXJ2aWNlLCBpbnN0cnVtZW50U2VydmljZSwgZmlsdGVyU2VydmljZSkge1xyXG5cdFxyXG5cdHZhciB2bSA9IHRoaXM7XHJcblx0dmFyIGJhbmRTdmMgPSBiYW5kU2VydmljZTtcclxuXHR2YXIgc29sb1N2YyA9IHNvbG9TZXJ2aWNlO1xyXG5cdHZhciBpbnN0U3ZjID0gaW5zdHJ1bWVudFNlcnZpY2U7XHJcblx0dmFyIGZsdFN2YyA9IGZpbHRlclNlcnZpY2U7XHJcblxyXG5cdC8vUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHRmdW5jdGlvbiBwbGF5QXVkaW9GaWxlKHRyYWNrKVxyXG5cdHtcclxuXHRcdHRyYWNrLnBsYXkoKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldFNvbG9UcmFja3MoKVxyXG5cdHtcclxuXHRcdHNvbG9TdmMuZ2V0VHJhY2tzKClcclxuXHRcdFx0LnRoZW4oZnVuY3Rpb24oZGF0YSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZtLnNvbG9UcmFja3MgPSBkYXRhLmRhdGE7XHJcblx0XHRcdFx0dm0uZmlsdGVyZWRUcmFja3MgPSB2bS5zb2xvVHJhY2tzO1xyXG5cdFx0XHRcdGZpbHRlcigpO1xyXG5cclxuXHRcdFx0XHRhbmd1bGFyLmZvckVhY2godm0uc29sb1RyYWNrcywgZnVuY3Rpb24odHJhY2ssIGtleSkge1xyXG5cdFx0XHRcdFx0XHQvL25ld1RyYWNrID0gbmV3IEF1ZGlvKHRyYWNrLmZpbGVfdXJsKTtcclxuXHRcdFx0XHRcdFx0bmV3VHJhY2sgPSBuZXcgQXVkaW8oJ2h0dHA6Ly9kaXNjb3ZlcmJhbmRhcGkuaW50L3B1YmxpYy9hdWRpby8nICsgdHJhY2suZmlsZV91cmwpO1xyXG5cdFx0XHRcdFx0XHR2bS5zb2xvVHJhY2tBdWRpb1t0cmFjay5pZF0gPSBuZXdUcmFjaztcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdH0pO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZmlsdGVyKClcclxuXHR7XHJcblx0XHR2bS5maWx0ZXJlZFRyYWNrcyA9IFtdO1xyXG5cclxuXHRcdGFuZ3VsYXIuZm9yRWFjaCh2bS5zb2xvVHJhY2tzLCBmdW5jdGlvbih0cmFjaywga2V5KVxyXG5cdFx0e1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKHRyYWNrKTtcclxuXHRcdFx0Z29vZFNlYXJjaCA9IHRydWU7XHJcblxyXG5cdFx0XHRpZighdm0uZmlsdGVyRGF0YS5hcnRpc3QgPT0gXCJcIiAmJiAhdHJhY2suYXJ0aXN0Lm5hbWUubWF0Y2gobmV3IFJlZ0V4cCh2bS5maWx0ZXJEYXRhLmFydGlzdCwgXCJpXCIpKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGdvb2RTZWFyY2ggPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoIXZtLmZpbHRlckRhdGEudGl0bGUgPT0gXCJcIiAmJiAhdHJhY2suc29uZ25hbWUubWF0Y2gobmV3IFJlZ0V4cCh2bS5maWx0ZXJEYXRhLnRpdGxlLCBcImlcIikpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Z29vZFNlYXJjaCA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZighdm0uZmlsdGVyRGF0YVt0cmFjay5pbnN0cnVtZW50X2lkXSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGdvb2RTZWFyY2ggPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGlmKGdvb2RTZWFyY2gpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2bS5maWx0ZXJlZFRyYWNrcy5wdXNoKHRyYWNrKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvL2NvbnNvbGUubG9nKHZtLmZpbHRlcmVkVHJhY2tzKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LypmdW5jdGlvbiBhcnJheU9iamVjdEluZGV4T2YobXlBcnJheSwgc2VhcmNoVGVybSwgcHJvcGVydHkpIHtcclxuICAgIFx0XHJcbiAgICBcdGZvcih2YXIgaSA9IDAsIGxlbiA9IG15QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBcdGlmIChteUFycmF5W2ldW3Byb3BlcnR5XSA9PT0gc2VhcmNoVGVybSkgcmV0dXJuIGk7XHJcbiAgICBcdH1cclxuXHJcbiAgICBcdHJldHVybiAtMTtcclxuXHR9Ki9cclxuXHJcblx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHR2bS5zb2xvVHJhY2tBdWRpbyA9IFtdO1xyXG5cdFx0dm0uY3VycmVudEF1ZGlvVHJhY2tJZCA9IFwiXCI7XHJcblxyXG5cdFx0Z2V0U29sb1RyYWNrcygpO1xyXG5cdFx0dm0uaW5zdHJ1bWVudHMgPSBpbnN0U3ZjLmluc3RydW1lbnRzO1xyXG5cdFx0dm0uZmlsdGVyRGF0YSA9IGZsdFN2Yy5zb2xvRmlsdGVyRGF0YTtcclxuXHRcdHZtLnRyYWNrQXJyYXkgPSBiYW5kU3ZjLmdldFRyYWNrQXJyYXk7XHJcblx0XHR2bS5iYW5kVHJhY2tJZEFycmF5ID0gYmFuZFN2Yy5nZXRUcmFja0lkQXJyYXk7XHJcblx0XHR2bS50cmFja0FycmF5Q291bnQgPSBiYW5kU3ZjLmdldFRyYWNrQXJyYXlDb3VudDtcclxuXHJcblx0XHQvKmFuZ3VsYXIuZm9yRWFjaChiYW5kU3ZjLnRyYWNrQXJyYXksIGZ1bmN0aW9uKHRyYWNrLCBrZXkpIHtcclxuXHRcdFx0dm0uYmFuZFRyYWNrSWRBcnJheS5wdXNoKHRyYWNrLmlkKTtcclxuXHRcdH0pOyovXHJcblxyXG5cdFx0Ly92bS50cmFjazEucGxheSgpO1xyXG5cdFx0Ly9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cGxheUF1ZGlvRmlsZSh2bS50cmFjazIpfSwgNDAwKTtcclxuXHR9XHJcblxyXG5cdC8vVm0gZnVuY3Rpb25zXHJcblx0dm0uYWRkVG9CYW5kID0gZnVuY3Rpb24odHJhY2spIHtcclxuXHJcblx0XHRiYW5kU3ZjLmFkZFRvVHJhY2tBcnJheSh0cmFjayk7XHJcblx0XHQvKnZtLmJhbmRUcmFja0lkQXJyYXkgPSBbXTtcclxuXHJcblx0XHRiYW5kU3ZjLnRyYWNrQXJyYXkucHVzaCh0cmFjayk7XHJcblx0XHRiYW5kU3ZjLnRyYWNrQXJyYXlDb3VudCArKztcclxuXHRcdGFuZ3VsYXIuZm9yRWFjaChiYW5kU3ZjLnRyYWNrQXJyYXksIGZ1bmN0aW9uKHRyYWNrLCBrZXkpIHtcclxuXHRcdFx0dm0uYmFuZFRyYWNrSWRBcnJheS5wdXNoKHRyYWNrLmlkKTtcclxuXHRcdH0pOyovXHJcblxyXG5cdFx0Y29uc29sZS5sb2codHJhY2spO1xyXG5cdFx0Ly9jb25zb2xlLmxvZyhiYW5kU3ZjLnRyYWNrQXJyYXkpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZyh2bS5iYW5kVHJhY2tJZEFycmF5KTtcclxuXHRcdC8vY29uc29sZS5sb2codm0udHJhY2tBcnJheUNvdW50KCkpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZyh2bS5iYW5kVHJhY2tJZEFycmF5KCkpO1xyXG5cdH1cclxuXHJcblx0dm0ucmVtb3ZlRnJvbUJhbmQgPSBmdW5jdGlvbih0cmFjaykge1xyXG5cdFx0XHJcblx0XHRiYW5kU3ZjLnJlbW92ZUZyb21UcmFja0FycmF5KHRyYWNrKTtcclxuXHRcdC8qaW5kZXggPSBhcnJheU9iamVjdEluZGV4T2YoYmFuZFN2Yy50cmFja0FycmF5LCB0cmFjay5pZCwgXCJpZFwiKTtcclxuXHRcdGlmIChpbmRleCA+IC0xKSB7XHJcblx0XHRcdGJhbmRTdmMudHJhY2tBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0XHRiYW5kU3ZjLnRyYWNrQXJyYXlDb3VudCAtLTtcclxuXHRcdFx0dm0uYmFuZFRyYWNrQXJyYXkgPSBiYW5kU3ZjLnRyYWNrQXJyYXk7XHJcblxyXG5cdFx0XHRpbnRJbmRleCA9IHZtLmJhbmRUcmFja0lkQXJyYXkuaW5kZXhPZih0cmFjay5pZCk7XHJcblx0XHRcdGlmIChpbnRJbmRleCA+IC0xKSB7XHJcblx0XHRcdFx0dm0uYmFuZFRyYWNrSWRBcnJheS5zcGxpY2UoaW50SW5kZXgsIDEpO1xyXG5cdFx0XHR9XHJcblx0XHR9Ki9cclxuXHJcblx0XHRjb25zb2xlLmxvZyhcIlRyYWNrIHJlbW92ZWQgZnJvbSBuZXcgYmFuZDogXCIgKyB0cmFjayk7XHJcblx0XHQvL2NvbnNvbGUubG9nKGJhbmRTdmMudHJhY2tBcnJheSk7XHJcblx0fVxyXG5cclxuXHR2bS5wbGF5ID0gZnVuY3Rpb24odHJhY2tJZCkge1xyXG5cclxuXHRcdGlmKHZtLmN1cnJlbnRBdWRpb1RyYWNrSWQgIT0gXCJcIikge1xyXG5cdFx0XHR2bS5wYXVzZSh2bS5jdXJyZW50QXVkaW9UcmFja0lkKTtcclxuXHRcdH1cclxuXHJcblx0XHR2bS5jdXJyZW50QXVkaW9UcmFja0lkID0gdHJhY2tJZDtcclxuXHRcdHZtLnNvbG9UcmFja0F1ZGlvW3RyYWNrSWRdLnBsYXkoKTtcclxuXHR9XHJcblxyXG5cdHZtLnBhdXNlID0gZnVuY3Rpb24odHJhY2tJZCkge1xyXG5cdFx0dm0uc29sb1RyYWNrQXVkaW9bdHJhY2tJZF0ucGF1c2UoKTtcclxuXHRcdHZtLmN1cnJlbnRBdWRpb1RyYWNrSWQgPSBcIlwiO1xyXG5cdH1cclxuXHJcblx0Ly9XYXRjaGVzXHJcblx0JHNjb3BlLiR3YXRjaChcclxuXHRcdGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZtLmZpbHRlckRhdGEgfSwgXHJcblx0XHRmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRpZih2bS5maWx0ZXJEYXRhKSBcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZpbHRlcigpO1xyXG5cdFx0XHR9XHJcblx0XHR9LCB0cnVlKTtcclxuXHJcblxyXG5cclxuXHQvL3ZtLnRyYWNrMSA9IG5ldyBBdWRpbygnaHR0cDovL2Rpc2NvdmVyYmFuZGFwaS5pbnQvcHVibGljL2F1ZGlvL2RydW0ud2F2Jyk7XHJcblx0Ly92bS50cmFjazIgPSBuZXcgQXVkaW8oJ2h0dHA6Ly9kaXNjb3ZlcmJhbmRhcGkuaW50L3B1YmxpYy9hdWRpby9ndWl0YXIud2F2Jyk7XHJcblxyXG5cclxuXHRfaW5pdCgpO1xyXG59KTsiLCJhcHAuY29udHJvbGxlcihcInVwbG9hZENvbnRyb2xsZXJcIiwgZnVuY3Rpb24oVXBsb2FkLCBhcnRpc3RTZXJ2aWNlLCBpbnN0cnVtZW50U2VydmljZSwgc29sb1NlcnZpY2UpIHtcclxuICBcclxuICB2YXIgdm0gICAgICAgICAgICA9IHRoaXM7XHJcbiAgdmFyIHNvbG9TdmMgICAgICAgPSBzb2xvU2VydmljZTtcclxuICB2YXIgYXJ0aXN0U3ZjICAgICA9IGFydGlzdFNlcnZpY2U7XHJcbiAgdmFyIGluc3RydW1lbnRTdmMgPSBpbnN0cnVtZW50U2VydmljZTtcclxuICB2YXIgdGFyZ2V0ICAgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cGxvYWQtc3Bpbm5lcicpO1xyXG4gIFxyXG4gIHZhciBvcHRzID0ge1xyXG4gICAgICBsaW5lczogMTMgLy8gVGhlIG51bWJlciBvZiBsaW5lcyB0byBkcmF3XHJcbiAgICAsIGxlbmd0aDogMjggLy8gVGhlIGxlbmd0aCBvZiBlYWNoIGxpbmVcclxuICAgICwgd2lkdGg6IDEyIC8vIFRoZSBsaW5lIHRoaWNrbmVzc1xyXG4gICAgLCByYWRpdXM6IDQyIC8vIFRoZSByYWRpdXMgb2YgdGhlIGlubmVyIGNpcmNsZVxyXG4gICAgLCBzY2FsZTogMC4zMCAvLyBTY2FsZXMgb3ZlcmFsbCBzaXplIG9mIHRoZSBzcGlubmVyXHJcbiAgICAsIGNvcm5lcnM6IDEgLy8gQ29ybmVyIHJvdW5kbmVzcyAoMC4uMSlcclxuICAgICwgY29sb3I6ICcjMDAwJyAvLyAjcmdiIG9yICNycmdnYmIgb3IgYXJyYXkgb2YgY29sb3JzXHJcbiAgICAsIG9wYWNpdHk6IDAuMjUgLy8gT3BhY2l0eSBvZiB0aGUgbGluZXNcclxuICAgICwgcm90YXRlOiAwIC8vIFRoZSByb3RhdGlvbiBvZmZzZXRcclxuICAgICwgZGlyZWN0aW9uOiAxIC8vIDE6IGNsb2Nrd2lzZSwgLTE6IGNvdW50ZXJjbG9ja3dpc2VcclxuICAgICwgc3BlZWQ6IDEgLy8gUm91bmRzIHBlciBzZWNvbmRcclxuICAgICwgdHJhaWw6IDYwIC8vIEFmdGVyZ2xvdyBwZXJjZW50YWdlXHJcbiAgICAsIGZwczogMjAgLy8gRnJhbWVzIHBlciBzZWNvbmQgd2hlbiB1c2luZyBzZXRUaW1lb3V0KCkgYXMgYSBmYWxsYmFjayBmb3IgQ1NTXHJcbiAgICAsIHpJbmRleDogMmU5IC8vIFRoZSB6LWluZGV4IChkZWZhdWx0cyB0byAyMDAwMDAwMDAwKVxyXG4gICAgLCBjbGFzc05hbWU6ICdzcGlubmVyJyAvLyBUaGUgQ1NTIGNsYXNzIHRvIGFzc2lnbiB0byB0aGUgc3Bpbm5lclxyXG4gICAgLCB0b3A6ICc0MCUnIC8vIFRvcCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuICAgICwgbGVmdDogJzUwJScgLy8gTGVmdCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuICAgICwgc2hhZG93OiBmYWxzZSAvLyBXaGV0aGVyIHRvIHJlbmRlciBhIHNoYWRvd1xyXG4gICAgLCBod2FjY2VsOiBmYWxzZSAvLyBXaGV0aGVyIHRvIHVzZSBoYXJkd2FyZSBhY2NlbGVyYXRpb25cclxuICAgICwgcG9zaXRpb246ICdhYnNvbHV0ZScgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2luaXQoKSB7XHJcbiAgICAgIHZtLnVwbG9hZGVkICAgICAgID0gZmFsc2U7XHJcbiAgICAgIHZtLnNob3dmb3JtICAgICAgID0gZmFsc2U7XHJcblxyXG4gICAgICB2bS5pbnN0cnVtZW50cyAgICA9IGluc3RydW1lbnRTdmMuZ2V0SW5zdHJ1bWVudHMoKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihkYXRhKVxyXG4gICAgICB7XHJcbiAgICAgICAgdm0uaW5zdHJ1bWVudHMgID0gZGF0YS5kYXRhO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZGF0YSk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKVxyXG4gICAgICB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHZtLmFydGlzdHMgICAgICAgID0gYXJ0aXN0U3ZjLmdldEFydGlzdHMoKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihkYXRhKVxyXG4gICAgICB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhKTtcclxuICAgICAgICB2bS5hcnRpc3RzICAgICAgPSBkYXRhLmRhdGE7XHJcbiAgICAgIFxyXG4gICAgICB9LCBmdW5jdGlvbihlcnJvcilcclxuICAgICAge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICB2bS51cGxvYWRGaWxlID0gZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICB2YXIgc3Bpbm5lciA9IG5ldyBTcGlubmVyKG9wdHMpLnNwaW4odGFyZ2V0KTtcclxuICAgICAgICB2bS5sb2FkaW5nICA9IHRydWU7XHJcbiAgICAgICAgdm0udXBsb2FkZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL3VwbG9hZFwiLFxyXG4gICAgICAgICAgICBmaWxlRm9ybURhdGFOYW1lOiAnc29uZycsXHJcbiAgICAgICAgICAgIHNlbmRGaWVsZHNBczogJ2Zvcm0nLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgc29uZzogZmlsZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcCkge1xyXG4gICAgICAgICAgICB2bS5maWxlbmFtZSAgICAgPSByZXNwLmRhdGEubmFtZTtcclxuICAgICAgICAgICAgdm0udHJhY2tsZW5ndGggID0gcmVzcC5kYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgc3Bpbm5lci5zdG9wKCk7XHJcbiAgICAgICAgICAgIHZtLmxvYWRpbmcgICAgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS51cGxvYWRlZCAgICAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBmb3JtXHJcbiAgICAgICAgICAgIHZtLnNob3dmb3JtICAgICA9IHRydWU7XHJcbiAgICAgICAgICAgICQoJ3NlbGVjdCcpLm1hdGVyaWFsX3NlbGVjdCgpO1xyXG4gICAgICAgIH0sIFxyXG4gICAgICAgIGZ1bmN0aW9uIChyZXNwKSB7XHJcbiAgICAgICAgICAgIHZtLmxvYWRpbmcgID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNwaW5uZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3InKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uc2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHVzZXJfaWQgPSBKU09OLnBhcnNlKGdldENvb2tpZSgndXNlcicpKS51c2VySWQ7XHJcbiAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB2bS5zb25nbmFtZSxcclxuICAgICAgICAgICAgZmlsZV91cmw6IHZtLmZpbGVuYW1lLFxyXG4gICAgICAgICAgICB0cmFja19sZW5ndGg6IHZtLnRyYWNrbGVuZ3RoLFxyXG4gICAgICAgICAgICB1c2VyX2lkOiB1c2VyX2lkLFxyXG4gICAgICAgICAgICBpbnN0cnVtZW50X2lkOiB2bS5pbnN0cnVtZW50c2Ryb3Bkb3duLFxyXG4gICAgICAgICAgICBhcnRpc3RfaWQgOiB2bS5hcnRpc3RzZHJvcGRvd25cclxuICAgICAgICB9XHJcblxyXG4gICAgICBzb2xvU3ZjLmluc2VydFRyYWNrKGRhdGEpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q29va2llKGNuYW1lKSB7XHJcbiAgICAgICAgICB2YXIgbmFtZSA9IGNuYW1lICsgXCI9XCI7XHJcbiAgICAgICAgICB2YXIgZGVjb2RlZENvb2tpZSA9IGRlY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWUpO1xyXG4gICAgICAgICAgdmFyIGNhID0gZGVjb2RlZENvb2tpZS5zcGxpdCgnOycpO1xyXG4gICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8Y2EubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICB2YXIgYyA9IGNhW2ldO1xyXG4gICAgICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PSAnICcpIHtcclxuICAgICAgICAgICAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoYy5pbmRleE9mKG5hbWUpID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgIH1cclxuICBfaW5pdCgpO1xyXG59KTsiLCJhcHAuZmlsdGVyKFwiYmFuZFwiLCBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24odHJhY2tJZCwgbGlzdCkge1xyXG5cdFx0dmFyIHJldHVyblZhbHVlID0gZmFsc2U7XHJcblx0XHRcclxuXHRcdGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbihpZCwgaW5kZXgpIHtcclxuXHRcdFx0aWYoaWQgPT0gdHJhY2tJZCkge1xyXG5cdFx0XHRcdHJldHVyblZhbHVlID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcmV0dXJuVmFsdWU7XHJcblx0fVxyXG59KTsiLCJhcHAuc2VydmljZShcImFydGlzdFNlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuXHRcclxuXHQvL0dsb2JhbHNcclxuXHR2YXIgc3ZjIFx0XHRcdD0gdGhpcztcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGdldERhdGEgKHVybCwgb3B0aW9ucykge1xyXG5cclxuXHRcdCFvcHRpb25zID8gb3B0aW9ucyA9IHt9IDogXCJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCwgb3B0aW9ucylcclxuXHR9XHJcblxyXG5cdC8vU3ZjIGZ1bmN0aW9uc1xyXG5cdHN2Yy5nZXRBcnRpc3RzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB1cmwgPSBDT05TVEFOVFMuQVBJX0JBU0VfVVJMICsgXCIvYXJ0aXN0c1wiO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gZ2V0RGF0YSh1cmwpO1xyXG5cdH1cclxufSkiLCJhcHAuc2VydmljZShcImF1dGhTZXJ2aWNlXCIsIGZ1bmN0aW9uICgkYXV0aCwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRzdGF0ZSwgdXNlclNlcnZpY2UpIHtcclxuXHRcclxuXHR2YXIgc3ZjIFx0XHQ9IHRoaXM7XHJcblx0dmFyIHVzZXJTdmMgXHQ9IHVzZXJTZXJ2aWNlO1xyXG5cclxuXHRzdmMuaXNMb2dnZWRJbiBcdD0gbnVsbDtcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGxvZ2luICh0b2tlbiwgaWQsIHVzZXJuYW1lLCBlbWFpbCkge1xyXG5cclxuXHRcdHZhciBleHBpcmF0aW9uVGltZSA9IG5ldyBEYXRlKCk7XHJcblx0XHRleHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lLnNldFRpbWUoZXhwaXJhdGlvblRpbWUuZ2V0VGltZSgpICsgKHRva2VuW1wiZXhwaXJlc19pblwiXSAqIDEwMDApKTtcclxuXHRcdGV4cGlyYXRpb25UaW1lID0gbmV3IERhdGUoZXhwaXJhdGlvblRpbWUpO1xyXG5cclxuXHRcdHZhciB1c2VyRGF0YSA9IHtcclxuXHJcblx0XHRcdHRva2VuOiB0b2tlbixcclxuXHRcdFx0dXNlcklkOiBpZCxcclxuXHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLFxyXG5cdFx0XHRlbWFpbDogZW1haWwsXHJcblx0XHRcdC8vaXNBZG1pbjogZGF0YS5kYXRhLmlzQWRtaW5cclxuXHRcdH1cclxuXHJcblx0XHQvL2NvbnNvbGUubG9nKHVzZXJEYXRhLnRva2VuKTtcclxuXHJcblx0XHRzdmMudXNlciA9IHVzZXJEYXRhO1xyXG5cclxuXHRcdCRjb29raWVzLnB1dE9iamVjdChcInVzZXJcIiwgdXNlckRhdGEsIHsgZXhwaXJlczogZXhwaXJhdGlvblRpbWUgfSk7XHJcblx0XHQkcm9vdFNjb3BlLmlzTG9nZ2VkSW4gPSB0cnVlO1xyXG5cdFx0XHJcblx0XHQvL0NoZWNrIGlmIHJldHVybmVkIHVzZXIgaXMgQWRtaW5cclxuXHRcdHVzZXJEYXRhLmlzQWRtaW4gPT0gXCIxXCIgPyAkcm9vdFNjb3BlLmlzQWRtaW4gPSB0cnVlIDogJHJvb3RTY29wZS5pc0FkbWluID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvL1N2YyBmdW5jdGlvbnNcclxuXHRzdmMubG9naW4gPSBmdW5jdGlvbiAoY3JlZGVudGlhbHMpIHtcclxuXHJcblx0XHQkYXV0aC5sb2dpbihjcmVkZW50aWFscykudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgXHQvLyBBdXRoZW50aWNhdGlvbiBzdWNjZXNzXHJcbiAgICAgICAgXHR0b2tlbiBcdFx0PSBkYXRhLmRhdGEudG9rZW47XHJcbiAgICAgICAgXHRpZCBcdFx0XHQ9IDA7XHJcbiAgICAgICAgXHR1c2VybmFtZSBcdD0gXCJcIjtcclxuICAgICAgICBcdGVtYWlsIFx0XHQ9IFwiXCI7XHJcblxyXG5cdFx0XHR1c2VyU3ZjLmdldFVzZXIoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRcdFx0aWQgXHRcdFx0PSBkYXRhLmRhdGEuaWQ7XHJcblx0XHRcdFx0dXNlcm5hbWUgXHQ9IGRhdGEuZGF0YS51c2VybmFtZTtcclxuXHRcdFx0XHRlbWFpbCBcdFx0PSBkYXRhLmRhdGEuZW1haWw7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0bG9naW4odG9rZW4sIGlkLCB1c2VybmFtZSwgZW1haWwpO1xyXG5cdFx0XHRcdHN2Yy5pc0xvZ2dlZEluID0gdHJ1ZTtcclxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdFx0c3ZjLmlzTG9nZ2VkSW4gPSBmYWxzZTtcclxuXHRcdFx0fSk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgZnVuY3Rpb24oZXJyb3Ipe1xyXG4gICAgICAgIFx0Ly8gQXV0aGVudGljYXRpb24gZmFpbGVkXHJcbiAgICAgICAgXHRjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgXHRzdmMuaXNMb2dnZWRJbiA9IGZhbHNlOyBcclxuICAgICAgICB9KTtcclxuXHR9XHJcblxyXG5cdHN2Yy5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0JGF1dGgubG9nb3V0KClcclxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcblx0XHRcdFx0JHJvb3RTY29wZS5pc0xvZ2dlZEluID0gZmFsc2U7XHJcblx0XHRcdFx0JHJvb3RTY29wZS5pc0FkbWluID0gZmFsc2U7XHJcblx0XHRcdFx0c3ZjLnVzZXIgPSBudWxsO1xyXG5cdFx0XHRcdHN2Yy5pc0xvZ2dlZEluID0gbnVsbDtcclxuXHJcblx0XHRcdFx0JGNvb2tpZXMucmVtb3ZlKFwidXNlclwiKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQkc3RhdGUuZ28oXCJob21lXCIpO1xyXG5cdFx0XHR9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0XHR9KVxyXG5cdH1cclxuXHJcblx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuXHJcblx0XHR2YXIgdXJsID0gQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL3VzZXJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAucG9zdCh1cmwsIHVzZXIpO1xyXG5cdH1cclxufSk7IiwiYXBwLnNlcnZpY2UoXCJiYW5kU2VydmljZVwiLCBmdW5jdGlvbigpIHtcclxuXHRcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0dHJhY2tBcnJheSA9IFtdO1xyXG5cdHRyYWNrSWRBcnJheSA9IFtdO1xyXG5cdHRyYWNrQXJyYXlDb3VudCA9IDA7XHJcblxyXG5cdC8vUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHRmdW5jdGlvbiBhcnJheU9iamVjdEluZGV4T2YobXlBcnJheSwgc2VhcmNoVGVybSwgcHJvcGVydHkpIHtcclxuICAgIFx0XHJcbiAgICBcdGZvcih2YXIgaSA9IDAsIGxlbiA9IG15QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBcdGlmIChteUFycmF5W2ldW3Byb3BlcnR5XSA9PT0gc2VhcmNoVGVybSkgcmV0dXJuIGk7XHJcbiAgICBcdH1cclxuXHJcbiAgICBcdHJldHVybiAtMTtcclxuXHR9XHJcblx0Ly9UcmFja0FycmF5Q291bnRcclxuXHRmdW5jdGlvbiBpbmNyZW1lbnRUcmFja0FycmF5Q291bnQoKSB7XHJcblx0XHR0cmFja0FycmF5Q291bnQgKys7XHJcblx0XHRyZXR1cm4gdHJhY2tBcnJheUNvdW50O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZGVjcmVtZW50VHJhY2tBcnJheUNvdW50KCkge1xyXG5cdFx0dHJhY2tBcnJheUNvdW50IC0tO1xyXG5cdFx0cmV0dXJuIHRyYWNrQXJyYXlDb3VudDtcclxuXHR9XHJcblxyXG5cdC8vVHJhY2tJZEFycmF5XHJcblx0ZnVuY3Rpb24gYWRkVG9UcmFja0lkQXJyYXkodHJhY2tJZCkge1xyXG5cdFx0dHJhY2tJZEFycmF5LnB1c2godHJhY2tJZCk7XHJcblx0XHRyZXR1cm4gdHJhY2tJZEFycmF5O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmVtb3ZlRnJvbVRyYWNrSWRBcnJheSh0cmFja0lkKSB7XHJcblx0XHRpbmRleCA9IHRyYWNrSWRBcnJheS5pbmRleE9mKHRyYWNrSWQpO1xyXG5cdFx0aWYoaW5kZXggPiAtMSkge1xyXG5cdFx0XHR0cmFja0lkQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJhY2tJZEFycmF5O1xyXG5cdH1cclxuXHJcblx0Ly9TdmMgZnVuY3Rpb25zXHJcblx0c3ZjLmdldFRyYWNrQXJyYXlDb3VudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRyYWNrQXJyYXlDb3VudDtcclxuXHR9XHJcblxyXG5cdHN2Yy5nZXRUcmFja0lkQXJyYXkgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0cmFja0lkQXJyYXk7XHJcblx0fVxyXG5cclxuXHJcblx0c3ZjLmFkZFRvVHJhY2tBcnJheSA9IGZ1bmN0aW9uKHRyYWNrKSB7XHJcblx0XHR0cmFja0FycmF5LnB1c2godHJhY2spO1xyXG5cdFx0aW5jcmVtZW50VHJhY2tBcnJheUNvdW50KCk7XHJcblx0XHRhZGRUb1RyYWNrSWRBcnJheSh0cmFjay5pZCk7XHJcblx0XHRyZXR1cm4gdHJhY2tBcnJheTtcclxuXHR9XHJcblxyXG5cdHN2Yy5yZW1vdmVGcm9tVHJhY2tBcnJheSA9IGZ1bmN0aW9uKHRyYWNrKSB7XHJcblx0XHRpbmRleCA9IHRyYWNrLmFycmF5T2JqZWN0SW5kZXhPZih0cmFja0FycmF5LCB0cmFjay5pZCwgXCJpZFwiKTtcclxuXHRcdGlmKGluZGV4ID4gLTEpIHtcclxuXHRcdFx0dHJhY2tBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRkZWNyZW1lbnRUcmFja0FycmF5Q291bnQoKTtcclxuXHRcdHJlbW92ZUZyb21UcmFja0lkQXJyYXkodHJhY2suaWQpO1xyXG5cdFx0cmV0dXJuIHRyYWNrQXJyYXk7XHJcblx0fVxyXG5cclxuXHRzdmMuZ2V0VHJhY2tBcnJheSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRyYWNrQXJyYXk7XHJcblx0fVxyXG5cclxuXHRcclxuXHJcblxyXG5cclxuXHJcblx0c3ZjLnRlc3RGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0YWxlcnQoXCJUZXN0IGZ1bmN0aW9uIGNhbGxlZCBmcm9tIGluc2lkZSBzZXJ2aWNlIVwiKTtcclxuXHR9XHJcbn0pIiwiYXBwLnNlcnZpY2UoXCJmaWx0ZXJTZXJ2aWNlXCIsIGZ1bmN0aW9uKGluc3RydW1lbnRTZXJ2aWNlKSB7XHJcblx0XHJcblx0dmFyIHN2YyA9IHRoaXM7XHJcblx0dmFyIGluc3RTdmMgPSBpbnN0cnVtZW50U2VydmljZTtcclxuXHJcblxyXG5cdHN2Yy5jcmVhdGVTb2xvRmlsdGVyRGF0YSA9IGZ1bmN0aW9uKClcclxuXHR7XHJcblx0XHRzdmMuc29sb0ZpbHRlckRhdGEgPSB7XHRcImFydGlzdFwiOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XCJ0aXRsZVwiOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0fTtcclxuXHJcblx0XHRhbmd1bGFyLmZvckVhY2goaW5zdFN2Yy5pbnN0cnVtZW50cywgZnVuY3Rpb24odmFsdWUsIGtleSlcclxuXHRcdHtcclxuXHRcdFx0c3ZjLnNvbG9GaWx0ZXJEYXRhW3ZhbHVlLmlkXSA9IHRydWU7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHN2Yy5jcmVhdGVNZXJnZWRGaWx0ZXJEYXRhID0gZnVuY3Rpb24oKVxyXG5cdHtcclxuXHRcdHN2Yy5tZXJnZWRGaWx0ZXJEYXRhID0ge1x0XCJhcnRpc3RcIjogXCJcIixcclxuXHRcdFx0XHRcdFx0XHRcdFx0XCJ0aXRsZVwiOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gX2luaXQoKSB7XHJcblx0XHRzdmMuY3JlYXRlU29sb0ZpbHRlckRhdGEoKTtcclxuXHRcdHN2Yy5jcmVhdGVNZXJnZWRGaWx0ZXJEYXRhKCk7XHJcblx0fVxyXG5cclxuXHRfaW5pdCgpO1xyXG59KSIsImFwcC5zZXJ2aWNlKFwiaW5zdHJ1bWVudFNlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuXHRcclxuXHQvL0dsb2JhbHNcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGdldERhdGEgKHVybCwgb3B0aW9ucykge1xyXG5cclxuXHRcdCFvcHRpb25zID8gb3B0aW9ucyA9IHt9IDogXCJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCwgb3B0aW9ucylcclxuXHR9XHJcblxyXG5cdC8vU3ZjIGZ1bmN0aW9uc1xyXG5cdHN2Yy5nZXRJbnN0cnVtZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgdXJsID0gQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL2luc3RydW1lbnRzXCI7XHJcblx0XHRcclxuXHRcdHJldHVybiBnZXREYXRhKHVybCk7XHJcblx0fVxyXG5cclxuXHRzdmMuaW5zdHJ1bWVudHMgPSBbe1xyXG5cdFx0XHRcdFx0XHRcdFwibmFtZVwiOlwiTGVhZC1ndWl0YXJcIixcclxuXHRcdFx0XHRcdFx0XHRcImlkXCI6MVxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6XCJEcnVtXCIsXHJcblx0XHRcdFx0XHRcdFx0XCJpZFwiOjJcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFwibmFtZVwiOlwiQmFzc1wiLFxyXG5cdFx0XHRcdFx0XHRcdFwiaWRcIjozXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcIm5hbWVcIjpcIktleXNcIixcclxuXHRcdFx0XHRcdFx0XHRcImlkXCI6NFxyXG5cdFx0XHRcdFx0XHR9XTtcclxufSkiLCJhcHAuc2VydmljZShcIm1lcmdlZFNlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuXHRcclxuXHQvL0dsb2JhbHNcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0Ly9Qcml2YXRlIGZ1bmN0aW9uc1xyXG5cdGZ1bmN0aW9uIGdldERhdGEgKHVybCwgb3B0aW9ucykge1xyXG5cclxuXHRcdCFvcHRpb25zID8gb3B0aW9ucyA9IHt9IDogXCJcIjtcclxuXHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCwgb3B0aW9ucylcclxuXHR9XHJcblxyXG5cdC8vU3ZjIGZ1bmN0aW9uc1xyXG5cdHN2Yy5nZXRUcmFja3MgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIHVybCA9IENPTlNUQU5UUy5BUElfQkFTRV9VUkwgKyBcIi9tZXJnZWR0cmFja3NcIjtcclxuXHRcdFxyXG5cdFx0cmV0dXJuIGdldERhdGEodXJsKTtcclxuXHR9XHJcblxyXG5cdHN2Yy5nZXRUcmFja0J5SWQgPSBmdW5jdGlvbiAoaWQpIHtcclxuXHJcblx0XHR2YXIgdXJsID0gQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL21lcmdlZHRyYWNrcy9cIiArIGlkO1xyXG5cclxuXHRcdHJldHVybiBnZXREYXRhKHVybCk7XHJcblx0fVxyXG5cclxuXHRzdmMubWVyZ2VUcmFja3MgPSBmdW5jdGlvbihkYXRhKVxyXG5cdHtcclxuXHRcdHJldHVybiAkaHR0cC5wb3N0KENPTlNUQU5UUy5BUElfQkFTRV9VUkwgKyBcIi9tZXJnZWR0cmFja3MvY3JlYXRlXCIsIGRhdGEpO1xyXG5cdH1cclxufSkiLCJhcHAuc2VydmljZShcInNvbG9TZXJ2aWNlXCIsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblx0XHJcblx0Ly9HbG9iYWxzXHJcblx0dmFyIHN2YyA9IHRoaXM7XHJcblxyXG5cdC8vUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHRmdW5jdGlvbiBnZXREYXRhICh1cmwsIG9wdGlvbnMpIHtcclxuXHJcblx0XHQhb3B0aW9ucyA/IG9wdGlvbnMgPSB7fSA6IFwiXCI7XHJcblxyXG5cdFx0cmV0dXJuICRodHRwLmdldCh1cmwsIG9wdGlvbnMpXHJcblx0fVxyXG5cclxuXHQvL1N2YyBmdW5jdGlvbnNcclxuXHRzdmMuZ2V0VHJhY2tzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB1cmwgPSBDT05TVEFOVFMuQVBJX0JBU0VfVVJMICsgXCIvdHJhY2tzXCI7XHJcblx0XHRcclxuXHRcdHJldHVybiBnZXREYXRhKHVybCk7XHJcblx0fVxyXG5cclxuXHRzdmMuZ2V0VHJhY2tCeUlkID0gZnVuY3Rpb24gKGlkKSB7XHJcblxyXG5cdFx0dmFyIHVybCA9IENPTlNUQU5UUy5BUElfQkFTRV9VUkwgKyBcIi90cmFja3MvXCIgKyBpZDtcclxuXHJcblx0XHRyZXR1cm4gZ2V0RGF0YSh1cmwpO1xyXG5cdH1cclxuXHJcblx0c3ZjLmluc2VydFRyYWNrID0gZnVuY3Rpb24oZGF0YSlcclxuXHR7XHJcblx0XHRyZXR1cm4gJGh0dHAucG9zdChDT05TVEFOVFMuQVBJX0JBU0VfVVJMICsgXCIvdHJhY2tzL2NyZWF0ZVwiLCBkYXRhKTtcclxuXHR9XHJcbn0pIiwiYXBwLnNlcnZpY2UoXCJ1c2VyU2VydmljZVwiLCBmdW5jdGlvbigkaHR0cCkge1x0XHJcblx0XHJcblx0dmFyIHN2YyA9IHRoaXM7XHJcblxyXG5cdHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKVxyXG5cdHtcclxuXHRcdHJldHVybiAkaHR0cC5nZXQoQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL3VzZXJcIik7XHJcblx0fVxyXG5cclxuXHRzdmMudXBkYXRlVXNlciA9IGZ1bmN0aW9uKGRhdGEpXHJcblx0e1xyXG5cdFx0cmV0dXJuICRodHRwLnBvc3QoQ09OU1RBTlRTLkFQSV9CQVNFX1VSTCArIFwiL3VzZXJcIiwgZGF0YSk7XHJcblx0fVxyXG59KSIsImFwcC5kaXJlY3RpdmUoXCJkY2JCYW5kXCIsIGZ1bmN0aW9uKGJhbmRTZXJ2aWNlKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHJlc3RyaWN0OiBcIkVcIixcclxuXHRcdHRlbXBsYXRlVXJsOiBcImFwcC9kaXJlY3RpdmVzL2RjYi1iYW5kL2RjYi1iYW5kLmh0bWxcIixcclxuXHRcdHJlcGxhY2U6IHRydWUsXHJcblx0XHRzY29wZToge30sXHJcblx0XHRjb250cm9sbGVyQXM6IFwiYmFuZFwiLFxyXG5cdFx0Y29udHJvbGxlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciB2bSA9IHRoaXM7XHJcblx0XHRcdHZhciBiYW5kU3ZjID0gYmFuZFNlcnZpY2U7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBfaW5pdCgpIHtcclxuXHRcdFx0XHR2bS52YWx1ZSA9IFwiTmV3QmFuZFwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfaW5pdCgpO1xyXG5cdFx0fVxyXG5cdH1cclxufSkiLCJhcHAuZGlyZWN0aXZlKFwiZGNiSGVhZGVyXCIsIGZ1bmN0aW9uKGJhbmRTZXJ2aWNlKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHJlc3RyaWN0OiBcIkVcIixcclxuXHRcdHRlbXBsYXRlVXJsOiBcImFwcC9kaXJlY3RpdmVzL2RjYi1oZWFkZXIvZGNiLWhlYWRlci5odG1sXCIsXHJcblx0XHRyZXBsYWNlOiB0cnVlLFxyXG5cdFx0c2NvcGU6IHt9LFxyXG5cdFx0Y29udHJvbGxlckFzOiBcImhlYWRcIixcclxuXHRcdGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSwgdXNlclNlcnZpY2UsIGF1dGhTZXJ2aWNlLCAkYXV0aCwgJHJvb3RTY29wZSkge1xyXG5cdFx0XHRcclxuXHRcdFx0dmFyIHZtIFx0XHRcdD0gdGhpcztcclxuXHRcdFx0dmFyIHVzZXJTdmMgXHQ9IHVzZXJTZXJ2aWNlO1xyXG5cdFx0XHR2YXIgYXV0aFN2YyBcdD0gYXV0aFNlcnZpY2U7XHJcblx0XHRcdHZhciBiYW5kU3ZjIFx0PSBiYW5kU2VydmljZTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIF9pbml0KCkge1xyXG5cdFx0XHRcdHZtLnRyYWNrQXJyYXkgPSBiYW5kU3ZjLmdldFRyYWNrQXJyYXk7XHJcblx0XHRcdFx0dm0udHJhY2tBcnJheUNvdW50ID0gYmFuZFN2Yy5nZXRUcmFja0FycmF5Q291bnQ7XHJcblxyXG5cdFx0XHRcdGlmKCRhdXRoLmlzQXV0aGVudGljYXRlZCgpKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHVzZXJTdmMuZ2V0VXNlcigpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuXHRcdFx0XHRcdFx0JHJvb3RTY29wZS51c2VybmFtZSA9IGRhdGEuZGF0YS51c2VybmFtZTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dm0uc2hvd0xvZ2luID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdCQoJyNsb2dpbl9tb2RhbCcpLm1vZGFsKCk7XHJcblx0XHRcdFx0JCgnI2xvZ2luX21vZGFsJykubW9kYWwoJ29wZW4nKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dm0ubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGF1dGhTdmMubG9nb3V0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZtLnNob3dSZWdpc3RlciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHQkKCcjcmVnaXN0ZXJfbW9kYWwnKS5tb2RhbCgpO1xyXG5cdFx0XHRcdCQoJyNyZWdpc3Rlcl9tb2RhbCcpLm1vZGFsKCdvcGVuJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZtLmlzQXV0aGVudGljYXRlZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAkYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdF9pbml0KCk7XHJcblxyXG5cdFx0XHQvL1dhdGNoZXNcclxuXHRcdFx0JHNjb3BlLiR3YXRjaChcclxuXHRcdFx0XHRmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoU3ZjLnVzZXIgfSwgXHJcblx0XHRcdFx0ZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHRcdHZtLnVzZXIgPSBhdXRoU3ZjLnVzZXI7XHJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKHZtLnVzZXIpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufSkiLCJhcHAuZGlyZWN0aXZlKFwiZGNiTG9naW5cIiwgZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHJlc3RyaWN0OiBcIkVcIixcclxuXHRcdHRlbXBsYXRlVXJsOiBcImFwcC9kaXJlY3RpdmVzL2RjYi1sb2dpbi9kY2ItbG9naW4uaHRtbFwiLFxyXG5cdFx0cmVwbGFjZTogdHJ1ZSxcclxuXHRcdHNjb3BlOiB7fSxcclxuXHRcdGNvbnRyb2xsZXJBczogXCJsb2dpblwiLFxyXG5cdFx0Y29udHJvbGxlcjogZnVuY3Rpb24oJGF1dGgsICRzY29wZSwgJHJvb3RTY29wZSwgdXNlclNlcnZpY2UsIGF1dGhTZXJ2aWNlLCAkY29va2llcykge1xyXG5cdFx0XHR2YXIgdm0gXHRcdFx0PSB0aGlzO1xyXG5cdFx0XHR2YXIgdXNlclN2YyBcdD0gdXNlclNlcnZpY2U7XHJcblx0XHRcdHZhciBhdXRoU3ZjIFx0PSBhdXRoU2VydmljZTtcclxuXHRcdFx0dmFyIHRhcmdldCBcdFx0PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9naW4tc3Bpbm5lcicpO1xyXG5cclxuXHRcdFx0dmFyIG9wdHMgPSB7XHJcblx0ICBcdFx0XHRsaW5lczogMTMgLy8gVGhlIG51bWJlciBvZiBsaW5lcyB0byBkcmF3XHJcblx0XHRcdFx0LCBsZW5ndGg6IDI4IC8vIFRoZSBsZW5ndGggb2YgZWFjaCBsaW5lXHJcblx0XHRcdFx0LCB3aWR0aDogMTQgLy8gVGhlIGxpbmUgdGhpY2tuZXNzXHJcblx0XHRcdFx0LCByYWRpdXM6IDQyIC8vIFRoZSByYWRpdXMgb2YgdGhlIGlubmVyIGNpcmNsZVxyXG5cdFx0XHRcdCwgc2NhbGU6IDAuNCAvLyBTY2FsZXMgb3ZlcmFsbCBzaXplIG9mIHRoZSBzcGlubmVyXHJcblx0XHRcdFx0LCBjb3JuZXJzOiAxIC8vIENvcm5lciByb3VuZG5lc3MgKDAuLjEpXHJcblx0XHRcdFx0LCBjb2xvcjogJyMwMDAnIC8vICNyZ2Igb3IgI3JyZ2diYiBvciBhcnJheSBvZiBjb2xvcnNcclxuXHRcdFx0XHQsIG9wYWNpdHk6IDAuMjUgLy8gT3BhY2l0eSBvZiB0aGUgbGluZXNcclxuXHRcdFx0XHQsIHJvdGF0ZTogMCAvLyBUaGUgcm90YXRpb24gb2Zmc2V0XHJcblx0XHRcdFx0LCBkaXJlY3Rpb246IDEgLy8gMTogY2xvY2t3aXNlLCAtMTogY291bnRlcmNsb2Nrd2lzZVxyXG5cdFx0XHRcdCwgc3BlZWQ6IDEgLy8gUm91bmRzIHBlciBzZWNvbmRcclxuXHRcdFx0XHQsIHRyYWlsOiA2MCAvLyBBZnRlcmdsb3cgcGVyY2VudGFnZVxyXG5cdFx0XHRcdCwgZnBzOiAyMCAvLyBGcmFtZXMgcGVyIHNlY29uZCB3aGVuIHVzaW5nIHNldFRpbWVvdXQoKSBhcyBhIGZhbGxiYWNrIGZvciBDU1NcclxuXHRcdFx0XHQsIHpJbmRleDogMmU5IC8vIFRoZSB6LWluZGV4IChkZWZhdWx0cyB0byAyMDAwMDAwMDAwKVxyXG5cdFx0XHRcdCwgY2xhc3NOYW1lOiAnc3Bpbm5lcicgLy8gVGhlIENTUyBjbGFzcyB0byBhc3NpZ24gdG8gdGhlIHNwaW5uZXJcclxuXHRcdFx0XHQsIHRvcDogJzYwJScgLy8gVG9wIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHBhcmVudFxyXG5cdFx0XHRcdCwgbGVmdDogJzUwJScgLy8gTGVmdCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuXHRcdFx0XHQsIHNoYWRvdzogZmFsc2UgLy8gV2hldGhlciB0byByZW5kZXIgYSBzaGFkb3dcclxuXHRcdFx0XHQsIGh3YWNjZWw6IGZhbHNlIC8vIFdoZXRoZXIgdG8gdXNlIGhhcmR3YXJlIGFjY2VsZXJhdGlvblxyXG5cdFx0XHRcdCwgcG9zaXRpb246ICdhYnNvbHV0ZScgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvL1ByaXZhdGUgZnVuY3Rpb25zXHJcblx0XHRcdGZ1bmN0aW9uIGxvZ2luICh0b2tlbiwgaWQsIHVzZXJuYW1lLCBlbWFpbCkge1xyXG5cclxuXHRcdFx0XHR2YXIgZXhwaXJhdGlvblRpbWUgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRcdGV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWUuc2V0VGltZShleHBpcmF0aW9uVGltZS5nZXRUaW1lKCkgKyAodG9rZW5bXCJleHBpcmVzX2luXCJdICogMTAwMCkpO1xyXG5cdFx0XHRcdGV4cGlyYXRpb25UaW1lID0gbmV3IERhdGUoZXhwaXJhdGlvblRpbWUpO1xyXG5cclxuXHRcdFx0XHR2YXIgdXNlckRhdGEgPSB7XHJcblxyXG5cdFx0XHRcdFx0dG9rZW46IHRva2VuLFxyXG5cdFx0XHRcdFx0dXNlcklkOiBpZCxcclxuXHRcdFx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSxcclxuXHRcdFx0XHRcdGVtYWlsOiBlbWFpbCxcclxuXHRcdFx0XHRcdC8vaXNBZG1pbjogZGF0YS5kYXRhLmlzQWRtaW5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHVzZXJEYXRhLnRva2VuKTtcclxuXHJcblx0XHRcdFx0YXV0aFN2Yy51c2VyID0gdXNlckRhdGE7XHJcblxyXG5cdFx0XHRcdCRjb29raWVzLnB1dE9iamVjdChcInVzZXJcIiwgdXNlckRhdGEsIHsgZXhwaXJlczogZXhwaXJhdGlvblRpbWUgfSk7XHJcblx0XHRcdFx0JHJvb3RTY29wZS5pc0xvZ2dlZEluID0gdHJ1ZTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvL0NoZWNrIGlmIHJldHVybmVkIHVzZXIgaXMgQWRtaW5cclxuXHRcdFx0XHR1c2VyRGF0YS5pc0FkbWluID09IFwiMVwiID8gJHJvb3RTY29wZS5pc0FkbWluID0gdHJ1ZSA6ICRyb290U2NvcGUuaXNBZG1pbiA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0Ly9WbSBmdW5jdGlvbnNcclxuXHQgICAgICAgIHZtLmxvZ2luID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgICBcdHZhciBzcGlubmVyID0gbmV3IFNwaW5uZXIob3B0cykuc3Bpbih0YXJnZXQpO1xyXG5cdCAgICAgICAgXHR2bS5sb2FkaW5nIFx0PSB0cnVlO1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgY3JlZGVudGlhbHMgPSB7XHJcblx0ICAgICAgICAgICAgICAgIGVtYWlsOiB2bS5lbWFpbCxcclxuXHQgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHZtLnBhc3N3b3JkXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIFxyXG5cdCAgICAgICAgICAgIGF1dGhTdmMubG9naW4oY3JlZGVudGlhbHMpO1xyXG5cdCAgICAgICAgICAgIC8vV2F0Y2hlc1xyXG5cdFx0XHRcdHZhciB1bnJlZ2lzdGVyID0gJHNjb3BlLiR3YXRjaChcclxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhTdmMuaXNMb2dnZWRJbiB9LCBcclxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ2lzTG9nZ2VkSW46ICcgKyBhdXRoU3ZjLmlzTG9nZ2VkSW4pO1xyXG5cdFx0XHRcdFx0XHRpZihhdXRoU3ZjLmlzTG9nZ2VkSW4pIFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdCAgICAgICAgXHQkKCcjbG9naW5fbW9kYWwnKS5tb2RhbCgpO1xyXG5cdFx0XHRcdFx0XHRcdCQoJyNsb2dpbl9tb2RhbCcpLm1vZGFsKCdjbG9zZScpO1xyXG5cdFx0XHRcdCAgICAgICAgXHRzcGlubmVyLnN0b3AoKTtcclxuXHRcdFx0XHQgICAgICAgIFx0dW5yZWdpc3RlcigpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmKGF1dGhTdmMuaXNMb2dnZWRJbiA9PT0gZmFsc2UpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRzcGlubmVyLnN0b3AoKTtcclxuICAgICAgICBcdFx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIFx0XHRcdFx0XHR1bnJlZ2lzdGVyKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sIHRydWUpO1xyXG5cdCAgICAgICAgfVxyXG5cdFx0fVxyXG5cdH1cclxufSkiLCJhcHAuZGlyZWN0aXZlKFwiZGNiUmVnaXN0ZXJcIiwgZnVuY3Rpb24odXNlclNlcnZpY2UpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0cmVzdHJpY3Q6IFwiRVwiLFxyXG5cdFx0dGVtcGxhdGVVcmw6IFwiYXBwL2RpcmVjdGl2ZXMvZGNiLXJlZ2lzdGVyL2RjYi1yZWdpc3Rlci5odG1sXCIsXHJcblx0XHRyZXBsYWNlOiB0cnVlLFxyXG5cdFx0c2NvcGU6IHt9LFxyXG5cdFx0Y29udHJvbGxlckFzOiBcInJlZ2lzdGVyXCIsXHJcblx0XHRjb250cm9sbGVyOiBmdW5jdGlvbigkYXV0aCwgJHNjb3BlLCAkcm9vdFNjb3BlLCB1c2VyU2VydmljZSwgYXV0aFNlcnZpY2UpIHtcclxuXHRcdFx0dmFyIHZtIFx0XHRcdD0gdGhpcztcclxuXHRcdFx0dmFyIHVzZXJTdmMgXHQ9IHVzZXJTZXJ2aWNlO1xyXG5cdFx0XHR2YXIgYXV0aFN2YyBcdD0gYXV0aFNlcnZpY2U7XHJcblx0XHRcdHZhciB0YXJnZXQgXHRcdD0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlZ2lzdGVyLXNwaW5uZXInKTtcclxuXHJcblx0XHRcdHZhciBvcHRzID0ge1xyXG5cdCAgXHRcdFx0bGluZXM6IDEzIC8vIFRoZSBudW1iZXIgb2YgbGluZXMgdG8gZHJhd1xyXG5cdFx0XHRcdCwgbGVuZ3RoOiAyOCAvLyBUaGUgbGVuZ3RoIG9mIGVhY2ggbGluZVxyXG5cdFx0XHRcdCwgd2lkdGg6IDE0IC8vIFRoZSBsaW5lIHRoaWNrbmVzc1xyXG5cdFx0XHRcdCwgcmFkaXVzOiA0MiAvLyBUaGUgcmFkaXVzIG9mIHRoZSBpbm5lciBjaXJjbGVcclxuXHRcdFx0XHQsIHNjYWxlOiAwLjQgLy8gU2NhbGVzIG92ZXJhbGwgc2l6ZSBvZiB0aGUgc3Bpbm5lclxyXG5cdFx0XHRcdCwgY29ybmVyczogMSAvLyBDb3JuZXIgcm91bmRuZXNzICgwLi4xKVxyXG5cdFx0XHRcdCwgY29sb3I6ICcjMDAwJyAvLyAjcmdiIG9yICNycmdnYmIgb3IgYXJyYXkgb2YgY29sb3JzXHJcblx0XHRcdFx0LCBvcGFjaXR5OiAwLjI1IC8vIE9wYWNpdHkgb2YgdGhlIGxpbmVzXHJcblx0XHRcdFx0LCByb3RhdGU6IDAgLy8gVGhlIHJvdGF0aW9uIG9mZnNldFxyXG5cdFx0XHRcdCwgZGlyZWN0aW9uOiAxIC8vIDE6IGNsb2Nrd2lzZSwgLTE6IGNvdW50ZXJjbG9ja3dpc2VcclxuXHRcdFx0XHQsIHNwZWVkOiAxIC8vIFJvdW5kcyBwZXIgc2Vjb25kXHJcblx0XHRcdFx0LCB0cmFpbDogNjAgLy8gQWZ0ZXJnbG93IHBlcmNlbnRhZ2VcclxuXHRcdFx0XHQsIGZwczogMjAgLy8gRnJhbWVzIHBlciBzZWNvbmQgd2hlbiB1c2luZyBzZXRUaW1lb3V0KCkgYXMgYSBmYWxsYmFjayBmb3IgQ1NTXHJcblx0XHRcdFx0LCB6SW5kZXg6IDJlOSAvLyBUaGUgei1pbmRleCAoZGVmYXVsdHMgdG8gMjAwMDAwMDAwMClcclxuXHRcdFx0XHQsIGNsYXNzTmFtZTogJ3NwaW5uZXInIC8vIFRoZSBDU1MgY2xhc3MgdG8gYXNzaWduIHRvIHRoZSBzcGlubmVyXHJcblx0XHRcdFx0LCB0b3A6ICc2MCUnIC8vIFRvcCBwb3NpdGlvbiByZWxhdGl2ZSB0byBwYXJlbnRcclxuXHRcdFx0XHQsIGxlZnQ6ICc1MCUnIC8vIExlZnQgcG9zaXRpb24gcmVsYXRpdmUgdG8gcGFyZW50XHJcblx0XHRcdFx0LCBzaGFkb3c6IGZhbHNlIC8vIFdoZXRoZXIgdG8gcmVuZGVyIGEgc2hhZG93XHJcblx0XHRcdFx0LCBod2FjY2VsOiBmYWxzZSAvLyBXaGV0aGVyIHRvIHVzZSBoYXJkd2FyZSBhY2NlbGVyYXRpb25cclxuXHRcdFx0XHQsIHBvc2l0aW9uOiAnYWJzb2x1dGUnIC8vIEVsZW1lbnQgcG9zaXRpb25pbmdcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdFxyXG5cdFx0XHR2bS5yZWdpc3RlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBzcGlubmVyID0gbmV3IFNwaW5uZXIob3B0cykuc3Bpbih0YXJnZXQpO1xyXG5cdCAgICAgICAgXHR2bS5sb2FkaW5nIFx0PSB0cnVlO1xyXG5cclxuXHRcdFx0XHR2YXIgdXNlciA9IHtcclxuXHRcdFx0XHQgIFx0dXNlcm5hbWU6IHZtLnVzZXJuYW1lLFxyXG5cdFx0XHRcdCAgXHRlbWFpbDogdm0uZW1haWwsXHJcblx0XHRcdFx0ICBcdHBhc3N3b3JkOiB2bS5wYXNzd29yZFxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdCRhdXRoLnNpZ251cCh1c2VyKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHQvLyBSZWdpc3RyYXRpb24gc3VjY2Vzc1xyXG5cdFx0XHRcdFx0YXV0aFN2Yy5sb2dpbih1c2VyKTtcclxuXHJcblx0XHQgICAgICAgICAgICAvL1dhdGNoZXNcclxuXHRcdFx0XHRcdHZhciB1bnJlZ2lzdGVyID0gJHNjb3BlLiR3YXRjaChcclxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24gKCkgeyByZXR1cm4gYXV0aFN2Yy5pc0xvZ2dlZEluIH0sIFxyXG5cdFx0XHRcdFx0XHRmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmKGF1dGhTdmMuaXNMb2dnZWRJbikgXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0ICAgICAgICBcdCQoJyNyZWdpc3Rlcl9tb2RhbCcpLm1vZGFsKCk7XHJcblx0XHRcdFx0XHRcdFx0XHQkKCcjcmVnaXN0ZXJfbW9kYWwnKS5tb2RhbCgnY2xvc2UnKTtcclxuXHRcdFx0XHRcdCAgICAgICAgXHRzcGlubmVyLnN0b3AoKTtcclxuXHRcdFx0XHRcdCAgICAgICAgXHR1bnJlZ2lzdGVyKCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmKGF1dGhTdmMuaXNMb2dnZWRJbiA9PT0gZmFsc2UpXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0c3Bpbm5lci5zdG9wKCk7XHJcblx0ICAgICAgICBcdFx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdCAgICAgICAgXHRcdFx0XHRcdHVucmVnaXN0ZXIoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0sIHRydWUpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHQvLyBSZWdpc3RyYXRpb24gZmFpbGVkXHJcblx0XHRcdFx0ICBcdHNwaW5uZXIuc3RvcCgpO1xyXG5cdFx0XHRcdCAgXHR2bS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdFx0ICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSkiXX0=
