var app=angular.module("app",["ui.router"]),CONSTANTS=function(){var e={};return e}();app.config(["$stateProvider","$urlRouterProvider",function(e,r){r.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/pages/home.html",controller:"homeController as home"}).state("solo",{url:"/solo",templateUrl:"app/pages/solo.html",controller:"soloController as solo"}).state("merged",{url:"/merged",templateUrl:"app/pages/merged.html",controller:"mergedController as merged"}).state("band",{url:"/band",templateUrl:"app/pages/band.html",controller:"bandController as band"}).state("merge",{url:"/merge",templateUrl:"app/pages/merge.html",controller:"mergeController as merge"})}]),app.controller("bandController",["bandService",function(e){function r(){t.gg=o.testValue}var t=this,o=e;r()}]),app.controller("homeController",["testService",function(e){function r(){t.test="This value has been initiated through _init() and bound to the scope!",t.svcTest=o.testValue}var t=this,o=e;r()}]),app.controller("mergeController",function(){function e(){}e()}),app.controller("mergedController",function(){function e(){r.test="Merged"}var r=this;e()}),app.controller("soloController",["bandService",function(e){function r(){}var t=this,o=e;playAudioFile=function(e){e.play()},t.addToBand=function(e){console.log(e),o.trackArray.push(e),console.log("TRACKLIST: "+o.trackArray)},r(),t.track1=new Audio("dist/audio/Behemoth - Conquer All - Drum.mp3"),t.track2=new Audio("dist/audio/Behemoth - Conquer All - Guitar.mp3"),t.instruments=["Guitar","Bass","Vocals","Drums","Keys"],t.soloTracks=[{id:1,songname:"Conquer All",string:"/dist/audio/Behemoth - Conquer All - Drum.mp3",user_id:1,instrument_id:1,artist_id:1},{id:1,songname:"Conquer All",string:"/dist/audio/Behemoth - Conquer All - Guitar.mp3",user_id:2,instrument_id:2,artist_id:1}]}]),app.service("bandService",function(){var e=this;e.testValue="This value is from a service!",e.trackArray=[],e.testFunction=function(){alert("Test function called from inside service!")}}),app.directive("dcbBand",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-band/dcb-band.html",replace:!0,scope:{},controllerAs:"band",controller:function(){function e(){r.value="NewBand"}var r=this;e()}}}]),app.directive("dcbHeader",function(){return{restrict:"E",templateUrl:"app/directives/dcb-header/dcb-header.html",replace:!0,scope:{},controllerAs:"head",controller:function(){function e(){r.value="This is a directive test value!"}var r=this;e()}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
