var app=angular.module("app",["ui.router","satellizer","ngCookies","ngFileUpload"]),CONSTANTS=function(){var e={};return e.API_BASE_URL="http://discoverbandapi.int/public/api",e}();app.config(["$stateProvider","$urlRouterProvider","$authProvider","$httpProvider",function(e,r,t,n){t.loginUrl=CONSTANTS.API_BASE_URL+"/login",t.signupUrl=CONSTANTS.API_BASE_URL+"/register",r.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/pages/home.html",controller:"homeController as home"}).state("solo",{url:"/solo",templateUrl:"app/pages/solo.html",controller:"soloController as solo"}).state("merged",{url:"/merged",templateUrl:"app/pages/merged.html",controller:"mergedController as merged"}).state("band",{url:"/band",templateUrl:"app/pages/band.html",controller:"bandController as band"}).state("merge",{url:"/merge",templateUrl:"app/pages/merge.html",controller:"mergeController as merge"}).state("profile",{url:"/profile",templateUrl:"app/pages/profile.html",controller:"profileController as profile",data:{requiresLoggedIn:!0}}).state("upload",{url:"/upload",templateUrl:"app/pages/upload.html",controller:"uploadController as upload",data:{requiresLoggedIn:!0}})}]).run(["$rootScope","$location","$auth","$state",function(e,r,t,n){function a(e){return!e.data||!e.data.requiresLoggedIn||t.isAuthenticated()}var o="/";e.$on("$stateChangeStart",function(e,t,i,c,s){var l=t.url;i&&(l=n.href(t,i),l=l.replace("#","")),a(t)?r.path(l):(console.log("notLoggedIn"),r.path(o))})}]),app.controller("bandController",["bandService",function(e){function r(){t.trackArray=n.getTrackArray}var t=this,n=e;r()}]),app.controller("homeController",["instrumentService","filterService",function(e,r){function t(){n.filterData=a.soloFilterData}var n=this,a=r;t()}]),app.controller("mergeController",["bandService","mergedService","$state",function(e,r,t){function n(){a.tracks=o.getTrackArray(),a.showTracks=!1,a.thereAreTracks=!1,a.loadedTracks=[],a.savedTime=[],a.trimAmounts=[],a.tracks.length>0&&(a.thereAreTracks=!0)}var a=this,o=e,i=r,c=[];a.load=function(){if(a.thereAreTracks){for(var e=a.tracks.length-1;e>=0;e--){var r=a.tracks[e].id;c[r]=WaveSurfer.create({container:"#waveform"+r,waveColor:"green",progressColor:"purple"}),c[r].load("http://discoverbandapi.int/public/api/audio/"+a.tracks[e].file_url),a.loadedTracks.push({track_id:r,trim_amount:0})}a.showTracks=!0}},a.playPause=function(e){c[e].isPlaying()||(a.savedTime[e]=c[e].getCurrentTime(),console.log(a.savedTime)),c[e].playPause(),c[e].zoom(50)},a.trim=function(e){for(var r=c[e].getCurrentTime(),t=a.loadedTracks.length-1;t>=0;t--)a.loadedTracks[t].track_id===e&&(a.loadedTracks[t].trim_amount=r,a.trimAmounts[e]=Math.round(100*r)/100)},a.playPauseAll=function(){for(var e=a.loadedTracks.length-1;e>=0;e--){var r=a.loadedTracks[e].track_id;c[r].isPlaying()||(a.savedTime[r]=c[r].getCurrentTime(),console.log(a.savedTime)),c[r].playPause(),c[r].zoom(50)}},a.toPrevious=function(){for(var e=a.loadedTracks.length-1;e>=0;e--){var r=a.loadedTracks[e].track_id,t=a.savedTime[r],n=c[r].getDuration(),o=t/n;c[r].seekAndCenter(o)}},a.toStart=function(e){c[e].seekAndCenter(0)},a.save=function(){i.mergeTracks(a.loadedTracks).then(function(e){console.log(e),t.go("merged")},function(e){console.log(e)})},n()}]),app.controller("mergedController",["$scope","mergedService","filterService",function(e,r,t){function n(){r.getTracks().then(function(e){i.mergedTracks=e.data,i.filteredTracks=i.mergedTracks,a(),angular.forEach(i.mergedTracks,function(e,r){newTrack=new Audio("http://discoverbandapi.int/public/audio/"+e.file_url),i.mergedTrackAudio[e.id]=newTrack})},function(e){console.log(e)})}function a(){i.filteredTracks=[],angular.forEach(i.mergedTracks,function(e,r){goodSearch=!0,""!=!i.filterData.artist||e.artist.name.match(new RegExp(i.filterData.artist,"i"))||(goodSearch=!1),""!=!i.filterData.title||e.songname.match(new RegExp(i.filterData.title,"i"))||(goodSearch=!1),goodSearch&&i.filteredTracks.push(e)})}function o(){i.mergedTrackAudio=[],i.currentAudioTrackId="",n(),i.filterData=c.mergedFilterData}var i=this,c=t;i.play=function(e){""!=i.currentAudioTrackId&&i.pause(i.currentAudioTrackId),i.currentAudioTrackId=e,i.mergedTrackAudio[e].play()},i.pause=function(e){i.mergedTrackAudio[e].pause(),i.currentAudioTrackId=""},i.download=function(e){window.open(CONSTANTS.API_BASE_URL+"/mergedtracks/"+e+"/download","_blank","")},e.$watch(function(){return i.filterData},function(){i.filterData&&a()},!0),o()}]),app.controller("profileController",["userService",function(e){function r(){n.getUser().then(function(e){t.username=e.data.username,t.email=e.data.email})}var t=this,n=e,a=document.getElementById("update-profile-spinner"),o={lines:13,length:28,width:12,radius:42,scale:.15,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"89%",left:"25.5%",shadow:!1,hwaccel:!1,position:"absolute"};t.update=function(){var e=new Spinner(o).spin(a);t.loading=!0;var r={username:t.username,email:t.email};n.updateUser(r).then(function(r){e.stop(),t.loading=!1},function(r){e.stop(),t.loading=!1})},r()}]),app.controller("soloController",["$scope","bandService","soloService","instrumentService","filterService",function(e,r,t,n,a){function o(){u.getTracks().then(function(e){s.soloTracks=e.data,s.filteredTracks=s.soloTracks,i(),angular.forEach(s.soloTracks,function(e,r){newTrack=new Audio("http://discoverbandapi.int/public/audio/"+e.file_url),s.soloTrackAudio[e.id]=newTrack})},function(e){console.log(e)})}function i(){s.filteredTracks=[],angular.forEach(s.soloTracks,function(e,r){goodSearch=!0,""!=!s.filterData.artist||e.artist.name.match(new RegExp(s.filterData.artist,"i"))||(goodSearch=!1),""!=!s.filterData.title||e.songname.match(new RegExp(s.filterData.title,"i"))||(goodSearch=!1),s.filterData[e.instrument_id]||(goodSearch=!1),goodSearch&&s.filteredTracks.push(e)}),0===s.filteredTracks.length?s.showNoResultsFound=!0:s.showNoResultsFound=!1}function c(){s.soloTrackAudio=[],s.currentAudioTrackId="",s.showNoResultsFound=!1,d.getInstruments().then(function(e){s.instruments=e.data},function(e){console.log(e)}),o(),s.filterData=p.soloFilterData,s.trackArray=l.getTrackArray,s.bandTrackIdArray=l.getTrackIdArray,s.trackArrayCount=l.getTrackArrayCount}var s=this,l=r,u=t,d=n,p=a;s.addToBand=function(e){l.addToTrackArray(e),console.log(e)},s.removeFromBand=function(e){l.removeFromTrackArray(e),console.log("Track removed from new band: "+e)},s.play=function(e){""!=s.currentAudioTrackId&&s.pause(s.currentAudioTrackId),s.currentAudioTrackId=e,s.soloTrackAudio[e].play()},s.pause=function(e){s.soloTrackAudio[e].pause(),s.currentAudioTrackId=""},e.$watch(function(){return s.filterData},function(){s.filterData&&i()},!0),c()}]),app.controller("uploadController",["Upload","artistService","instrumentService","soloService","$state",function(e,r,t,n,a){function o(){c.uploaded=!1,c.showform=!1,c.instruments=u.getInstruments().then(function(e){c.instruments=e.data,console.log(e.data)},function(e){console.log(e)}),c.artists=l.getArtists().then(function(e){console.log(e.data),c.artists=e.data},function(e){console.log(e)})}function i(e){for(var r=e+"=",t=decodeURIComponent(document.cookie),n=t.split(";"),a=0;a<n.length;a++){for(var o=n[a];" "==o.charAt(0);)o=o.substring(1);if(0==o.indexOf(r))return o.substring(r.length,o.length)}return""}var c=this,s=n,l=r,u=t,d=document.getElementById("upload-spinner"),p={lines:13,length:28,width:12,radius:42,scale:.3,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"40%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};c.uploadFile=function(r){var t=new Spinner(p).spin(d);c.loading=!0,c.uploaded=!1,c.showform=!0,$("select").material_select(),e.upload({url:CONSTANTS.API_BASE_URL+"/upload",fileFormDataName:"song",sendFieldsAs:"form",data:{song:r}}).then(function(e){c.filename=e.data.name,c.tracklength=e.data.length,t.stop(),c.loading=!1,c.uploaded=!0},function(e){c.loading=!1,t.stop(),c.uploadfailed=!0})},c.save=function(){var e=JSON.parse(i("user")).userId,r={name:c.songname,file_url:c.filename,track_length:c.tracklength,user_id:e,instrument_id:c.instrumentsdropdown,artist_id:c.artistname};s.insertTrack(r).then(function(e){a.go("solo"),console.log(e)},function(e){console.log(e)})},o()}]),app.filter("band",function(){return function(e,r){var t=!1;return angular.forEach(r,function(r,n){r==e&&(t=!0)}),t}}),app.service("artistService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getArtists=function(){var e=CONSTANTS.API_BASE_URL+"/artists";return r(e)}}]),app.service("authService",["$auth","$rootScope","$cookies","$state","userService",function(e,r,t,n,a){function o(e,n,a,o){var c=new Date;c=c.setTime(c.getTime()+1e3*e.expires_in),c=new Date(c);var s={token:e,userId:n,username:a,email:o};i.user=s,t.putObject("user",s,{expires:c}),r.isLoggedIn=!0,"1"==s.isAdmin?r.isAdmin=!0:r.isAdmin=!1}var i=this,c=a;i.isLoggedIn=!1,i.login=function(r){e.login(r).then(function(e){token=e.data.token,id=0,username="",email="",c.getUser().then(function(e){id=e.data.id,username=e.data.username,email=e.data.email,o(token,id,username,email),i.isLoggedIn=!0},function(e){console.log(e),i.isLoggedIn=!1})},function(e){console.log(e),i.isLoggedIn=!1})},i.logout=function(){e.logout().then(function(e){r.isLoggedIn=!1,r.isAdmin=!1,i.user=null,i.isLoggedIn=null,t.remove("user"),n.go("home")},function(e){console.log(e)})},i.register=function(e){var r=CONSTANTS.API_BASE_URL+"/user";return $http.post(r,e)}}]),app.service("bandService",function(){function e(e,r,t){for(var n=0,a=e.length;n<a;n++)if(e[n][t]===r)return n;return-1}function r(){return trackArrayCount++,trackArrayCount}function t(){return trackArrayCount--,trackArrayCount}function n(e){return trackIdArray.push(e),trackIdArray}function a(e){return index=trackIdArray.indexOf(e),index>-1&&trackIdArray.splice(index,1),trackIdArray}var o=this;trackArray=[],trackIdArray=[],trackArrayCount=0,o.getTrackArrayCount=function(){return trackArrayCount},o.getTrackIdArray=function(){return trackIdArray},o.addToTrackArray=function(e){return trackArray.push(e),r(),n(e.id),trackArray},o.removeFromTrackArray=function(r){return index=e(trackArray,r.id,"id"),index>-1&&trackArray.splice(index,1),t(),a(r.id),trackArray},o.getTrackArray=function(){return trackArray},o.testFunction=function(){alert("Test function called from inside service!")}}),app.service("filterService",["instrumentService",function(e){function r(){t.createSoloFilterData(),t.createMergedFilterData()}var t=this,n=e;t.createSoloFilterData=function(){t.soloFilterData={artist:"",title:""},angular.forEach(n.instruments,function(e,r){t.soloFilterData[e.id]=!0})},t.createMergedFilterData=function(){t.mergedFilterData={artist:"",title:""}},r()}]),app.service("instrumentService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getInstruments=function(){var e=CONSTANTS.API_BASE_URL+"/instruments";return r(e)},t.instruments=[{name:"Lead-guitar",id:1},{name:"Rythm-guitar",id:2},{name:"Drum",id:3},{name:"Bass",id:4},{name:"Bass",id:5},{name:"Keys",id:6}]}]),app.service("mergedService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/mergedtracks";return r(e)},t.getTrackById=function(e){var t=CONSTANTS.API_BASE_URL+"/mergedtracks/"+e;return r(t)},t.mergeTracks=function(r){return e.post(CONSTANTS.API_BASE_URL+"/mergedtracks/create",r)},t.download=function(e){var t=CONSTANTS.API_BASE_URL+"/mergedtracks/"+e+"/download";return r(t)}}]),app.service("soloService",["$http",function(e){function r(r,t){return t?"":t={},e.get(r,t)}var t=this;t.getTracks=function(){var e=CONSTANTS.API_BASE_URL+"/tracks";return r(e)},t.getTrackById=function(e){var t=CONSTANTS.API_BASE_URL+"/tracks/"+e;return r(t)},t.insertTrack=function(r){return e.post(CONSTANTS.API_BASE_URL+"/tracks/create",r)}}]),app.service("userService",["$http",function(e){var r=this;r.getUser=function(){return e.get(CONSTANTS.API_BASE_URL+"/user")},r.updateUser=function(r){return e.post(CONSTANTS.API_BASE_URL+"/user",r)}}]),app.directive("dcbHeader",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-header/dcb-header.html",replace:!0,scope:{},controllerAs:"head",controller:["$scope","userService","authService","$auth","$rootScope",function(r,t,n,a,o){function i(){c.trackArray=u.getTrackArray,c.trackArrayCount=u.getTrackArrayCount,a.isAuthenticated()&&s.getUser().then(function(e){o.username=e.data.username})}var c=this,s=t,l=n,u=e;c.showLogin=function(){$("#login_modal").modal(),$("#login_modal").modal("open")},c.logout=function(){l.logout()},c.showRegister=function(){$("#register_modal").modal(),$("#register_modal").modal("open")},c.showBand=function(){$("#band_modal").modal(),$("#band_modal").modal("open")},c.isAuthenticated=function(){return a.isAuthenticated()},i(),r.$watch(function(){return l.user},function(){c.user=l.user})}]}}]),app.directive("dcbBand",["bandService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-band/dcb-band.html",replace:!0,scope:{},controllerAs:"band",controller:["$auth","$scope","$rootScope",function(r,t,n){function a(){o.trackArray=i.getTrackArray,o.bandTrackIdArray=i.getTrackIdArray,o.trackArrayCount=i.getTrackArrayCount}var o=this,i=e;o.removeFromBand=function(e){i.removeFromTrackArray(e),console.log("Track removed from new band: "+e)},a()}]}}]),app.directive("dcbLogin",function(){return{restrict:"E",templateUrl:"app/directives/dcb-login/dcb-login.html",replace:!0,scope:{},controllerAs:"login",controller:["$auth","$scope","$rootScope","userService","authService","$cookies",function(e,r,t,n,a,o){var i=this,c=a,s=document.getElementById("login-spinner"),l={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};i.login=function(){var e=new Spinner(l).spin(s);i.loading=!0,console.log(i.loading);var t={email:i.email,password:i.password};c.login(t);r.$watch(function(){return c.isLoggedIn},function(){c.isLoggedIn&&(i.loading=!1,$("#login_modal").modal(),$("#login_modal").modal("close"),e.stop()),c.isLoggedIn||(e.stop(),i.loading=!1)},!0)}}]}}),app.directive("dcbRegister",["userService",function(e){return{restrict:"E",templateUrl:"app/directives/dcb-register/dcb-register.html",replace:!0,scope:{},controllerAs:"register",controller:["$auth","$scope","$rootScope","userService","authService",function(e,r,t,n,a){var o=this,i=a,c=document.getElementById("register-spinner"),s={lines:13,length:28,width:14,radius:42,scale:.4,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:60,fps:20,zIndex:2e9,className:"spinner",top:"60%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};o.register=function(){var t=new Spinner(s).spin(c);o.loading=!0;var n={username:o.username,email:o.email,password:o.password};e.signup(n).then(function(e){i.login(n);var a=r.$watch(function(){return i.isLoggedIn},function(){i.isLoggedIn&&(o.loading=!1,$("#register_modal").modal(),$("#register_modal").modal("close"),t.stop(),a()),i.isLoggedIn===!1&&(t.stop(),o.loading=!1,a())},!0)})["catch"](function(e){t.stop(),o.loading=!1,console.log(e)})}}]}}]),app.directive("dcbSticky",["$window",function(e){var r=angular.element(e);return{restrict:"A",link:function(e,t,n){var a=n.dcbSticky,o=t.offset().top;r.on("scroll",function(e){r.scrollTop()>=o?t.addClass(a):t.removeClass(a)})}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
